
FREERTOS_SAM_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009724  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409724  00409724  00019724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b4  20400000  0040972c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000358  204009b4  0040a0e0  000209b4  2**2
                  ALLOC
  4 .stack        00002004  20400d0c  0040a438  000209b4  2**0
                  ALLOC
  5 .heap         00000200  20402d10  0040c43c  000209b4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e2  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001c7de  00000000  00000000  00020a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003bac  00000000  00000000  0003d219  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000089d5  00000000  00000000  00040dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e20  00000000  00000000  0004979a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000fa8  00000000  00000000  0004a5ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00020fbd  00000000  00000000  0004b562  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000fba8  00000000  00000000  0006c51f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000931d9  00000000  00000000  0007c0c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003438  00000000  00000000  0010f2a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	10 2d 40 20 35 08 40 00 33 08 40 00 33 08 40 00     .-@ 5.@.3.@.3.@.
  400010:	33 08 40 00 33 08 40 00 33 08 40 00 00 00 00 00     3.@.3.@.3.@.....
	...
  40002c:	0d 0c 40 00 33 08 40 00 00 00 00 00 ad 0c 40 00     ..@.3.@.......@.
  40003c:	15 0d 40 00 33 08 40 00 33 08 40 00 33 08 40 00     ..@.3.@.3.@.3.@.
  40004c:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  40005c:	33 08 40 00 33 08 40 00 00 00 00 00 25 05 40 00     3.@.3.@.....%.@.
  40006c:	39 05 40 00 4d 05 40 00 33 08 40 00 33 08 40 00     9.@.M.@.3.@.3.@.
  40007c:	33 08 40 00 61 05 40 00 75 05 40 00 33 08 40 00     3.@.a.@.u.@.3.@.
  40008c:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  40009c:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  4000ac:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  4000bc:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  4000cc:	33 08 40 00 00 00 00 00 33 08 40 00 00 00 00 00     3.@.....3.@.....
  4000dc:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  4000ec:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  4000fc:	33 08 40 00 33 08 40 00 33 08 40 00 33 08 40 00     3.@.3.@.3.@.3.@.
  40010c:	33 08 40 00 33 08 40 00 00 00 00 00 00 00 00 00     3.@.3.@.........
  40011c:	00 00 00 00 33 08 40 00 33 08 40 00 33 08 40 00     ....3.@.3.@.3.@.
  40012c:	33 08 40 00 33 08 40 00 00 00 00 00 33 08 40 00     3.@.3.@.....3.@.
  40013c:	33 08 40 00                                         3.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009b4 	.word	0x204009b4
  40015c:	00000000 	.word	0x00000000
  400160:	0040972c 	.word	0x0040972c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040972c 	.word	0x0040972c
  4001a0:	204009b8 	.word	0x204009b8
  4001a4:	0040972c 	.word	0x0040972c
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400a09 	.word	0x00400a09
  4001f8:	00400625 	.word	0x00400625
  4001fc:	00400679 	.word	0x00400679
  400200:	00400689 	.word	0x00400689
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400699 	.word	0x00400699
  400210:	00400589 	.word	0x00400589
  400214:	004005c1 	.word	0x004005c1
  400218:	004008fd 	.word	0x004008fd

0040021c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40021c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400220:	b980      	cbnz	r0, 400244 <_read+0x28>
  400222:	460c      	mov	r4, r1
  400224:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400226:	2a00      	cmp	r2, #0
  400228:	dd0f      	ble.n	40024a <_read+0x2e>
  40022a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40022c:	4e08      	ldr	r6, [pc, #32]	; (400250 <_read+0x34>)
  40022e:	4d09      	ldr	r5, [pc, #36]	; (400254 <_read+0x38>)
  400230:	6830      	ldr	r0, [r6, #0]
  400232:	4621      	mov	r1, r4
  400234:	682b      	ldr	r3, [r5, #0]
  400236:	4798      	blx	r3
		ptr++;
  400238:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40023a:	42bc      	cmp	r4, r7
  40023c:	d1f8      	bne.n	400230 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40023e:	4640      	mov	r0, r8
  400240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400244:	f04f 38ff 	mov.w	r8, #4294967295
  400248:	e7f9      	b.n	40023e <_read+0x22>
	for (; len > 0; --len) {
  40024a:	4680      	mov	r8, r0
  40024c:	e7f7      	b.n	40023e <_read+0x22>
  40024e:	bf00      	nop
  400250:	20400cc4 	.word	0x20400cc4
  400254:	20400cbc 	.word	0x20400cbc

00400258 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400258:	3801      	subs	r0, #1
  40025a:	2802      	cmp	r0, #2
  40025c:	d815      	bhi.n	40028a <_write+0x32>
{
  40025e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400262:	460e      	mov	r6, r1
  400264:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400266:	b19a      	cbz	r2, 400290 <_write+0x38>
  400268:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40026a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002a4 <_write+0x4c>
  40026e:	4f0c      	ldr	r7, [pc, #48]	; (4002a0 <_write+0x48>)
  400270:	f8d8 0000 	ldr.w	r0, [r8]
  400274:	f815 1b01 	ldrb.w	r1, [r5], #1
  400278:	683b      	ldr	r3, [r7, #0]
  40027a:	4798      	blx	r3
  40027c:	2800      	cmp	r0, #0
  40027e:	db0a      	blt.n	400296 <_write+0x3e>
  400280:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400282:	3c01      	subs	r4, #1
  400284:	d1f4      	bne.n	400270 <_write+0x18>
  400286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40028a:	f04f 30ff 	mov.w	r0, #4294967295
  40028e:	4770      	bx	lr
	for (; len != 0; --len) {
  400290:	4610      	mov	r0, r2
  400292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400296:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40029a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40029e:	bf00      	nop
  4002a0:	20400cc0 	.word	0x20400cc0
  4002a4:	20400cc4 	.word	0x20400cc4

004002a8 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002ae:	4b5c      	ldr	r3, [pc, #368]	; (400420 <board_init+0x178>)
  4002b0:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002b6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4002ba:	4b5a      	ldr	r3, [pc, #360]	; (400424 <board_init+0x17c>)
  4002bc:	2200      	movs	r2, #0
  4002be:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4002c2:	695a      	ldr	r2, [r3, #20]
  4002c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002c8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4002ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002ce:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4002d2:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4002d6:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4002da:	f007 0007 	and.w	r0, r7, #7
  4002de:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4002e0:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4002e4:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4002e8:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4002ec:	f3bf 8f4f 	dsb	sy
  4002f0:	f04f 34ff 	mov.w	r4, #4294967295
  4002f4:	fa04 fc00 	lsl.w	ip, r4, r0
  4002f8:	fa06 f000 	lsl.w	r0, r6, r0
  4002fc:	fa04 f40e 	lsl.w	r4, r4, lr
  400300:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400304:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400306:	463a      	mov	r2, r7
  400308:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40030a:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  40030e:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400312:	3a01      	subs	r2, #1
  400314:	4423      	add	r3, r4
  400316:	f1b2 3fff 	cmp.w	r2, #4294967295
  40031a:	d1f6      	bne.n	40030a <board_init+0x62>
        } while(sets--);
  40031c:	3e01      	subs	r6, #1
  40031e:	4460      	add	r0, ip
  400320:	f1b6 3fff 	cmp.w	r6, #4294967295
  400324:	d1ef      	bne.n	400306 <board_init+0x5e>
  400326:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40032a:	4b3e      	ldr	r3, [pc, #248]	; (400424 <board_init+0x17c>)
  40032c:	695a      	ldr	r2, [r3, #20]
  40032e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400332:	615a      	str	r2, [r3, #20]
  400334:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400338:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40033c:	4a3a      	ldr	r2, [pc, #232]	; (400428 <board_init+0x180>)
  40033e:	493b      	ldr	r1, [pc, #236]	; (40042c <board_init+0x184>)
  400340:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400342:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400346:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40034c:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400350:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400354:	f022 0201 	bic.w	r2, r2, #1
  400358:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40035c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400360:	f022 0201 	bic.w	r2, r2, #1
  400364:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400368:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40036c:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400370:	200a      	movs	r0, #10
  400372:	4c2f      	ldr	r4, [pc, #188]	; (400430 <board_init+0x188>)
  400374:	47a0      	blx	r4
  400376:	200b      	movs	r0, #11
  400378:	47a0      	blx	r4
  40037a:	200c      	movs	r0, #12
  40037c:	47a0      	blx	r4
  40037e:	2010      	movs	r0, #16
  400380:	47a0      	blx	r4
  400382:	2011      	movs	r0, #17
  400384:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400386:	4b2b      	ldr	r3, [pc, #172]	; (400434 <board_init+0x18c>)
  400388:	f44f 7280 	mov.w	r2, #256	; 0x100
  40038c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40038e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400392:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400394:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400398:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40039c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40039e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003a2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003a8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003aa:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003b2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003b6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003b8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003ba:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003be:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003c0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003d0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003d6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003d8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003de:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003e0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003e4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003e6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003e8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003ec:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003ee:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4003f0:	4a11      	ldr	r2, [pc, #68]	; (400438 <board_init+0x190>)
  4003f2:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4003f6:	f043 0310 	orr.w	r3, r3, #16
  4003fa:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4003fe:	4b0f      	ldr	r3, [pc, #60]	; (40043c <board_init+0x194>)
  400400:	2210      	movs	r2, #16
  400402:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400404:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400408:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40040a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40040c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400410:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400412:	4311      	orrs	r1, r2
  400414:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400416:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400418:	4311      	orrs	r1, r2
  40041a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40041c:	605a      	str	r2, [r3, #4]
  40041e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400420:	400e1850 	.word	0x400e1850
  400424:	e000ed00 	.word	0xe000ed00
  400428:	400e0c00 	.word	0x400e0c00
  40042c:	5a00080c 	.word	0x5a00080c
  400430:	004006a9 	.word	0x004006a9
  400434:	400e1200 	.word	0x400e1200
  400438:	40088000 	.word	0x40088000
  40043c:	400e1000 	.word	0x400e1000

00400440 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400440:	6301      	str	r1, [r0, #48]	; 0x30
  400442:	4770      	bx	lr

00400444 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400444:	6341      	str	r1, [r0, #52]	; 0x34
  400446:	4770      	bx	lr

00400448 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400448:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  40044c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400450:	d105      	bne.n	40045e <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  400452:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  400454:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  400456:	bf14      	ite	ne
  400458:	2001      	movne	r0, #1
  40045a:	2000      	moveq	r0, #0
  40045c:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  40045e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400460:	e7f8      	b.n	400454 <pio_get+0xc>

00400462 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400462:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400464:	f012 0f01 	tst.w	r2, #1
  400468:	d10d      	bne.n	400486 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  40046a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40046c:	f012 0f0a 	tst.w	r2, #10
  400470:	d00b      	beq.n	40048a <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400472:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400474:	f012 0f02 	tst.w	r2, #2
  400478:	d109      	bne.n	40048e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  40047a:	f012 0f08 	tst.w	r2, #8
  40047e:	d008      	beq.n	400492 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400480:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400484:	e005      	b.n	400492 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400486:	6641      	str	r1, [r0, #100]	; 0x64
  400488:	e7f0      	b.n	40046c <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  40048a:	6241      	str	r1, [r0, #36]	; 0x24
  40048c:	e7f2      	b.n	400474 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  40048e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400492:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400494:	6001      	str	r1, [r0, #0]
  400496:	4770      	bx	lr

00400498 <pio_set_output>:
{
  400498:	b410      	push	{r4}
  40049a:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40049c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40049e:	b94c      	cbnz	r4, 4004b4 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4004a0:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4004a2:	b14b      	cbz	r3, 4004b8 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4004a4:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4004a6:	b94a      	cbnz	r2, 4004bc <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4004a8:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4004aa:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4004ac:	6001      	str	r1, [r0, #0]
}
  4004ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004b2:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4004b4:	6641      	str	r1, [r0, #100]	; 0x64
  4004b6:	e7f4      	b.n	4004a2 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4004b8:	6541      	str	r1, [r0, #84]	; 0x54
  4004ba:	e7f4      	b.n	4004a6 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4004bc:	6301      	str	r1, [r0, #48]	; 0x30
  4004be:	e7f4      	b.n	4004aa <pio_set_output+0x12>

004004c0 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  4004c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4004c2:	420b      	tst	r3, r1
}
  4004c4:	bf14      	ite	ne
  4004c6:	2001      	movne	r0, #1
  4004c8:	2000      	moveq	r0, #0
  4004ca:	4770      	bx	lr

004004cc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4004cc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4004ce:	4770      	bx	lr

004004d0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4004d0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4004d2:	4770      	bx	lr

004004d4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4004d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004d8:	4604      	mov	r4, r0
  4004da:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4004dc:	4b0e      	ldr	r3, [pc, #56]	; (400518 <pio_handler_process+0x44>)
  4004de:	4798      	blx	r3
  4004e0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4004e2:	4620      	mov	r0, r4
  4004e4:	4b0d      	ldr	r3, [pc, #52]	; (40051c <pio_handler_process+0x48>)
  4004e6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4004e8:	4005      	ands	r5, r0
  4004ea:	d013      	beq.n	400514 <pio_handler_process+0x40>
  4004ec:	4c0c      	ldr	r4, [pc, #48]	; (400520 <pio_handler_process+0x4c>)
  4004ee:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4004f2:	e003      	b.n	4004fc <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4004f4:	42b4      	cmp	r4, r6
  4004f6:	d00d      	beq.n	400514 <pio_handler_process+0x40>
  4004f8:	3410      	adds	r4, #16
		while (status != 0) {
  4004fa:	b15d      	cbz	r5, 400514 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4004fc:	6820      	ldr	r0, [r4, #0]
  4004fe:	4540      	cmp	r0, r8
  400500:	d1f8      	bne.n	4004f4 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400502:	6861      	ldr	r1, [r4, #4]
  400504:	4229      	tst	r1, r5
  400506:	d0f5      	beq.n	4004f4 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400508:	68e3      	ldr	r3, [r4, #12]
  40050a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40050c:	6863      	ldr	r3, [r4, #4]
  40050e:	ea25 0503 	bic.w	r5, r5, r3
  400512:	e7ef      	b.n	4004f4 <pio_handler_process+0x20>
  400514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400518:	004004cd 	.word	0x004004cd
  40051c:	004004d1 	.word	0x004004d1
  400520:	204009d0 	.word	0x204009d0

00400524 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400524:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400526:	210a      	movs	r1, #10
  400528:	4801      	ldr	r0, [pc, #4]	; (400530 <PIOA_Handler+0xc>)
  40052a:	4b02      	ldr	r3, [pc, #8]	; (400534 <PIOA_Handler+0x10>)
  40052c:	4798      	blx	r3
  40052e:	bd08      	pop	{r3, pc}
  400530:	400e0e00 	.word	0x400e0e00
  400534:	004004d5 	.word	0x004004d5

00400538 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400538:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40053a:	210b      	movs	r1, #11
  40053c:	4801      	ldr	r0, [pc, #4]	; (400544 <PIOB_Handler+0xc>)
  40053e:	4b02      	ldr	r3, [pc, #8]	; (400548 <PIOB_Handler+0x10>)
  400540:	4798      	blx	r3
  400542:	bd08      	pop	{r3, pc}
  400544:	400e1000 	.word	0x400e1000
  400548:	004004d5 	.word	0x004004d5

0040054c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40054c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40054e:	210c      	movs	r1, #12
  400550:	4801      	ldr	r0, [pc, #4]	; (400558 <PIOC_Handler+0xc>)
  400552:	4b02      	ldr	r3, [pc, #8]	; (40055c <PIOC_Handler+0x10>)
  400554:	4798      	blx	r3
  400556:	bd08      	pop	{r3, pc}
  400558:	400e1200 	.word	0x400e1200
  40055c:	004004d5 	.word	0x004004d5

00400560 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400560:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400562:	2110      	movs	r1, #16
  400564:	4801      	ldr	r0, [pc, #4]	; (40056c <PIOD_Handler+0xc>)
  400566:	4b02      	ldr	r3, [pc, #8]	; (400570 <PIOD_Handler+0x10>)
  400568:	4798      	blx	r3
  40056a:	bd08      	pop	{r3, pc}
  40056c:	400e1400 	.word	0x400e1400
  400570:	004004d5 	.word	0x004004d5

00400574 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400574:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400576:	2111      	movs	r1, #17
  400578:	4801      	ldr	r0, [pc, #4]	; (400580 <PIOE_Handler+0xc>)
  40057a:	4b02      	ldr	r3, [pc, #8]	; (400584 <PIOE_Handler+0x10>)
  40057c:	4798      	blx	r3
  40057e:	bd08      	pop	{r3, pc}
  400580:	400e1600 	.word	0x400e1600
  400584:	004004d5 	.word	0x004004d5

00400588 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400588:	2803      	cmp	r0, #3
  40058a:	d011      	beq.n	4005b0 <pmc_mck_set_division+0x28>
  40058c:	2804      	cmp	r0, #4
  40058e:	d012      	beq.n	4005b6 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400590:	2802      	cmp	r0, #2
  400592:	bf0c      	ite	eq
  400594:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400598:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40059a:	4a08      	ldr	r2, [pc, #32]	; (4005bc <pmc_mck_set_division+0x34>)
  40059c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40059e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4005a2:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4005a4:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4005a6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005a8:	f013 0f08 	tst.w	r3, #8
  4005ac:	d0fb      	beq.n	4005a6 <pmc_mck_set_division+0x1e>
}
  4005ae:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4005b0:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4005b4:	e7f1      	b.n	40059a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4005b6:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4005ba:	e7ee      	b.n	40059a <pmc_mck_set_division+0x12>
  4005bc:	400e0600 	.word	0x400e0600

004005c0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4005c0:	4a17      	ldr	r2, [pc, #92]	; (400620 <pmc_switch_mck_to_pllack+0x60>)
  4005c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4005c8:	4318      	orrs	r0, r3
  4005ca:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005cc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005ce:	f013 0f08 	tst.w	r3, #8
  4005d2:	d10a      	bne.n	4005ea <pmc_switch_mck_to_pllack+0x2a>
  4005d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4005d8:	4911      	ldr	r1, [pc, #68]	; (400620 <pmc_switch_mck_to_pllack+0x60>)
  4005da:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4005dc:	f012 0f08 	tst.w	r2, #8
  4005e0:	d103      	bne.n	4005ea <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005e2:	3b01      	subs	r3, #1
  4005e4:	d1f9      	bne.n	4005da <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4005e6:	2001      	movs	r0, #1
  4005e8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4005ea:	4a0d      	ldr	r2, [pc, #52]	; (400620 <pmc_switch_mck_to_pllack+0x60>)
  4005ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005ee:	f023 0303 	bic.w	r3, r3, #3
  4005f2:	f043 0302 	orr.w	r3, r3, #2
  4005f6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005f8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005fa:	f013 0f08 	tst.w	r3, #8
  4005fe:	d10a      	bne.n	400616 <pmc_switch_mck_to_pllack+0x56>
  400600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400604:	4906      	ldr	r1, [pc, #24]	; (400620 <pmc_switch_mck_to_pllack+0x60>)
  400606:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400608:	f012 0f08 	tst.w	r2, #8
  40060c:	d105      	bne.n	40061a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40060e:	3b01      	subs	r3, #1
  400610:	d1f9      	bne.n	400606 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400612:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400614:	4770      	bx	lr
	return 0;
  400616:	2000      	movs	r0, #0
  400618:	4770      	bx	lr
  40061a:	2000      	movs	r0, #0
  40061c:	4770      	bx	lr
  40061e:	bf00      	nop
  400620:	400e0600 	.word	0x400e0600

00400624 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400624:	b9a0      	cbnz	r0, 400650 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400626:	480e      	ldr	r0, [pc, #56]	; (400660 <pmc_switch_mainck_to_xtal+0x3c>)
  400628:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40062a:	0209      	lsls	r1, r1, #8
  40062c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40062e:	4a0d      	ldr	r2, [pc, #52]	; (400664 <pmc_switch_mainck_to_xtal+0x40>)
  400630:	401a      	ands	r2, r3
  400632:	4b0d      	ldr	r3, [pc, #52]	; (400668 <pmc_switch_mainck_to_xtal+0x44>)
  400634:	4313      	orrs	r3, r2
  400636:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400638:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40063a:	4602      	mov	r2, r0
  40063c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40063e:	f013 0f01 	tst.w	r3, #1
  400642:	d0fb      	beq.n	40063c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400644:	4a06      	ldr	r2, [pc, #24]	; (400660 <pmc_switch_mainck_to_xtal+0x3c>)
  400646:	6a11      	ldr	r1, [r2, #32]
  400648:	4b08      	ldr	r3, [pc, #32]	; (40066c <pmc_switch_mainck_to_xtal+0x48>)
  40064a:	430b      	orrs	r3, r1
  40064c:	6213      	str	r3, [r2, #32]
  40064e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400650:	4903      	ldr	r1, [pc, #12]	; (400660 <pmc_switch_mainck_to_xtal+0x3c>)
  400652:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400654:	4a06      	ldr	r2, [pc, #24]	; (400670 <pmc_switch_mainck_to_xtal+0x4c>)
  400656:	401a      	ands	r2, r3
  400658:	4b06      	ldr	r3, [pc, #24]	; (400674 <pmc_switch_mainck_to_xtal+0x50>)
  40065a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40065c:	620b      	str	r3, [r1, #32]
  40065e:	4770      	bx	lr
  400660:	400e0600 	.word	0x400e0600
  400664:	ffc8fffc 	.word	0xffc8fffc
  400668:	00370001 	.word	0x00370001
  40066c:	01370000 	.word	0x01370000
  400670:	fec8fffc 	.word	0xfec8fffc
  400674:	01370002 	.word	0x01370002

00400678 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400678:	4b02      	ldr	r3, [pc, #8]	; (400684 <pmc_osc_is_ready_mainck+0xc>)
  40067a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40067c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400680:	4770      	bx	lr
  400682:	bf00      	nop
  400684:	400e0600 	.word	0x400e0600

00400688 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400688:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40068c:	4b01      	ldr	r3, [pc, #4]	; (400694 <pmc_disable_pllack+0xc>)
  40068e:	629a      	str	r2, [r3, #40]	; 0x28
  400690:	4770      	bx	lr
  400692:	bf00      	nop
  400694:	400e0600 	.word	0x400e0600

00400698 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400698:	4b02      	ldr	r3, [pc, #8]	; (4006a4 <pmc_is_locked_pllack+0xc>)
  40069a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40069c:	f000 0002 	and.w	r0, r0, #2
  4006a0:	4770      	bx	lr
  4006a2:	bf00      	nop
  4006a4:	400e0600 	.word	0x400e0600

004006a8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4006a8:	283f      	cmp	r0, #63	; 0x3f
  4006aa:	d81e      	bhi.n	4006ea <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4006ac:	281f      	cmp	r0, #31
  4006ae:	d80c      	bhi.n	4006ca <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4006b0:	4b11      	ldr	r3, [pc, #68]	; (4006f8 <pmc_enable_periph_clk+0x50>)
  4006b2:	699a      	ldr	r2, [r3, #24]
  4006b4:	2301      	movs	r3, #1
  4006b6:	4083      	lsls	r3, r0
  4006b8:	4393      	bics	r3, r2
  4006ba:	d018      	beq.n	4006ee <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4006bc:	2301      	movs	r3, #1
  4006be:	fa03 f000 	lsl.w	r0, r3, r0
  4006c2:	4b0d      	ldr	r3, [pc, #52]	; (4006f8 <pmc_enable_periph_clk+0x50>)
  4006c4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4006c6:	2000      	movs	r0, #0
  4006c8:	4770      	bx	lr
		ul_id -= 32;
  4006ca:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4006cc:	4b0a      	ldr	r3, [pc, #40]	; (4006f8 <pmc_enable_periph_clk+0x50>)
  4006ce:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4006d2:	2301      	movs	r3, #1
  4006d4:	4083      	lsls	r3, r0
  4006d6:	4393      	bics	r3, r2
  4006d8:	d00b      	beq.n	4006f2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4006da:	2301      	movs	r3, #1
  4006dc:	fa03 f000 	lsl.w	r0, r3, r0
  4006e0:	4b05      	ldr	r3, [pc, #20]	; (4006f8 <pmc_enable_periph_clk+0x50>)
  4006e2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4006e6:	2000      	movs	r0, #0
  4006e8:	4770      	bx	lr
		return 1;
  4006ea:	2001      	movs	r0, #1
  4006ec:	4770      	bx	lr
	return 0;
  4006ee:	2000      	movs	r0, #0
  4006f0:	4770      	bx	lr
  4006f2:	2000      	movs	r0, #0
}
  4006f4:	4770      	bx	lr
  4006f6:	bf00      	nop
  4006f8:	400e0600 	.word	0x400e0600

004006fc <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4006fc:	6943      	ldr	r3, [r0, #20]
  4006fe:	f013 0f02 	tst.w	r3, #2
  400702:	d002      	beq.n	40070a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400704:	61c1      	str	r1, [r0, #28]
	return 0;
  400706:	2000      	movs	r0, #0
  400708:	4770      	bx	lr
		return 1;
  40070a:	2001      	movs	r0, #1
}
  40070c:	4770      	bx	lr

0040070e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40070e:	6943      	ldr	r3, [r0, #20]
  400710:	f013 0f01 	tst.w	r3, #1
  400714:	d003      	beq.n	40071e <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400716:	6983      	ldr	r3, [r0, #24]
  400718:	700b      	strb	r3, [r1, #0]
	return 0;
  40071a:	2000      	movs	r0, #0
  40071c:	4770      	bx	lr
		return 1;
  40071e:	2001      	movs	r0, #1
}
  400720:	4770      	bx	lr

00400722 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400722:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400724:	010b      	lsls	r3, r1, #4
  400726:	4293      	cmp	r3, r2
  400728:	d914      	bls.n	400754 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40072a:	00c9      	lsls	r1, r1, #3
  40072c:	084b      	lsrs	r3, r1, #1
  40072e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400732:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400736:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400738:	1e5c      	subs	r4, r3, #1
  40073a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40073e:	428c      	cmp	r4, r1
  400740:	d901      	bls.n	400746 <usart_set_async_baudrate+0x24>
		return 1;
  400742:	2001      	movs	r0, #1
  400744:	e017      	b.n	400776 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400746:	6841      	ldr	r1, [r0, #4]
  400748:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40074c:	6041      	str	r1, [r0, #4]
  40074e:	e00c      	b.n	40076a <usart_set_async_baudrate+0x48>
		return 1;
  400750:	2001      	movs	r0, #1
  400752:	e010      	b.n	400776 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400754:	0859      	lsrs	r1, r3, #1
  400756:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  40075a:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40075e:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400760:	1e5c      	subs	r4, r3, #1
  400762:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400766:	428c      	cmp	r4, r1
  400768:	d8f2      	bhi.n	400750 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40076a:	0412      	lsls	r2, r2, #16
  40076c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400770:	431a      	orrs	r2, r3
  400772:	6202      	str	r2, [r0, #32]

	return 0;
  400774:	2000      	movs	r0, #0
}
  400776:	f85d 4b04 	ldr.w	r4, [sp], #4
  40077a:	4770      	bx	lr

0040077c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40077c:	4b08      	ldr	r3, [pc, #32]	; (4007a0 <usart_reset+0x24>)
  40077e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400782:	2300      	movs	r3, #0
  400784:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400786:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400788:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40078a:	2388      	movs	r3, #136	; 0x88
  40078c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40078e:	2324      	movs	r3, #36	; 0x24
  400790:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400792:	f44f 7380 	mov.w	r3, #256	; 0x100
  400796:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400798:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40079c:	6003      	str	r3, [r0, #0]
  40079e:	4770      	bx	lr
  4007a0:	55534100 	.word	0x55534100

004007a4 <usart_init_rs232>:
{
  4007a4:	b570      	push	{r4, r5, r6, lr}
  4007a6:	4605      	mov	r5, r0
  4007a8:	460c      	mov	r4, r1
  4007aa:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4007ac:	4b0f      	ldr	r3, [pc, #60]	; (4007ec <usart_init_rs232+0x48>)
  4007ae:	4798      	blx	r3
	ul_reg_val = 0;
  4007b0:	2200      	movs	r2, #0
  4007b2:	4b0f      	ldr	r3, [pc, #60]	; (4007f0 <usart_init_rs232+0x4c>)
  4007b4:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4007b6:	b1a4      	cbz	r4, 4007e2 <usart_init_rs232+0x3e>
  4007b8:	4632      	mov	r2, r6
  4007ba:	6821      	ldr	r1, [r4, #0]
  4007bc:	4628      	mov	r0, r5
  4007be:	4b0d      	ldr	r3, [pc, #52]	; (4007f4 <usart_init_rs232+0x50>)
  4007c0:	4798      	blx	r3
  4007c2:	4602      	mov	r2, r0
  4007c4:	b978      	cbnz	r0, 4007e6 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4007c6:	6863      	ldr	r3, [r4, #4]
  4007c8:	68a1      	ldr	r1, [r4, #8]
  4007ca:	430b      	orrs	r3, r1
  4007cc:	6921      	ldr	r1, [r4, #16]
  4007ce:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4007d0:	68e1      	ldr	r1, [r4, #12]
  4007d2:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4007d4:	4906      	ldr	r1, [pc, #24]	; (4007f0 <usart_init_rs232+0x4c>)
  4007d6:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4007d8:	6869      	ldr	r1, [r5, #4]
  4007da:	430b      	orrs	r3, r1
  4007dc:	606b      	str	r3, [r5, #4]
}
  4007de:	4610      	mov	r0, r2
  4007e0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4007e2:	2201      	movs	r2, #1
  4007e4:	e7fb      	b.n	4007de <usart_init_rs232+0x3a>
  4007e6:	2201      	movs	r2, #1
  4007e8:	e7f9      	b.n	4007de <usart_init_rs232+0x3a>
  4007ea:	bf00      	nop
  4007ec:	0040077d 	.word	0x0040077d
  4007f0:	20400a40 	.word	0x20400a40
  4007f4:	00400723 	.word	0x00400723

004007f8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4007f8:	2340      	movs	r3, #64	; 0x40
  4007fa:	6003      	str	r3, [r0, #0]
  4007fc:	4770      	bx	lr

004007fe <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4007fe:	2310      	movs	r3, #16
  400800:	6003      	str	r3, [r0, #0]
  400802:	4770      	bx	lr

00400804 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400804:	6943      	ldr	r3, [r0, #20]
  400806:	f013 0f02 	tst.w	r3, #2
  40080a:	d004      	beq.n	400816 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  40080c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400810:	61c1      	str	r1, [r0, #28]
	return 0;
  400812:	2000      	movs	r0, #0
  400814:	4770      	bx	lr
		return 1;
  400816:	2001      	movs	r0, #1
}
  400818:	4770      	bx	lr

0040081a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40081a:	6943      	ldr	r3, [r0, #20]
  40081c:	f013 0f01 	tst.w	r3, #1
  400820:	d005      	beq.n	40082e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400822:	6983      	ldr	r3, [r0, #24]
  400824:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400828:	600b      	str	r3, [r1, #0]
	return 0;
  40082a:	2000      	movs	r0, #0
  40082c:	4770      	bx	lr
		return 1;
  40082e:	2001      	movs	r0, #1
}
  400830:	4770      	bx	lr

00400832 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400832:	e7fe      	b.n	400832 <Dummy_Handler>

00400834 <Reset_Handler>:
{
  400834:	b500      	push	{lr}
  400836:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400838:	4b25      	ldr	r3, [pc, #148]	; (4008d0 <Reset_Handler+0x9c>)
  40083a:	4a26      	ldr	r2, [pc, #152]	; (4008d4 <Reset_Handler+0xa0>)
  40083c:	429a      	cmp	r2, r3
  40083e:	d010      	beq.n	400862 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400840:	4b25      	ldr	r3, [pc, #148]	; (4008d8 <Reset_Handler+0xa4>)
  400842:	4a23      	ldr	r2, [pc, #140]	; (4008d0 <Reset_Handler+0x9c>)
  400844:	429a      	cmp	r2, r3
  400846:	d20c      	bcs.n	400862 <Reset_Handler+0x2e>
  400848:	3b01      	subs	r3, #1
  40084a:	1a9b      	subs	r3, r3, r2
  40084c:	f023 0303 	bic.w	r3, r3, #3
  400850:	3304      	adds	r3, #4
  400852:	4413      	add	r3, r2
  400854:	491f      	ldr	r1, [pc, #124]	; (4008d4 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400856:	f851 0b04 	ldr.w	r0, [r1], #4
  40085a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40085e:	429a      	cmp	r2, r3
  400860:	d1f9      	bne.n	400856 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400862:	4b1e      	ldr	r3, [pc, #120]	; (4008dc <Reset_Handler+0xa8>)
  400864:	4a1e      	ldr	r2, [pc, #120]	; (4008e0 <Reset_Handler+0xac>)
  400866:	429a      	cmp	r2, r3
  400868:	d20a      	bcs.n	400880 <Reset_Handler+0x4c>
  40086a:	3b01      	subs	r3, #1
  40086c:	1a9b      	subs	r3, r3, r2
  40086e:	f023 0303 	bic.w	r3, r3, #3
  400872:	3304      	adds	r3, #4
  400874:	4413      	add	r3, r2
                *pDest++ = 0;
  400876:	2100      	movs	r1, #0
  400878:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40087c:	4293      	cmp	r3, r2
  40087e:	d1fb      	bne.n	400878 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400880:	4a18      	ldr	r2, [pc, #96]	; (4008e4 <Reset_Handler+0xb0>)
  400882:	4b19      	ldr	r3, [pc, #100]	; (4008e8 <Reset_Handler+0xb4>)
  400884:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400888:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40088a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40088e:	fab3 f383 	clz	r3, r3
  400892:	095b      	lsrs	r3, r3, #5
  400894:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400896:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400898:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40089c:	2200      	movs	r2, #0
  40089e:	4b13      	ldr	r3, [pc, #76]	; (4008ec <Reset_Handler+0xb8>)
  4008a0:	701a      	strb	r2, [r3, #0]
	return flags;
  4008a2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4008a4:	4a12      	ldr	r2, [pc, #72]	; (4008f0 <Reset_Handler+0xbc>)
  4008a6:	6813      	ldr	r3, [r2, #0]
  4008a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4008ac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4008ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4008b2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4008b6:	b129      	cbz	r1, 4008c4 <Reset_Handler+0x90>
		cpu_irq_enable();
  4008b8:	2201      	movs	r2, #1
  4008ba:	4b0c      	ldr	r3, [pc, #48]	; (4008ec <Reset_Handler+0xb8>)
  4008bc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4008be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4008c2:	b662      	cpsie	i
        __libc_init_array();
  4008c4:	4b0b      	ldr	r3, [pc, #44]	; (4008f4 <Reset_Handler+0xc0>)
  4008c6:	4798      	blx	r3
        main();
  4008c8:	4b0b      	ldr	r3, [pc, #44]	; (4008f8 <Reset_Handler+0xc4>)
  4008ca:	4798      	blx	r3
  4008cc:	e7fe      	b.n	4008cc <Reset_Handler+0x98>
  4008ce:	bf00      	nop
  4008d0:	20400000 	.word	0x20400000
  4008d4:	0040972c 	.word	0x0040972c
  4008d8:	204009b4 	.word	0x204009b4
  4008dc:	20400d0c 	.word	0x20400d0c
  4008e0:	204009b4 	.word	0x204009b4
  4008e4:	e000ed00 	.word	0xe000ed00
  4008e8:	00400000 	.word	0x00400000
  4008ec:	20400000 	.word	0x20400000
  4008f0:	e000ed88 	.word	0xe000ed88
  4008f4:	00402f5d 	.word	0x00402f5d
  4008f8:	00402d19 	.word	0x00402d19

004008fc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4008fc:	4b3b      	ldr	r3, [pc, #236]	; (4009ec <SystemCoreClockUpdate+0xf0>)
  4008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400900:	f003 0303 	and.w	r3, r3, #3
  400904:	2b01      	cmp	r3, #1
  400906:	d01d      	beq.n	400944 <SystemCoreClockUpdate+0x48>
  400908:	b183      	cbz	r3, 40092c <SystemCoreClockUpdate+0x30>
  40090a:	2b02      	cmp	r3, #2
  40090c:	d036      	beq.n	40097c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40090e:	4b37      	ldr	r3, [pc, #220]	; (4009ec <SystemCoreClockUpdate+0xf0>)
  400910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400912:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400916:	2b70      	cmp	r3, #112	; 0x70
  400918:	d05f      	beq.n	4009da <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40091a:	4b34      	ldr	r3, [pc, #208]	; (4009ec <SystemCoreClockUpdate+0xf0>)
  40091c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40091e:	4934      	ldr	r1, [pc, #208]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  400920:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400924:	680b      	ldr	r3, [r1, #0]
  400926:	40d3      	lsrs	r3, r2
  400928:	600b      	str	r3, [r1, #0]
  40092a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40092c:	4b31      	ldr	r3, [pc, #196]	; (4009f4 <SystemCoreClockUpdate+0xf8>)
  40092e:	695b      	ldr	r3, [r3, #20]
  400930:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400934:	bf14      	ite	ne
  400936:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40093a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40093e:	4b2c      	ldr	r3, [pc, #176]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  400940:	601a      	str	r2, [r3, #0]
  400942:	e7e4      	b.n	40090e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400944:	4b29      	ldr	r3, [pc, #164]	; (4009ec <SystemCoreClockUpdate+0xf0>)
  400946:	6a1b      	ldr	r3, [r3, #32]
  400948:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40094c:	d003      	beq.n	400956 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40094e:	4a2a      	ldr	r2, [pc, #168]	; (4009f8 <SystemCoreClockUpdate+0xfc>)
  400950:	4b27      	ldr	r3, [pc, #156]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  400952:	601a      	str	r2, [r3, #0]
  400954:	e7db      	b.n	40090e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400956:	4a29      	ldr	r2, [pc, #164]	; (4009fc <SystemCoreClockUpdate+0x100>)
  400958:	4b25      	ldr	r3, [pc, #148]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  40095a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40095c:	4b23      	ldr	r3, [pc, #140]	; (4009ec <SystemCoreClockUpdate+0xf0>)
  40095e:	6a1b      	ldr	r3, [r3, #32]
  400960:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400964:	2b10      	cmp	r3, #16
  400966:	d005      	beq.n	400974 <SystemCoreClockUpdate+0x78>
  400968:	2b20      	cmp	r3, #32
  40096a:	d1d0      	bne.n	40090e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  40096c:	4a22      	ldr	r2, [pc, #136]	; (4009f8 <SystemCoreClockUpdate+0xfc>)
  40096e:	4b20      	ldr	r3, [pc, #128]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  400970:	601a      	str	r2, [r3, #0]
          break;
  400972:	e7cc      	b.n	40090e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400974:	4a22      	ldr	r2, [pc, #136]	; (400a00 <SystemCoreClockUpdate+0x104>)
  400976:	4b1e      	ldr	r3, [pc, #120]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  400978:	601a      	str	r2, [r3, #0]
          break;
  40097a:	e7c8      	b.n	40090e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40097c:	4b1b      	ldr	r3, [pc, #108]	; (4009ec <SystemCoreClockUpdate+0xf0>)
  40097e:	6a1b      	ldr	r3, [r3, #32]
  400980:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400984:	d016      	beq.n	4009b4 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400986:	4a1c      	ldr	r2, [pc, #112]	; (4009f8 <SystemCoreClockUpdate+0xfc>)
  400988:	4b19      	ldr	r3, [pc, #100]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  40098a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40098c:	4b17      	ldr	r3, [pc, #92]	; (4009ec <SystemCoreClockUpdate+0xf0>)
  40098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400990:	f003 0303 	and.w	r3, r3, #3
  400994:	2b02      	cmp	r3, #2
  400996:	d1ba      	bne.n	40090e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400998:	4a14      	ldr	r2, [pc, #80]	; (4009ec <SystemCoreClockUpdate+0xf0>)
  40099a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40099c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40099e:	4814      	ldr	r0, [pc, #80]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4009a0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4009a4:	6803      	ldr	r3, [r0, #0]
  4009a6:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4009aa:	b2d2      	uxtb	r2, r2
  4009ac:	fbb3 f3f2 	udiv	r3, r3, r2
  4009b0:	6003      	str	r3, [r0, #0]
  4009b2:	e7ac      	b.n	40090e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4009b4:	4a11      	ldr	r2, [pc, #68]	; (4009fc <SystemCoreClockUpdate+0x100>)
  4009b6:	4b0e      	ldr	r3, [pc, #56]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  4009b8:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4009ba:	4b0c      	ldr	r3, [pc, #48]	; (4009ec <SystemCoreClockUpdate+0xf0>)
  4009bc:	6a1b      	ldr	r3, [r3, #32]
  4009be:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009c2:	2b10      	cmp	r3, #16
  4009c4:	d005      	beq.n	4009d2 <SystemCoreClockUpdate+0xd6>
  4009c6:	2b20      	cmp	r3, #32
  4009c8:	d1e0      	bne.n	40098c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4009ca:	4a0b      	ldr	r2, [pc, #44]	; (4009f8 <SystemCoreClockUpdate+0xfc>)
  4009cc:	4b08      	ldr	r3, [pc, #32]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  4009ce:	601a      	str	r2, [r3, #0]
          break;
  4009d0:	e7dc      	b.n	40098c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4009d2:	4a0b      	ldr	r2, [pc, #44]	; (400a00 <SystemCoreClockUpdate+0x104>)
  4009d4:	4b06      	ldr	r3, [pc, #24]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  4009d6:	601a      	str	r2, [r3, #0]
          break;
  4009d8:	e7d8      	b.n	40098c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4009da:	4a05      	ldr	r2, [pc, #20]	; (4009f0 <SystemCoreClockUpdate+0xf4>)
  4009dc:	6813      	ldr	r3, [r2, #0]
  4009de:	4909      	ldr	r1, [pc, #36]	; (400a04 <SystemCoreClockUpdate+0x108>)
  4009e0:	fba1 1303 	umull	r1, r3, r1, r3
  4009e4:	085b      	lsrs	r3, r3, #1
  4009e6:	6013      	str	r3, [r2, #0]
  4009e8:	4770      	bx	lr
  4009ea:	bf00      	nop
  4009ec:	400e0600 	.word	0x400e0600
  4009f0:	20400004 	.word	0x20400004
  4009f4:	400e1810 	.word	0x400e1810
  4009f8:	00b71b00 	.word	0x00b71b00
  4009fc:	003d0900 	.word	0x003d0900
  400a00:	007a1200 	.word	0x007a1200
  400a04:	aaaaaaab 	.word	0xaaaaaaab

00400a08 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400a08:	4b16      	ldr	r3, [pc, #88]	; (400a64 <system_init_flash+0x5c>)
  400a0a:	4298      	cmp	r0, r3
  400a0c:	d913      	bls.n	400a36 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400a0e:	4b16      	ldr	r3, [pc, #88]	; (400a68 <system_init_flash+0x60>)
  400a10:	4298      	cmp	r0, r3
  400a12:	d915      	bls.n	400a40 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400a14:	4b15      	ldr	r3, [pc, #84]	; (400a6c <system_init_flash+0x64>)
  400a16:	4298      	cmp	r0, r3
  400a18:	d916      	bls.n	400a48 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400a1a:	4b15      	ldr	r3, [pc, #84]	; (400a70 <system_init_flash+0x68>)
  400a1c:	4298      	cmp	r0, r3
  400a1e:	d917      	bls.n	400a50 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400a20:	4b14      	ldr	r3, [pc, #80]	; (400a74 <system_init_flash+0x6c>)
  400a22:	4298      	cmp	r0, r3
  400a24:	d918      	bls.n	400a58 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400a26:	4b14      	ldr	r3, [pc, #80]	; (400a78 <system_init_flash+0x70>)
  400a28:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400a2a:	bf94      	ite	ls
  400a2c:	4a13      	ldrls	r2, [pc, #76]	; (400a7c <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400a2e:	4a14      	ldrhi	r2, [pc, #80]	; (400a80 <system_init_flash+0x78>)
  400a30:	4b14      	ldr	r3, [pc, #80]	; (400a84 <system_init_flash+0x7c>)
  400a32:	601a      	str	r2, [r3, #0]
  400a34:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a36:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400a3a:	4b12      	ldr	r3, [pc, #72]	; (400a84 <system_init_flash+0x7c>)
  400a3c:	601a      	str	r2, [r3, #0]
  400a3e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a40:	4a11      	ldr	r2, [pc, #68]	; (400a88 <system_init_flash+0x80>)
  400a42:	4b10      	ldr	r3, [pc, #64]	; (400a84 <system_init_flash+0x7c>)
  400a44:	601a      	str	r2, [r3, #0]
  400a46:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a48:	4a10      	ldr	r2, [pc, #64]	; (400a8c <system_init_flash+0x84>)
  400a4a:	4b0e      	ldr	r3, [pc, #56]	; (400a84 <system_init_flash+0x7c>)
  400a4c:	601a      	str	r2, [r3, #0]
  400a4e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a50:	4a0f      	ldr	r2, [pc, #60]	; (400a90 <system_init_flash+0x88>)
  400a52:	4b0c      	ldr	r3, [pc, #48]	; (400a84 <system_init_flash+0x7c>)
  400a54:	601a      	str	r2, [r3, #0]
  400a56:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400a58:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400a5c:	4b09      	ldr	r3, [pc, #36]	; (400a84 <system_init_flash+0x7c>)
  400a5e:	601a      	str	r2, [r3, #0]
  400a60:	4770      	bx	lr
  400a62:	bf00      	nop
  400a64:	015ef3bf 	.word	0x015ef3bf
  400a68:	02bde77f 	.word	0x02bde77f
  400a6c:	041cdb3f 	.word	0x041cdb3f
  400a70:	057bceff 	.word	0x057bceff
  400a74:	06dac2bf 	.word	0x06dac2bf
  400a78:	0839b67f 	.word	0x0839b67f
  400a7c:	04000500 	.word	0x04000500
  400a80:	04000600 	.word	0x04000600
  400a84:	400e0c00 	.word	0x400e0c00
  400a88:	04000100 	.word	0x04000100
  400a8c:	04000200 	.word	0x04000200
  400a90:	04000300 	.word	0x04000300

00400a94 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400a94:	4b0a      	ldr	r3, [pc, #40]	; (400ac0 <_sbrk+0x2c>)
  400a96:	681b      	ldr	r3, [r3, #0]
  400a98:	b153      	cbz	r3, 400ab0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400a9a:	4b09      	ldr	r3, [pc, #36]	; (400ac0 <_sbrk+0x2c>)
  400a9c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400a9e:	181a      	adds	r2, r3, r0
  400aa0:	4908      	ldr	r1, [pc, #32]	; (400ac4 <_sbrk+0x30>)
  400aa2:	4291      	cmp	r1, r2
  400aa4:	db08      	blt.n	400ab8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400aa6:	4610      	mov	r0, r2
  400aa8:	4a05      	ldr	r2, [pc, #20]	; (400ac0 <_sbrk+0x2c>)
  400aaa:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400aac:	4618      	mov	r0, r3
  400aae:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400ab0:	4a05      	ldr	r2, [pc, #20]	; (400ac8 <_sbrk+0x34>)
  400ab2:	4b03      	ldr	r3, [pc, #12]	; (400ac0 <_sbrk+0x2c>)
  400ab4:	601a      	str	r2, [r3, #0]
  400ab6:	e7f0      	b.n	400a9a <_sbrk+0x6>
		return (caddr_t) -1;	
  400ab8:	f04f 30ff 	mov.w	r0, #4294967295
}
  400abc:	4770      	bx	lr
  400abe:	bf00      	nop
  400ac0:	20400a44 	.word	0x20400a44
  400ac4:	2045fffc 	.word	0x2045fffc
  400ac8:	20402f10 	.word	0x20402f10

00400acc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400acc:	f04f 30ff 	mov.w	r0, #4294967295
  400ad0:	4770      	bx	lr

00400ad2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400ad6:	604b      	str	r3, [r1, #4]

	return 0;
}
  400ad8:	2000      	movs	r0, #0
  400ada:	4770      	bx	lr

00400adc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400adc:	2001      	movs	r0, #1
  400ade:	4770      	bx	lr

00400ae0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400ae0:	2000      	movs	r0, #0
  400ae2:	4770      	bx	lr

00400ae4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400ae4:	f100 0308 	add.w	r3, r0, #8
  400ae8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400aea:	f04f 32ff 	mov.w	r2, #4294967295
  400aee:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400af0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400af2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400af4:	2300      	movs	r3, #0
  400af6:	6003      	str	r3, [r0, #0]
  400af8:	4770      	bx	lr

00400afa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400afa:	2300      	movs	r3, #0
  400afc:	6103      	str	r3, [r0, #16]
  400afe:	4770      	bx	lr

00400b00 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400b00:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400b02:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400b04:	689a      	ldr	r2, [r3, #8]
  400b06:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400b08:	689a      	ldr	r2, [r3, #8]
  400b0a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400b0c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400b0e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400b10:	6803      	ldr	r3, [r0, #0]
  400b12:	3301      	adds	r3, #1
  400b14:	6003      	str	r3, [r0, #0]
  400b16:	4770      	bx	lr

00400b18 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400b18:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400b1a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400b1c:	f1b5 3fff 	cmp.w	r5, #4294967295
  400b20:	d002      	beq.n	400b28 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400b22:	f100 0208 	add.w	r2, r0, #8
  400b26:	e002      	b.n	400b2e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  400b28:	6902      	ldr	r2, [r0, #16]
  400b2a:	e004      	b.n	400b36 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400b2c:	461a      	mov	r2, r3
  400b2e:	6853      	ldr	r3, [r2, #4]
  400b30:	681c      	ldr	r4, [r3, #0]
  400b32:	42a5      	cmp	r5, r4
  400b34:	d2fa      	bcs.n	400b2c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400b36:	6853      	ldr	r3, [r2, #4]
  400b38:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400b3a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400b3c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400b3e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400b40:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400b42:	6803      	ldr	r3, [r0, #0]
  400b44:	3301      	adds	r3, #1
  400b46:	6003      	str	r3, [r0, #0]
}
  400b48:	bc30      	pop	{r4, r5}
  400b4a:	4770      	bx	lr

00400b4c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400b4c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400b4e:	6842      	ldr	r2, [r0, #4]
  400b50:	6881      	ldr	r1, [r0, #8]
  400b52:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400b54:	6882      	ldr	r2, [r0, #8]
  400b56:	6841      	ldr	r1, [r0, #4]
  400b58:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400b5a:	685a      	ldr	r2, [r3, #4]
  400b5c:	4290      	cmp	r0, r2
  400b5e:	d005      	beq.n	400b6c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400b60:	2200      	movs	r2, #0
  400b62:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400b64:	6818      	ldr	r0, [r3, #0]
  400b66:	3801      	subs	r0, #1
  400b68:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400b6a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400b6c:	6882      	ldr	r2, [r0, #8]
  400b6e:	605a      	str	r2, [r3, #4]
  400b70:	e7f6      	b.n	400b60 <uxListRemove+0x14>
	...

00400b74 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400b74:	4b0d      	ldr	r3, [pc, #52]	; (400bac <prvTaskExitError+0x38>)
  400b76:	681b      	ldr	r3, [r3, #0]
  400b78:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b7c:	d00a      	beq.n	400b94 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400b7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b82:	b672      	cpsid	i
  400b84:	f383 8811 	msr	BASEPRI, r3
  400b88:	f3bf 8f6f 	isb	sy
  400b8c:	f3bf 8f4f 	dsb	sy
  400b90:	b662      	cpsie	i
  400b92:	e7fe      	b.n	400b92 <prvTaskExitError+0x1e>
  400b94:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b98:	b672      	cpsid	i
  400b9a:	f383 8811 	msr	BASEPRI, r3
  400b9e:	f3bf 8f6f 	isb	sy
  400ba2:	f3bf 8f4f 	dsb	sy
  400ba6:	b662      	cpsie	i
  400ba8:	e7fe      	b.n	400ba8 <prvTaskExitError+0x34>
  400baa:	bf00      	nop
  400bac:	20400008 	.word	0x20400008

00400bb0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400bb0:	4806      	ldr	r0, [pc, #24]	; (400bcc <prvPortStartFirstTask+0x1c>)
  400bb2:	6800      	ldr	r0, [r0, #0]
  400bb4:	6800      	ldr	r0, [r0, #0]
  400bb6:	f380 8808 	msr	MSP, r0
  400bba:	b662      	cpsie	i
  400bbc:	b661      	cpsie	f
  400bbe:	f3bf 8f4f 	dsb	sy
  400bc2:	f3bf 8f6f 	isb	sy
  400bc6:	df00      	svc	0
  400bc8:	bf00      	nop
  400bca:	0000      	.short	0x0000
  400bcc:	e000ed08 	.word	0xe000ed08

00400bd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400bd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400be0 <vPortEnableVFP+0x10>
  400bd4:	6801      	ldr	r1, [r0, #0]
  400bd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400bda:	6001      	str	r1, [r0, #0]
  400bdc:	4770      	bx	lr
  400bde:	0000      	.short	0x0000
  400be0:	e000ed88 	.word	0xe000ed88

00400be4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400be4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400be8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400bec:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400bf0:	4b05      	ldr	r3, [pc, #20]	; (400c08 <pxPortInitialiseStack+0x24>)
  400bf2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400bf6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400bfa:	f06f 0302 	mvn.w	r3, #2
  400bfe:	f840 3c24 	str.w	r3, [r0, #-36]
}
  400c02:	3844      	subs	r0, #68	; 0x44
  400c04:	4770      	bx	lr
  400c06:	bf00      	nop
  400c08:	00400b75 	.word	0x00400b75

00400c0c <SVC_Handler>:
	__asm volatile (
  400c0c:	4b06      	ldr	r3, [pc, #24]	; (400c28 <pxCurrentTCBConst2>)
  400c0e:	6819      	ldr	r1, [r3, #0]
  400c10:	6808      	ldr	r0, [r1, #0]
  400c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c16:	f380 8809 	msr	PSP, r0
  400c1a:	f3bf 8f6f 	isb	sy
  400c1e:	f04f 0000 	mov.w	r0, #0
  400c22:	f380 8811 	msr	BASEPRI, r0
  400c26:	4770      	bx	lr

00400c28 <pxCurrentTCBConst2>:
  400c28:	20400a50 	.word	0x20400a50
  400c2c:	4770      	bx	lr
  400c2e:	bf00      	nop

00400c30 <vPortEnterCritical>:
  400c30:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c34:	b672      	cpsid	i
  400c36:	f383 8811 	msr	BASEPRI, r3
  400c3a:	f3bf 8f6f 	isb	sy
  400c3e:	f3bf 8f4f 	dsb	sy
  400c42:	b662      	cpsie	i
	uxCriticalNesting++;
  400c44:	4a0b      	ldr	r2, [pc, #44]	; (400c74 <vPortEnterCritical+0x44>)
  400c46:	6813      	ldr	r3, [r2, #0]
  400c48:	3301      	adds	r3, #1
  400c4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  400c4c:	2b01      	cmp	r3, #1
  400c4e:	d10f      	bne.n	400c70 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400c50:	4b09      	ldr	r3, [pc, #36]	; (400c78 <vPortEnterCritical+0x48>)
  400c52:	681b      	ldr	r3, [r3, #0]
  400c54:	f013 0fff 	tst.w	r3, #255	; 0xff
  400c58:	d00a      	beq.n	400c70 <vPortEnterCritical+0x40>
  400c5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c5e:	b672      	cpsid	i
  400c60:	f383 8811 	msr	BASEPRI, r3
  400c64:	f3bf 8f6f 	isb	sy
  400c68:	f3bf 8f4f 	dsb	sy
  400c6c:	b662      	cpsie	i
  400c6e:	e7fe      	b.n	400c6e <vPortEnterCritical+0x3e>
  400c70:	4770      	bx	lr
  400c72:	bf00      	nop
  400c74:	20400008 	.word	0x20400008
  400c78:	e000ed04 	.word	0xe000ed04

00400c7c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  400c7c:	4b0a      	ldr	r3, [pc, #40]	; (400ca8 <vPortExitCritical+0x2c>)
  400c7e:	681b      	ldr	r3, [r3, #0]
  400c80:	b953      	cbnz	r3, 400c98 <vPortExitCritical+0x1c>
  400c82:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c86:	b672      	cpsid	i
  400c88:	f383 8811 	msr	BASEPRI, r3
  400c8c:	f3bf 8f6f 	isb	sy
  400c90:	f3bf 8f4f 	dsb	sy
  400c94:	b662      	cpsie	i
  400c96:	e7fe      	b.n	400c96 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400c98:	3b01      	subs	r3, #1
  400c9a:	4a03      	ldr	r2, [pc, #12]	; (400ca8 <vPortExitCritical+0x2c>)
  400c9c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400c9e:	b90b      	cbnz	r3, 400ca4 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400ca0:	f383 8811 	msr	BASEPRI, r3
  400ca4:	4770      	bx	lr
  400ca6:	bf00      	nop
  400ca8:	20400008 	.word	0x20400008

00400cac <PendSV_Handler>:
	__asm volatile
  400cac:	f3ef 8009 	mrs	r0, PSP
  400cb0:	f3bf 8f6f 	isb	sy
  400cb4:	4b15      	ldr	r3, [pc, #84]	; (400d0c <pxCurrentTCBConst>)
  400cb6:	681a      	ldr	r2, [r3, #0]
  400cb8:	f01e 0f10 	tst.w	lr, #16
  400cbc:	bf08      	it	eq
  400cbe:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400cc2:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400cc6:	6010      	str	r0, [r2, #0]
  400cc8:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400ccc:	f04f 0080 	mov.w	r0, #128	; 0x80
  400cd0:	b672      	cpsid	i
  400cd2:	f380 8811 	msr	BASEPRI, r0
  400cd6:	f3bf 8f4f 	dsb	sy
  400cda:	f3bf 8f6f 	isb	sy
  400cde:	b662      	cpsie	i
  400ce0:	f001 f944 	bl	401f6c <vTaskSwitchContext>
  400ce4:	f04f 0000 	mov.w	r0, #0
  400ce8:	f380 8811 	msr	BASEPRI, r0
  400cec:	bc08      	pop	{r3}
  400cee:	6819      	ldr	r1, [r3, #0]
  400cf0:	6808      	ldr	r0, [r1, #0]
  400cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400cf6:	f01e 0f10 	tst.w	lr, #16
  400cfa:	bf08      	it	eq
  400cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400d00:	f380 8809 	msr	PSP, r0
  400d04:	f3bf 8f6f 	isb	sy
  400d08:	4770      	bx	lr
  400d0a:	bf00      	nop

00400d0c <pxCurrentTCBConst>:
  400d0c:	20400a50 	.word	0x20400a50
  400d10:	4770      	bx	lr
  400d12:	bf00      	nop

00400d14 <SysTick_Handler>:
{
  400d14:	b508      	push	{r3, lr}
	__asm volatile
  400d16:	f3ef 8311 	mrs	r3, BASEPRI
  400d1a:	f04f 0280 	mov.w	r2, #128	; 0x80
  400d1e:	b672      	cpsid	i
  400d20:	f382 8811 	msr	BASEPRI, r2
  400d24:	f3bf 8f6f 	isb	sy
  400d28:	f3bf 8f4f 	dsb	sy
  400d2c:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  400d2e:	4b05      	ldr	r3, [pc, #20]	; (400d44 <SysTick_Handler+0x30>)
  400d30:	4798      	blx	r3
  400d32:	b118      	cbz	r0, 400d3c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d38:	4b03      	ldr	r3, [pc, #12]	; (400d48 <SysTick_Handler+0x34>)
  400d3a:	601a      	str	r2, [r3, #0]
	__asm volatile
  400d3c:	2300      	movs	r3, #0
  400d3e:	f383 8811 	msr	BASEPRI, r3
  400d42:	bd08      	pop	{r3, pc}
  400d44:	00401b2d 	.word	0x00401b2d
  400d48:	e000ed04 	.word	0xe000ed04

00400d4c <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400d4c:	4a03      	ldr	r2, [pc, #12]	; (400d5c <vPortSetupTimerInterrupt+0x10>)
  400d4e:	4b04      	ldr	r3, [pc, #16]	; (400d60 <vPortSetupTimerInterrupt+0x14>)
  400d50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400d52:	2207      	movs	r2, #7
  400d54:	3b04      	subs	r3, #4
  400d56:	601a      	str	r2, [r3, #0]
  400d58:	4770      	bx	lr
  400d5a:	bf00      	nop
  400d5c:	000927bf 	.word	0x000927bf
  400d60:	e000e014 	.word	0xe000e014

00400d64 <xPortStartScheduler>:
{
  400d64:	b500      	push	{lr}
  400d66:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400d68:	4b25      	ldr	r3, [pc, #148]	; (400e00 <xPortStartScheduler+0x9c>)
  400d6a:	781a      	ldrb	r2, [r3, #0]
  400d6c:	b2d2      	uxtb	r2, r2
  400d6e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400d70:	22ff      	movs	r2, #255	; 0xff
  400d72:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400d74:	781b      	ldrb	r3, [r3, #0]
  400d76:	b2db      	uxtb	r3, r3
  400d78:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400d7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400d84:	4a1f      	ldr	r2, [pc, #124]	; (400e04 <xPortStartScheduler+0xa0>)
  400d86:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400d88:	2207      	movs	r2, #7
  400d8a:	4b1f      	ldr	r3, [pc, #124]	; (400e08 <xPortStartScheduler+0xa4>)
  400d8c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400d8e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400d92:	f013 0f80 	tst.w	r3, #128	; 0x80
  400d96:	d010      	beq.n	400dba <xPortStartScheduler+0x56>
  400d98:	2206      	movs	r2, #6
  400d9a:	e000      	b.n	400d9e <xPortStartScheduler+0x3a>
  400d9c:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400d9e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400da2:	005b      	lsls	r3, r3, #1
  400da4:	b2db      	uxtb	r3, r3
  400da6:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400daa:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400dae:	1e51      	subs	r1, r2, #1
  400db0:	f013 0f80 	tst.w	r3, #128	; 0x80
  400db4:	d1f2      	bne.n	400d9c <xPortStartScheduler+0x38>
  400db6:	4b14      	ldr	r3, [pc, #80]	; (400e08 <xPortStartScheduler+0xa4>)
  400db8:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400dba:	4a13      	ldr	r2, [pc, #76]	; (400e08 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400dbc:	6813      	ldr	r3, [r2, #0]
  400dbe:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400dc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400dc4:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400dc6:	9b01      	ldr	r3, [sp, #4]
  400dc8:	b2db      	uxtb	r3, r3
  400dca:	4a0d      	ldr	r2, [pc, #52]	; (400e00 <xPortStartScheduler+0x9c>)
  400dcc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400dce:	4b0f      	ldr	r3, [pc, #60]	; (400e0c <xPortStartScheduler+0xa8>)
  400dd0:	681a      	ldr	r2, [r3, #0]
  400dd2:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400dd6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400dd8:	681a      	ldr	r2, [r3, #0]
  400dda:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  400dde:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  400de0:	4b0b      	ldr	r3, [pc, #44]	; (400e10 <xPortStartScheduler+0xac>)
  400de2:	4798      	blx	r3
	uxCriticalNesting = 0;
  400de4:	2200      	movs	r2, #0
  400de6:	4b0b      	ldr	r3, [pc, #44]	; (400e14 <xPortStartScheduler+0xb0>)
  400de8:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  400dea:	4b0b      	ldr	r3, [pc, #44]	; (400e18 <xPortStartScheduler+0xb4>)
  400dec:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400dee:	4a0b      	ldr	r2, [pc, #44]	; (400e1c <xPortStartScheduler+0xb8>)
  400df0:	6813      	ldr	r3, [r2, #0]
  400df2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400df6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  400df8:	4b09      	ldr	r3, [pc, #36]	; (400e20 <xPortStartScheduler+0xbc>)
  400dfa:	4798      	blx	r3
	prvTaskExitError();
  400dfc:	4b09      	ldr	r3, [pc, #36]	; (400e24 <xPortStartScheduler+0xc0>)
  400dfe:	4798      	blx	r3
  400e00:	e000e400 	.word	0xe000e400
  400e04:	20400a48 	.word	0x20400a48
  400e08:	20400a4c 	.word	0x20400a4c
  400e0c:	e000ed20 	.word	0xe000ed20
  400e10:	00400d4d 	.word	0x00400d4d
  400e14:	20400008 	.word	0x20400008
  400e18:	00400bd1 	.word	0x00400bd1
  400e1c:	e000ef34 	.word	0xe000ef34
  400e20:	00400bb1 	.word	0x00400bb1
  400e24:	00400b75 	.word	0x00400b75

00400e28 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400e28:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400e2c:	2b0f      	cmp	r3, #15
  400e2e:	d911      	bls.n	400e54 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400e30:	4a12      	ldr	r2, [pc, #72]	; (400e7c <vPortValidateInterruptPriority+0x54>)
  400e32:	5c9b      	ldrb	r3, [r3, r2]
  400e34:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400e36:	4a12      	ldr	r2, [pc, #72]	; (400e80 <vPortValidateInterruptPriority+0x58>)
  400e38:	7812      	ldrb	r2, [r2, #0]
  400e3a:	429a      	cmp	r2, r3
  400e3c:	d90a      	bls.n	400e54 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  400e3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e42:	b672      	cpsid	i
  400e44:	f383 8811 	msr	BASEPRI, r3
  400e48:	f3bf 8f6f 	isb	sy
  400e4c:	f3bf 8f4f 	dsb	sy
  400e50:	b662      	cpsie	i
  400e52:	e7fe      	b.n	400e52 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400e54:	4b0b      	ldr	r3, [pc, #44]	; (400e84 <vPortValidateInterruptPriority+0x5c>)
  400e56:	681b      	ldr	r3, [r3, #0]
  400e58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400e5c:	4a0a      	ldr	r2, [pc, #40]	; (400e88 <vPortValidateInterruptPriority+0x60>)
  400e5e:	6812      	ldr	r2, [r2, #0]
  400e60:	4293      	cmp	r3, r2
  400e62:	d90a      	bls.n	400e7a <vPortValidateInterruptPriority+0x52>
  400e64:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e68:	b672      	cpsid	i
  400e6a:	f383 8811 	msr	BASEPRI, r3
  400e6e:	f3bf 8f6f 	isb	sy
  400e72:	f3bf 8f4f 	dsb	sy
  400e76:	b662      	cpsie	i
  400e78:	e7fe      	b.n	400e78 <vPortValidateInterruptPriority+0x50>
  400e7a:	4770      	bx	lr
  400e7c:	e000e3f0 	.word	0xe000e3f0
  400e80:	20400a48 	.word	0x20400a48
  400e84:	e000ed0c 	.word	0xe000ed0c
  400e88:	20400a4c 	.word	0x20400a4c

00400e8c <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400e8c:	b510      	push	{r4, lr}
  400e8e:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  400e90:	4b06      	ldr	r3, [pc, #24]	; (400eac <pvPortMalloc+0x20>)
  400e92:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  400e94:	4620      	mov	r0, r4
  400e96:	4b06      	ldr	r3, [pc, #24]	; (400eb0 <pvPortMalloc+0x24>)
  400e98:	4798      	blx	r3
  400e9a:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  400e9c:	4b05      	ldr	r3, [pc, #20]	; (400eb4 <pvPortMalloc+0x28>)
  400e9e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  400ea0:	b10c      	cbz	r4, 400ea6 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  400ea2:	4620      	mov	r0, r4
  400ea4:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  400ea6:	4b04      	ldr	r3, [pc, #16]	; (400eb8 <pvPortMalloc+0x2c>)
  400ea8:	4798      	blx	r3
	return pvReturn;
  400eaa:	e7fa      	b.n	400ea2 <pvPortMalloc+0x16>
  400eac:	00401b05 	.word	0x00401b05
  400eb0:	00402fd5 	.word	0x00402fd5
  400eb4:	00401c79 	.word	0x00401c79
  400eb8:	00402c47 	.word	0x00402c47

00400ebc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  400ebc:	b148      	cbz	r0, 400ed2 <vPortFree+0x16>
{
  400ebe:	b510      	push	{r4, lr}
  400ec0:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  400ec2:	4b04      	ldr	r3, [pc, #16]	; (400ed4 <vPortFree+0x18>)
  400ec4:	4798      	blx	r3
		{
			free( pv );
  400ec6:	4620      	mov	r0, r4
  400ec8:	4b03      	ldr	r3, [pc, #12]	; (400ed8 <vPortFree+0x1c>)
  400eca:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  400ecc:	4b03      	ldr	r3, [pc, #12]	; (400edc <vPortFree+0x20>)
  400ece:	4798      	blx	r3
  400ed0:	bd10      	pop	{r4, pc}
  400ed2:	4770      	bx	lr
  400ed4:	00401b05 	.word	0x00401b05
  400ed8:	00402fe5 	.word	0x00402fe5
  400edc:	00401c79 	.word	0x00401c79

00400ee0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400ee0:	b538      	push	{r3, r4, r5, lr}
  400ee2:	4604      	mov	r4, r0
  400ee4:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400ee6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400ee8:	b95a      	cbnz	r2, 400f02 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400eea:	6803      	ldr	r3, [r0, #0]
  400eec:	2b00      	cmp	r3, #0
  400eee:	d12e      	bne.n	400f4e <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400ef0:	6840      	ldr	r0, [r0, #4]
  400ef2:	4b1b      	ldr	r3, [pc, #108]	; (400f60 <prvCopyDataToQueue+0x80>)
  400ef4:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400ef6:	2300      	movs	r3, #0
  400ef8:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400efa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400efc:	3301      	adds	r3, #1
  400efe:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  400f00:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  400f02:	b96d      	cbnz	r5, 400f20 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400f04:	6880      	ldr	r0, [r0, #8]
  400f06:	4b17      	ldr	r3, [pc, #92]	; (400f64 <prvCopyDataToQueue+0x84>)
  400f08:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400f0a:	68a3      	ldr	r3, [r4, #8]
  400f0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400f0e:	4413      	add	r3, r2
  400f10:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400f12:	6862      	ldr	r2, [r4, #4]
  400f14:	4293      	cmp	r3, r2
  400f16:	d31c      	bcc.n	400f52 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400f18:	6823      	ldr	r3, [r4, #0]
  400f1a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  400f1c:	2000      	movs	r0, #0
  400f1e:	e7ec      	b.n	400efa <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400f20:	68c0      	ldr	r0, [r0, #12]
  400f22:	4b10      	ldr	r3, [pc, #64]	; (400f64 <prvCopyDataToQueue+0x84>)
  400f24:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400f26:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400f28:	425b      	negs	r3, r3
  400f2a:	68e2      	ldr	r2, [r4, #12]
  400f2c:	441a      	add	r2, r3
  400f2e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400f30:	6821      	ldr	r1, [r4, #0]
  400f32:	428a      	cmp	r2, r1
  400f34:	d202      	bcs.n	400f3c <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400f36:	6862      	ldr	r2, [r4, #4]
  400f38:	4413      	add	r3, r2
  400f3a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  400f3c:	2d02      	cmp	r5, #2
  400f3e:	d10a      	bne.n	400f56 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400f40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f42:	b153      	cbz	r3, 400f5a <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  400f44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f46:	3b01      	subs	r3, #1
  400f48:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  400f4a:	2000      	movs	r0, #0
  400f4c:	e7d5      	b.n	400efa <prvCopyDataToQueue+0x1a>
  400f4e:	2000      	movs	r0, #0
  400f50:	e7d3      	b.n	400efa <prvCopyDataToQueue+0x1a>
  400f52:	2000      	movs	r0, #0
  400f54:	e7d1      	b.n	400efa <prvCopyDataToQueue+0x1a>
  400f56:	2000      	movs	r0, #0
  400f58:	e7cf      	b.n	400efa <prvCopyDataToQueue+0x1a>
  400f5a:	2000      	movs	r0, #0
  400f5c:	e7cd      	b.n	400efa <prvCopyDataToQueue+0x1a>
  400f5e:	bf00      	nop
  400f60:	0040236d 	.word	0x0040236d
  400f64:	00403555 	.word	0x00403555

00400f68 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400f68:	b530      	push	{r4, r5, lr}
  400f6a:	b083      	sub	sp, #12
  400f6c:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400f6e:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400f70:	b174      	cbz	r4, 400f90 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400f72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f76:	429a      	cmp	r2, r3
  400f78:	d315      	bcc.n	400fa6 <prvNotifyQueueSetContainer+0x3e>
  400f7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f7e:	b672      	cpsid	i
  400f80:	f383 8811 	msr	BASEPRI, r3
  400f84:	f3bf 8f6f 	isb	sy
  400f88:	f3bf 8f4f 	dsb	sy
  400f8c:	b662      	cpsie	i
  400f8e:	e7fe      	b.n	400f8e <prvNotifyQueueSetContainer+0x26>
  400f90:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f94:	b672      	cpsid	i
  400f96:	f383 8811 	msr	BASEPRI, r3
  400f9a:	f3bf 8f6f 	isb	sy
  400f9e:	f3bf 8f4f 	dsb	sy
  400fa2:	b662      	cpsie	i
  400fa4:	e7fe      	b.n	400fa4 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400fa6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400fa8:	4293      	cmp	r3, r2
  400faa:	d803      	bhi.n	400fb4 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  400fac:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400fae:	4628      	mov	r0, r5
  400fb0:	b003      	add	sp, #12
  400fb2:	bd30      	pop	{r4, r5, pc}
  400fb4:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400fb6:	a901      	add	r1, sp, #4
  400fb8:	4620      	mov	r0, r4
  400fba:	4b0b      	ldr	r3, [pc, #44]	; (400fe8 <prvNotifyQueueSetContainer+0x80>)
  400fbc:	4798      	blx	r3
  400fbe:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400fc0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400fc6:	d10a      	bne.n	400fde <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400fca:	2b00      	cmp	r3, #0
  400fcc:	d0ef      	beq.n	400fae <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400fce:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400fd2:	4b06      	ldr	r3, [pc, #24]	; (400fec <prvNotifyQueueSetContainer+0x84>)
  400fd4:	4798      	blx	r3
  400fd6:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  400fd8:	bf18      	it	ne
  400fda:	2501      	movne	r5, #1
  400fdc:	e7e7      	b.n	400fae <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  400fde:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400fe0:	3301      	adds	r3, #1
  400fe2:	64a3      	str	r3, [r4, #72]	; 0x48
  400fe4:	e7e3      	b.n	400fae <prvNotifyQueueSetContainer+0x46>
  400fe6:	bf00      	nop
  400fe8:	00400ee1 	.word	0x00400ee1
  400fec:	00402141 	.word	0x00402141

00400ff0 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400ff0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400ff2:	b172      	cbz	r2, 401012 <prvCopyDataFromQueue+0x22>
{
  400ff4:	b510      	push	{r4, lr}
  400ff6:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400ff8:	68c4      	ldr	r4, [r0, #12]
  400ffa:	4414      	add	r4, r2
  400ffc:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400ffe:	6840      	ldr	r0, [r0, #4]
  401000:	4284      	cmp	r4, r0
  401002:	d301      	bcc.n	401008 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401004:	6818      	ldr	r0, [r3, #0]
  401006:	60d8      	str	r0, [r3, #12]
  401008:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40100a:	68d9      	ldr	r1, [r3, #12]
  40100c:	4b01      	ldr	r3, [pc, #4]	; (401014 <prvCopyDataFromQueue+0x24>)
  40100e:	4798      	blx	r3
  401010:	bd10      	pop	{r4, pc}
  401012:	4770      	bx	lr
  401014:	00403555 	.word	0x00403555

00401018 <prvUnlockQueue>:
{
  401018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40101a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  40101c:	4b22      	ldr	r3, [pc, #136]	; (4010a8 <prvUnlockQueue+0x90>)
  40101e:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401020:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401022:	2b00      	cmp	r3, #0
  401024:	dd1b      	ble.n	40105e <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401026:	4d21      	ldr	r5, [pc, #132]	; (4010ac <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401028:	4f21      	ldr	r7, [pc, #132]	; (4010b0 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40102a:	4e22      	ldr	r6, [pc, #136]	; (4010b4 <prvUnlockQueue+0x9c>)
  40102c:	e00b      	b.n	401046 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40102e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401030:	b1ab      	cbz	r3, 40105e <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401032:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401036:	47b0      	blx	r6
  401038:	b978      	cbnz	r0, 40105a <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  40103a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40103c:	3b01      	subs	r3, #1
  40103e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401040:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401042:	2b00      	cmp	r3, #0
  401044:	dd0b      	ble.n	40105e <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  401046:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401048:	2b00      	cmp	r3, #0
  40104a:	d0f0      	beq.n	40102e <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40104c:	2100      	movs	r1, #0
  40104e:	4620      	mov	r0, r4
  401050:	47a8      	blx	r5
  401052:	2801      	cmp	r0, #1
  401054:	d1f1      	bne.n	40103a <prvUnlockQueue+0x22>
						vTaskMissedYield();
  401056:	47b8      	blx	r7
  401058:	e7ef      	b.n	40103a <prvUnlockQueue+0x22>
							vTaskMissedYield();
  40105a:	47b8      	blx	r7
  40105c:	e7ed      	b.n	40103a <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  40105e:	f04f 33ff 	mov.w	r3, #4294967295
  401062:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401064:	4b14      	ldr	r3, [pc, #80]	; (4010b8 <prvUnlockQueue+0xa0>)
  401066:	4798      	blx	r3
	taskENTER_CRITICAL();
  401068:	4b0f      	ldr	r3, [pc, #60]	; (4010a8 <prvUnlockQueue+0x90>)
  40106a:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40106c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40106e:	2b00      	cmp	r3, #0
  401070:	dd14      	ble.n	40109c <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401072:	6923      	ldr	r3, [r4, #16]
  401074:	b193      	cbz	r3, 40109c <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401076:	f104 0610 	add.w	r6, r4, #16
  40107a:	4d0e      	ldr	r5, [pc, #56]	; (4010b4 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  40107c:	4f0c      	ldr	r7, [pc, #48]	; (4010b0 <prvUnlockQueue+0x98>)
  40107e:	e007      	b.n	401090 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  401080:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401082:	3b01      	subs	r3, #1
  401084:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401086:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401088:	2b00      	cmp	r3, #0
  40108a:	dd07      	ble.n	40109c <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40108c:	6923      	ldr	r3, [r4, #16]
  40108e:	b12b      	cbz	r3, 40109c <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401090:	4630      	mov	r0, r6
  401092:	47a8      	blx	r5
  401094:	2800      	cmp	r0, #0
  401096:	d0f3      	beq.n	401080 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  401098:	47b8      	blx	r7
  40109a:	e7f1      	b.n	401080 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  40109c:	f04f 33ff 	mov.w	r3, #4294967295
  4010a0:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  4010a2:	4b05      	ldr	r3, [pc, #20]	; (4010b8 <prvUnlockQueue+0xa0>)
  4010a4:	4798      	blx	r3
  4010a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4010a8:	00400c31 	.word	0x00400c31
  4010ac:	00400f69 	.word	0x00400f69
  4010b0:	0040229d 	.word	0x0040229d
  4010b4:	00402141 	.word	0x00402141
  4010b8:	00400c7d 	.word	0x00400c7d

004010bc <xQueueGenericReset>:
{
  4010bc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  4010be:	b308      	cbz	r0, 401104 <xQueueGenericReset+0x48>
  4010c0:	4604      	mov	r4, r0
  4010c2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4010c4:	4b1d      	ldr	r3, [pc, #116]	; (40113c <xQueueGenericReset+0x80>)
  4010c6:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4010c8:	6822      	ldr	r2, [r4, #0]
  4010ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4010cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4010ce:	fb03 f301 	mul.w	r3, r3, r1
  4010d2:	18d0      	adds	r0, r2, r3
  4010d4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4010d6:	2000      	movs	r0, #0
  4010d8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4010da:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4010dc:	1a5b      	subs	r3, r3, r1
  4010de:	4413      	add	r3, r2
  4010e0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4010e2:	f04f 33ff 	mov.w	r3, #4294967295
  4010e6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4010e8:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  4010ea:	b9fd      	cbnz	r5, 40112c <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4010ec:	6923      	ldr	r3, [r4, #16]
  4010ee:	b12b      	cbz	r3, 4010fc <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4010f0:	f104 0010 	add.w	r0, r4, #16
  4010f4:	4b12      	ldr	r3, [pc, #72]	; (401140 <xQueueGenericReset+0x84>)
  4010f6:	4798      	blx	r3
  4010f8:	2801      	cmp	r0, #1
  4010fa:	d00e      	beq.n	40111a <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  4010fc:	4b11      	ldr	r3, [pc, #68]	; (401144 <xQueueGenericReset+0x88>)
  4010fe:	4798      	blx	r3
}
  401100:	2001      	movs	r0, #1
  401102:	bd38      	pop	{r3, r4, r5, pc}
  401104:	f04f 0380 	mov.w	r3, #128	; 0x80
  401108:	b672      	cpsid	i
  40110a:	f383 8811 	msr	BASEPRI, r3
  40110e:	f3bf 8f6f 	isb	sy
  401112:	f3bf 8f4f 	dsb	sy
  401116:	b662      	cpsie	i
  401118:	e7fe      	b.n	401118 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  40111a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40111e:	4b0a      	ldr	r3, [pc, #40]	; (401148 <xQueueGenericReset+0x8c>)
  401120:	601a      	str	r2, [r3, #0]
  401122:	f3bf 8f4f 	dsb	sy
  401126:	f3bf 8f6f 	isb	sy
  40112a:	e7e7      	b.n	4010fc <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  40112c:	f104 0010 	add.w	r0, r4, #16
  401130:	4d06      	ldr	r5, [pc, #24]	; (40114c <xQueueGenericReset+0x90>)
  401132:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401134:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401138:	47a8      	blx	r5
  40113a:	e7df      	b.n	4010fc <xQueueGenericReset+0x40>
  40113c:	00400c31 	.word	0x00400c31
  401140:	00402141 	.word	0x00402141
  401144:	00400c7d 	.word	0x00400c7d
  401148:	e000ed04 	.word	0xe000ed04
  40114c:	00400ae5 	.word	0x00400ae5

00401150 <xQueueGenericCreate>:
{
  401150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401152:	b950      	cbnz	r0, 40116a <xQueueGenericCreate+0x1a>
  401154:	f04f 0380 	mov.w	r3, #128	; 0x80
  401158:	b672      	cpsid	i
  40115a:	f383 8811 	msr	BASEPRI, r3
  40115e:	f3bf 8f6f 	isb	sy
  401162:	f3bf 8f4f 	dsb	sy
  401166:	b662      	cpsie	i
  401168:	e7fe      	b.n	401168 <xQueueGenericCreate+0x18>
  40116a:	4606      	mov	r6, r0
  40116c:	4617      	mov	r7, r2
  40116e:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  401170:	b189      	cbz	r1, 401196 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401172:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401176:	3059      	adds	r0, #89	; 0x59
  401178:	4b12      	ldr	r3, [pc, #72]	; (4011c4 <xQueueGenericCreate+0x74>)
  40117a:	4798      	blx	r3
	if( pxNewQueue != NULL )
  40117c:	4604      	mov	r4, r0
  40117e:	b9e8      	cbnz	r0, 4011bc <xQueueGenericCreate+0x6c>
  401180:	f04f 0380 	mov.w	r3, #128	; 0x80
  401184:	b672      	cpsid	i
  401186:	f383 8811 	msr	BASEPRI, r3
  40118a:	f3bf 8f6f 	isb	sy
  40118e:	f3bf 8f4f 	dsb	sy
  401192:	b662      	cpsie	i
  401194:	e7fe      	b.n	401194 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401196:	2058      	movs	r0, #88	; 0x58
  401198:	4b0a      	ldr	r3, [pc, #40]	; (4011c4 <xQueueGenericCreate+0x74>)
  40119a:	4798      	blx	r3
	if( pxNewQueue != NULL )
  40119c:	4604      	mov	r4, r0
  40119e:	2800      	cmp	r0, #0
  4011a0:	d0ee      	beq.n	401180 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4011a2:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  4011a4:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  4011a6:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4011a8:	2101      	movs	r1, #1
  4011aa:	4620      	mov	r0, r4
  4011ac:	4b06      	ldr	r3, [pc, #24]	; (4011c8 <xQueueGenericCreate+0x78>)
  4011ae:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  4011b0:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  4011b4:	2300      	movs	r3, #0
  4011b6:	6563      	str	r3, [r4, #84]	; 0x54
}
  4011b8:	4620      	mov	r0, r4
  4011ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  4011bc:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4011c0:	6003      	str	r3, [r0, #0]
  4011c2:	e7ef      	b.n	4011a4 <xQueueGenericCreate+0x54>
  4011c4:	00400e8d 	.word	0x00400e8d
  4011c8:	004010bd 	.word	0x004010bd

004011cc <xQueueGenericSend>:
{
  4011cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011d0:	b085      	sub	sp, #20
  4011d2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4011d4:	b1b8      	cbz	r0, 401206 <xQueueGenericSend+0x3a>
  4011d6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4011d8:	b301      	cbz	r1, 40121c <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4011da:	2b02      	cmp	r3, #2
  4011dc:	d02c      	beq.n	401238 <xQueueGenericSend+0x6c>
  4011de:	461d      	mov	r5, r3
  4011e0:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4011e2:	4b66      	ldr	r3, [pc, #408]	; (40137c <xQueueGenericSend+0x1b0>)
  4011e4:	4798      	blx	r3
  4011e6:	2800      	cmp	r0, #0
  4011e8:	d134      	bne.n	401254 <xQueueGenericSend+0x88>
  4011ea:	9b01      	ldr	r3, [sp, #4]
  4011ec:	2b00      	cmp	r3, #0
  4011ee:	d038      	beq.n	401262 <xQueueGenericSend+0x96>
  4011f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011f4:	b672      	cpsid	i
  4011f6:	f383 8811 	msr	BASEPRI, r3
  4011fa:	f3bf 8f6f 	isb	sy
  4011fe:	f3bf 8f4f 	dsb	sy
  401202:	b662      	cpsie	i
  401204:	e7fe      	b.n	401204 <xQueueGenericSend+0x38>
  401206:	f04f 0380 	mov.w	r3, #128	; 0x80
  40120a:	b672      	cpsid	i
  40120c:	f383 8811 	msr	BASEPRI, r3
  401210:	f3bf 8f6f 	isb	sy
  401214:	f3bf 8f4f 	dsb	sy
  401218:	b662      	cpsie	i
  40121a:	e7fe      	b.n	40121a <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40121c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40121e:	2a00      	cmp	r2, #0
  401220:	d0db      	beq.n	4011da <xQueueGenericSend+0xe>
  401222:	f04f 0380 	mov.w	r3, #128	; 0x80
  401226:	b672      	cpsid	i
  401228:	f383 8811 	msr	BASEPRI, r3
  40122c:	f3bf 8f6f 	isb	sy
  401230:	f3bf 8f4f 	dsb	sy
  401234:	b662      	cpsie	i
  401236:	e7fe      	b.n	401236 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401238:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  40123a:	2a01      	cmp	r2, #1
  40123c:	d0cf      	beq.n	4011de <xQueueGenericSend+0x12>
  40123e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401242:	b672      	cpsid	i
  401244:	f383 8811 	msr	BASEPRI, r3
  401248:	f3bf 8f6f 	isb	sy
  40124c:	f3bf 8f4f 	dsb	sy
  401250:	b662      	cpsie	i
  401252:	e7fe      	b.n	401252 <xQueueGenericSend+0x86>
  401254:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401256:	4e4a      	ldr	r6, [pc, #296]	; (401380 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  401258:	f8df a150 	ldr.w	sl, [pc, #336]	; 4013ac <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  40125c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 40138c <xQueueGenericSend+0x1c0>
  401260:	e042      	b.n	4012e8 <xQueueGenericSend+0x11c>
  401262:	2700      	movs	r7, #0
  401264:	e7f7      	b.n	401256 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401266:	462a      	mov	r2, r5
  401268:	4641      	mov	r1, r8
  40126a:	4620      	mov	r0, r4
  40126c:	4b45      	ldr	r3, [pc, #276]	; (401384 <xQueueGenericSend+0x1b8>)
  40126e:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401270:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401272:	b19b      	cbz	r3, 40129c <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401274:	4629      	mov	r1, r5
  401276:	4620      	mov	r0, r4
  401278:	4b43      	ldr	r3, [pc, #268]	; (401388 <xQueueGenericSend+0x1bc>)
  40127a:	4798      	blx	r3
  40127c:	2801      	cmp	r0, #1
  40127e:	d107      	bne.n	401290 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401284:	4b41      	ldr	r3, [pc, #260]	; (40138c <xQueueGenericSend+0x1c0>)
  401286:	601a      	str	r2, [r3, #0]
  401288:	f3bf 8f4f 	dsb	sy
  40128c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401290:	4b3f      	ldr	r3, [pc, #252]	; (401390 <xQueueGenericSend+0x1c4>)
  401292:	4798      	blx	r3
				return pdPASS;
  401294:	2001      	movs	r0, #1
}
  401296:	b005      	add	sp, #20
  401298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40129c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40129e:	b173      	cbz	r3, 4012be <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4012a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4012a4:	4b3b      	ldr	r3, [pc, #236]	; (401394 <xQueueGenericSend+0x1c8>)
  4012a6:	4798      	blx	r3
  4012a8:	2801      	cmp	r0, #1
  4012aa:	d1f1      	bne.n	401290 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  4012ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4012b0:	4b36      	ldr	r3, [pc, #216]	; (40138c <xQueueGenericSend+0x1c0>)
  4012b2:	601a      	str	r2, [r3, #0]
  4012b4:	f3bf 8f4f 	dsb	sy
  4012b8:	f3bf 8f6f 	isb	sy
  4012bc:	e7e8      	b.n	401290 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  4012be:	2800      	cmp	r0, #0
  4012c0:	d0e6      	beq.n	401290 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4012c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4012c6:	4b31      	ldr	r3, [pc, #196]	; (40138c <xQueueGenericSend+0x1c0>)
  4012c8:	601a      	str	r2, [r3, #0]
  4012ca:	f3bf 8f4f 	dsb	sy
  4012ce:	f3bf 8f6f 	isb	sy
  4012d2:	e7dd      	b.n	401290 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  4012d4:	4b2e      	ldr	r3, [pc, #184]	; (401390 <xQueueGenericSend+0x1c4>)
  4012d6:	4798      	blx	r3
					return errQUEUE_FULL;
  4012d8:	2000      	movs	r0, #0
  4012da:	e7dc      	b.n	401296 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  4012dc:	4620      	mov	r0, r4
  4012de:	4b2e      	ldr	r3, [pc, #184]	; (401398 <xQueueGenericSend+0x1cc>)
  4012e0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4012e2:	4b2e      	ldr	r3, [pc, #184]	; (40139c <xQueueGenericSend+0x1d0>)
  4012e4:	4798      	blx	r3
  4012e6:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  4012e8:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4012ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4012ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4012ee:	429a      	cmp	r2, r3
  4012f0:	d3b9      	bcc.n	401266 <xQueueGenericSend+0x9a>
  4012f2:	2d02      	cmp	r5, #2
  4012f4:	d0b7      	beq.n	401266 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  4012f6:	9b01      	ldr	r3, [sp, #4]
  4012f8:	2b00      	cmp	r3, #0
  4012fa:	d0eb      	beq.n	4012d4 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  4012fc:	b90f      	cbnz	r7, 401302 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  4012fe:	a802      	add	r0, sp, #8
  401300:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401302:	4b23      	ldr	r3, [pc, #140]	; (401390 <xQueueGenericSend+0x1c4>)
  401304:	4798      	blx	r3
		vTaskSuspendAll();
  401306:	4b26      	ldr	r3, [pc, #152]	; (4013a0 <xQueueGenericSend+0x1d4>)
  401308:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40130a:	47b0      	blx	r6
  40130c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40130e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401312:	d101      	bne.n	401318 <xQueueGenericSend+0x14c>
  401314:	2300      	movs	r3, #0
  401316:	6463      	str	r3, [r4, #68]	; 0x44
  401318:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40131a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40131e:	d101      	bne.n	401324 <xQueueGenericSend+0x158>
  401320:	2300      	movs	r3, #0
  401322:	64a3      	str	r3, [r4, #72]	; 0x48
  401324:	4b1a      	ldr	r3, [pc, #104]	; (401390 <xQueueGenericSend+0x1c4>)
  401326:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401328:	a901      	add	r1, sp, #4
  40132a:	a802      	add	r0, sp, #8
  40132c:	4b1d      	ldr	r3, [pc, #116]	; (4013a4 <xQueueGenericSend+0x1d8>)
  40132e:	4798      	blx	r3
  401330:	b9e0      	cbnz	r0, 40136c <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  401332:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401334:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401338:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  40133a:	4b15      	ldr	r3, [pc, #84]	; (401390 <xQueueGenericSend+0x1c4>)
  40133c:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40133e:	45bb      	cmp	fp, r7
  401340:	d1cc      	bne.n	4012dc <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401342:	9901      	ldr	r1, [sp, #4]
  401344:	f104 0010 	add.w	r0, r4, #16
  401348:	4b17      	ldr	r3, [pc, #92]	; (4013a8 <xQueueGenericSend+0x1dc>)
  40134a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40134c:	4620      	mov	r0, r4
  40134e:	4b12      	ldr	r3, [pc, #72]	; (401398 <xQueueGenericSend+0x1cc>)
  401350:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401352:	4b12      	ldr	r3, [pc, #72]	; (40139c <xQueueGenericSend+0x1d0>)
  401354:	4798      	blx	r3
  401356:	2800      	cmp	r0, #0
  401358:	d1c5      	bne.n	4012e6 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  40135a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40135e:	f8c9 3000 	str.w	r3, [r9]
  401362:	f3bf 8f4f 	dsb	sy
  401366:	f3bf 8f6f 	isb	sy
  40136a:	e7bc      	b.n	4012e6 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  40136c:	4620      	mov	r0, r4
  40136e:	4b0a      	ldr	r3, [pc, #40]	; (401398 <xQueueGenericSend+0x1cc>)
  401370:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401372:	4b0a      	ldr	r3, [pc, #40]	; (40139c <xQueueGenericSend+0x1d0>)
  401374:	4798      	blx	r3
			return errQUEUE_FULL;
  401376:	2000      	movs	r0, #0
  401378:	e78d      	b.n	401296 <xQueueGenericSend+0xca>
  40137a:	bf00      	nop
  40137c:	004022a9 	.word	0x004022a9
  401380:	00400c31 	.word	0x00400c31
  401384:	00400ee1 	.word	0x00400ee1
  401388:	00400f69 	.word	0x00400f69
  40138c:	e000ed04 	.word	0xe000ed04
  401390:	00400c7d 	.word	0x00400c7d
  401394:	00402141 	.word	0x00402141
  401398:	00401019 	.word	0x00401019
  40139c:	00401c79 	.word	0x00401c79
  4013a0:	00401b05 	.word	0x00401b05
  4013a4:	00402209 	.word	0x00402209
  4013a8:	0040203d 	.word	0x0040203d
  4013ac:	004021d9 	.word	0x004021d9

004013b0 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  4013b0:	2800      	cmp	r0, #0
  4013b2:	d036      	beq.n	401422 <xQueueGenericSendFromISR+0x72>
{
  4013b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4013b8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4013ba:	2900      	cmp	r1, #0
  4013bc:	d03c      	beq.n	401438 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4013be:	2b02      	cmp	r3, #2
  4013c0:	d048      	beq.n	401454 <xQueueGenericSendFromISR+0xa4>
  4013c2:	461e      	mov	r6, r3
  4013c4:	4615      	mov	r5, r2
  4013c6:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4013c8:	4b35      	ldr	r3, [pc, #212]	; (4014a0 <xQueueGenericSendFromISR+0xf0>)
  4013ca:	4798      	blx	r3
	__asm volatile
  4013cc:	f3ef 8711 	mrs	r7, BASEPRI
  4013d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013d4:	b672      	cpsid	i
  4013d6:	f383 8811 	msr	BASEPRI, r3
  4013da:	f3bf 8f6f 	isb	sy
  4013de:	f3bf 8f4f 	dsb	sy
  4013e2:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4013e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4013e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4013e8:	429a      	cmp	r2, r3
  4013ea:	d301      	bcc.n	4013f0 <xQueueGenericSendFromISR+0x40>
  4013ec:	2e02      	cmp	r6, #2
  4013ee:	d14f      	bne.n	401490 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4013f0:	4632      	mov	r2, r6
  4013f2:	4641      	mov	r1, r8
  4013f4:	4620      	mov	r0, r4
  4013f6:	4b2b      	ldr	r3, [pc, #172]	; (4014a4 <xQueueGenericSendFromISR+0xf4>)
  4013f8:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  4013fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4013fc:	f1b3 3fff 	cmp.w	r3, #4294967295
  401400:	d141      	bne.n	401486 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  401402:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401404:	2b00      	cmp	r3, #0
  401406:	d033      	beq.n	401470 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401408:	4631      	mov	r1, r6
  40140a:	4620      	mov	r0, r4
  40140c:	4b26      	ldr	r3, [pc, #152]	; (4014a8 <xQueueGenericSendFromISR+0xf8>)
  40140e:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401410:	2d00      	cmp	r5, #0
  401412:	d03f      	beq.n	401494 <xQueueGenericSendFromISR+0xe4>
  401414:	2801      	cmp	r0, #1
  401416:	d13d      	bne.n	401494 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401418:	6028      	str	r0, [r5, #0]
	__asm volatile
  40141a:	f387 8811 	msr	BASEPRI, r7
}
  40141e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  401422:	f04f 0380 	mov.w	r3, #128	; 0x80
  401426:	b672      	cpsid	i
  401428:	f383 8811 	msr	BASEPRI, r3
  40142c:	f3bf 8f6f 	isb	sy
  401430:	f3bf 8f4f 	dsb	sy
  401434:	b662      	cpsie	i
  401436:	e7fe      	b.n	401436 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401438:	6c00      	ldr	r0, [r0, #64]	; 0x40
  40143a:	2800      	cmp	r0, #0
  40143c:	d0bf      	beq.n	4013be <xQueueGenericSendFromISR+0xe>
  40143e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401442:	b672      	cpsid	i
  401444:	f383 8811 	msr	BASEPRI, r3
  401448:	f3bf 8f6f 	isb	sy
  40144c:	f3bf 8f4f 	dsb	sy
  401450:	b662      	cpsie	i
  401452:	e7fe      	b.n	401452 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401454:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401456:	2801      	cmp	r0, #1
  401458:	d0b3      	beq.n	4013c2 <xQueueGenericSendFromISR+0x12>
  40145a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40145e:	b672      	cpsid	i
  401460:	f383 8811 	msr	BASEPRI, r3
  401464:	f3bf 8f6f 	isb	sy
  401468:	f3bf 8f4f 	dsb	sy
  40146c:	b662      	cpsie	i
  40146e:	e7fe      	b.n	40146e <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401470:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401472:	b18b      	cbz	r3, 401498 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401474:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401478:	4b0c      	ldr	r3, [pc, #48]	; (4014ac <xQueueGenericSendFromISR+0xfc>)
  40147a:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  40147c:	b175      	cbz	r5, 40149c <xQueueGenericSendFromISR+0xec>
  40147e:	b168      	cbz	r0, 40149c <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401480:	2001      	movs	r0, #1
  401482:	6028      	str	r0, [r5, #0]
  401484:	e7c9      	b.n	40141a <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  401486:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401488:	3301      	adds	r3, #1
  40148a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  40148c:	2001      	movs	r0, #1
  40148e:	e7c4      	b.n	40141a <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  401490:	2000      	movs	r0, #0
  401492:	e7c2      	b.n	40141a <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  401494:	2001      	movs	r0, #1
  401496:	e7c0      	b.n	40141a <xQueueGenericSendFromISR+0x6a>
  401498:	2001      	movs	r0, #1
  40149a:	e7be      	b.n	40141a <xQueueGenericSendFromISR+0x6a>
  40149c:	2001      	movs	r0, #1
  40149e:	e7bc      	b.n	40141a <xQueueGenericSendFromISR+0x6a>
  4014a0:	00400e29 	.word	0x00400e29
  4014a4:	00400ee1 	.word	0x00400ee1
  4014a8:	00400f69 	.word	0x00400f69
  4014ac:	00402141 	.word	0x00402141

004014b0 <xQueueGenericReceive>:
{
  4014b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4014b4:	b084      	sub	sp, #16
  4014b6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4014b8:	b198      	cbz	r0, 4014e2 <xQueueGenericReceive+0x32>
  4014ba:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4014bc:	b1e1      	cbz	r1, 4014f8 <xQueueGenericReceive+0x48>
  4014be:	4698      	mov	r8, r3
  4014c0:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4014c2:	4b61      	ldr	r3, [pc, #388]	; (401648 <xQueueGenericReceive+0x198>)
  4014c4:	4798      	blx	r3
  4014c6:	bb28      	cbnz	r0, 401514 <xQueueGenericReceive+0x64>
  4014c8:	9b01      	ldr	r3, [sp, #4]
  4014ca:	b353      	cbz	r3, 401522 <xQueueGenericReceive+0x72>
  4014cc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014d0:	b672      	cpsid	i
  4014d2:	f383 8811 	msr	BASEPRI, r3
  4014d6:	f3bf 8f6f 	isb	sy
  4014da:	f3bf 8f4f 	dsb	sy
  4014de:	b662      	cpsie	i
  4014e0:	e7fe      	b.n	4014e0 <xQueueGenericReceive+0x30>
  4014e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014e6:	b672      	cpsid	i
  4014e8:	f383 8811 	msr	BASEPRI, r3
  4014ec:	f3bf 8f6f 	isb	sy
  4014f0:	f3bf 8f4f 	dsb	sy
  4014f4:	b662      	cpsie	i
  4014f6:	e7fe      	b.n	4014f6 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4014f8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4014fa:	2a00      	cmp	r2, #0
  4014fc:	d0df      	beq.n	4014be <xQueueGenericReceive+0xe>
  4014fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  401502:	b672      	cpsid	i
  401504:	f383 8811 	msr	BASEPRI, r3
  401508:	f3bf 8f6f 	isb	sy
  40150c:	f3bf 8f4f 	dsb	sy
  401510:	b662      	cpsie	i
  401512:	e7fe      	b.n	401512 <xQueueGenericReceive+0x62>
  401514:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401516:	4d4d      	ldr	r5, [pc, #308]	; (40164c <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401518:	f8df a160 	ldr.w	sl, [pc, #352]	; 40167c <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  40151c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 40165c <xQueueGenericReceive+0x1ac>
  401520:	e04b      	b.n	4015ba <xQueueGenericReceive+0x10a>
  401522:	2600      	movs	r6, #0
  401524:	e7f7      	b.n	401516 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401526:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401528:	4639      	mov	r1, r7
  40152a:	4620      	mov	r0, r4
  40152c:	4b48      	ldr	r3, [pc, #288]	; (401650 <xQueueGenericReceive+0x1a0>)
  40152e:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401530:	f1b8 0f00 	cmp.w	r8, #0
  401534:	d11d      	bne.n	401572 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401536:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401538:	3b01      	subs	r3, #1
  40153a:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40153c:	6823      	ldr	r3, [r4, #0]
  40153e:	b913      	cbnz	r3, 401546 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401540:	4b44      	ldr	r3, [pc, #272]	; (401654 <xQueueGenericReceive+0x1a4>)
  401542:	4798      	blx	r3
  401544:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401546:	6923      	ldr	r3, [r4, #16]
  401548:	b16b      	cbz	r3, 401566 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40154a:	f104 0010 	add.w	r0, r4, #16
  40154e:	4b42      	ldr	r3, [pc, #264]	; (401658 <xQueueGenericReceive+0x1a8>)
  401550:	4798      	blx	r3
  401552:	2801      	cmp	r0, #1
  401554:	d107      	bne.n	401566 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40155a:	4b40      	ldr	r3, [pc, #256]	; (40165c <xQueueGenericReceive+0x1ac>)
  40155c:	601a      	str	r2, [r3, #0]
  40155e:	f3bf 8f4f 	dsb	sy
  401562:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401566:	4b3e      	ldr	r3, [pc, #248]	; (401660 <xQueueGenericReceive+0x1b0>)
  401568:	4798      	blx	r3
				return pdPASS;
  40156a:	2001      	movs	r0, #1
}
  40156c:	b004      	add	sp, #16
  40156e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401572:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401574:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401576:	2b00      	cmp	r3, #0
  401578:	d0f5      	beq.n	401566 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40157a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40157e:	4b36      	ldr	r3, [pc, #216]	; (401658 <xQueueGenericReceive+0x1a8>)
  401580:	4798      	blx	r3
  401582:	2800      	cmp	r0, #0
  401584:	d0ef      	beq.n	401566 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40158a:	4b34      	ldr	r3, [pc, #208]	; (40165c <xQueueGenericReceive+0x1ac>)
  40158c:	601a      	str	r2, [r3, #0]
  40158e:	f3bf 8f4f 	dsb	sy
  401592:	f3bf 8f6f 	isb	sy
  401596:	e7e6      	b.n	401566 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401598:	4b31      	ldr	r3, [pc, #196]	; (401660 <xQueueGenericReceive+0x1b0>)
  40159a:	4798      	blx	r3
					return errQUEUE_EMPTY;
  40159c:	2000      	movs	r0, #0
  40159e:	e7e5      	b.n	40156c <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  4015a0:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4015a2:	6860      	ldr	r0, [r4, #4]
  4015a4:	4b2f      	ldr	r3, [pc, #188]	; (401664 <xQueueGenericReceive+0x1b4>)
  4015a6:	4798      	blx	r3
						taskEXIT_CRITICAL();
  4015a8:	4b2d      	ldr	r3, [pc, #180]	; (401660 <xQueueGenericReceive+0x1b0>)
  4015aa:	4798      	blx	r3
  4015ac:	e030      	b.n	401610 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  4015ae:	4620      	mov	r0, r4
  4015b0:	4b2d      	ldr	r3, [pc, #180]	; (401668 <xQueueGenericReceive+0x1b8>)
  4015b2:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4015b4:	4b2d      	ldr	r3, [pc, #180]	; (40166c <xQueueGenericReceive+0x1bc>)
  4015b6:	4798      	blx	r3
  4015b8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  4015ba:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4015bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4015be:	2b00      	cmp	r3, #0
  4015c0:	d1b1      	bne.n	401526 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  4015c2:	9b01      	ldr	r3, [sp, #4]
  4015c4:	2b00      	cmp	r3, #0
  4015c6:	d0e7      	beq.n	401598 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  4015c8:	b90e      	cbnz	r6, 4015ce <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  4015ca:	a802      	add	r0, sp, #8
  4015cc:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4015ce:	4b24      	ldr	r3, [pc, #144]	; (401660 <xQueueGenericReceive+0x1b0>)
  4015d0:	4798      	blx	r3
		vTaskSuspendAll();
  4015d2:	4b27      	ldr	r3, [pc, #156]	; (401670 <xQueueGenericReceive+0x1c0>)
  4015d4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4015d6:	47a8      	blx	r5
  4015d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4015da:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015de:	d101      	bne.n	4015e4 <xQueueGenericReceive+0x134>
  4015e0:	2300      	movs	r3, #0
  4015e2:	6463      	str	r3, [r4, #68]	; 0x44
  4015e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015e6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015ea:	d101      	bne.n	4015f0 <xQueueGenericReceive+0x140>
  4015ec:	2300      	movs	r3, #0
  4015ee:	64a3      	str	r3, [r4, #72]	; 0x48
  4015f0:	4b1b      	ldr	r3, [pc, #108]	; (401660 <xQueueGenericReceive+0x1b0>)
  4015f2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4015f4:	a901      	add	r1, sp, #4
  4015f6:	a802      	add	r0, sp, #8
  4015f8:	4b1e      	ldr	r3, [pc, #120]	; (401674 <xQueueGenericReceive+0x1c4>)
  4015fa:	4798      	blx	r3
  4015fc:	b9e8      	cbnz	r0, 40163a <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  4015fe:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401600:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  401602:	4b17      	ldr	r3, [pc, #92]	; (401660 <xQueueGenericReceive+0x1b0>)
  401604:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401606:	2e00      	cmp	r6, #0
  401608:	d1d1      	bne.n	4015ae <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40160a:	6823      	ldr	r3, [r4, #0]
  40160c:	2b00      	cmp	r3, #0
  40160e:	d0c7      	beq.n	4015a0 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401610:	9901      	ldr	r1, [sp, #4]
  401612:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401616:	4b18      	ldr	r3, [pc, #96]	; (401678 <xQueueGenericReceive+0x1c8>)
  401618:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40161a:	4620      	mov	r0, r4
  40161c:	4b12      	ldr	r3, [pc, #72]	; (401668 <xQueueGenericReceive+0x1b8>)
  40161e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401620:	4b12      	ldr	r3, [pc, #72]	; (40166c <xQueueGenericReceive+0x1bc>)
  401622:	4798      	blx	r3
  401624:	2800      	cmp	r0, #0
  401626:	d1c7      	bne.n	4015b8 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  401628:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40162c:	f8c9 3000 	str.w	r3, [r9]
  401630:	f3bf 8f4f 	dsb	sy
  401634:	f3bf 8f6f 	isb	sy
  401638:	e7be      	b.n	4015b8 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  40163a:	4620      	mov	r0, r4
  40163c:	4b0a      	ldr	r3, [pc, #40]	; (401668 <xQueueGenericReceive+0x1b8>)
  40163e:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401640:	4b0a      	ldr	r3, [pc, #40]	; (40166c <xQueueGenericReceive+0x1bc>)
  401642:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401644:	2000      	movs	r0, #0
  401646:	e791      	b.n	40156c <xQueueGenericReceive+0xbc>
  401648:	004022a9 	.word	0x004022a9
  40164c:	00400c31 	.word	0x00400c31
  401650:	00400ff1 	.word	0x00400ff1
  401654:	00402539 	.word	0x00402539
  401658:	00402141 	.word	0x00402141
  40165c:	e000ed04 	.word	0xe000ed04
  401660:	00400c7d 	.word	0x00400c7d
  401664:	004022c9 	.word	0x004022c9
  401668:	00401019 	.word	0x00401019
  40166c:	00401c79 	.word	0x00401c79
  401670:	00401b05 	.word	0x00401b05
  401674:	00402209 	.word	0x00402209
  401678:	0040203d 	.word	0x0040203d
  40167c:	004021d9 	.word	0x004021d9

00401680 <vQueueAddToRegistry>:
	{
  401680:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401682:	4b0b      	ldr	r3, [pc, #44]	; (4016b0 <vQueueAddToRegistry+0x30>)
  401684:	681b      	ldr	r3, [r3, #0]
  401686:	b153      	cbz	r3, 40169e <vQueueAddToRegistry+0x1e>
  401688:	2301      	movs	r3, #1
  40168a:	4c09      	ldr	r4, [pc, #36]	; (4016b0 <vQueueAddToRegistry+0x30>)
  40168c:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401690:	b132      	cbz	r2, 4016a0 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401692:	3301      	adds	r3, #1
  401694:	2b08      	cmp	r3, #8
  401696:	d1f9      	bne.n	40168c <vQueueAddToRegistry+0xc>
	}
  401698:	f85d 4b04 	ldr.w	r4, [sp], #4
  40169c:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40169e:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4016a0:	4a03      	ldr	r2, [pc, #12]	; (4016b0 <vQueueAddToRegistry+0x30>)
  4016a2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4016a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4016aa:	6058      	str	r0, [r3, #4]
				break;
  4016ac:	e7f4      	b.n	401698 <vQueueAddToRegistry+0x18>
  4016ae:	bf00      	nop
  4016b0:	20400cc8 	.word	0x20400cc8

004016b4 <vQueueWaitForMessageRestricted>:
	{
  4016b4:	b570      	push	{r4, r5, r6, lr}
  4016b6:	4604      	mov	r4, r0
  4016b8:	460d      	mov	r5, r1
  4016ba:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  4016bc:	4b0f      	ldr	r3, [pc, #60]	; (4016fc <vQueueWaitForMessageRestricted+0x48>)
  4016be:	4798      	blx	r3
  4016c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4016c2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4016c6:	d00b      	beq.n	4016e0 <vQueueWaitForMessageRestricted+0x2c>
  4016c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4016ca:	f1b3 3fff 	cmp.w	r3, #4294967295
  4016ce:	d00a      	beq.n	4016e6 <vQueueWaitForMessageRestricted+0x32>
  4016d0:	4b0b      	ldr	r3, [pc, #44]	; (401700 <vQueueWaitForMessageRestricted+0x4c>)
  4016d2:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  4016d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4016d6:	b14b      	cbz	r3, 4016ec <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  4016d8:	4620      	mov	r0, r4
  4016da:	4b0a      	ldr	r3, [pc, #40]	; (401704 <vQueueWaitForMessageRestricted+0x50>)
  4016dc:	4798      	blx	r3
  4016de:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  4016e0:	2300      	movs	r3, #0
  4016e2:	6463      	str	r3, [r4, #68]	; 0x44
  4016e4:	e7f0      	b.n	4016c8 <vQueueWaitForMessageRestricted+0x14>
  4016e6:	2300      	movs	r3, #0
  4016e8:	64a3      	str	r3, [r4, #72]	; 0x48
  4016ea:	e7f1      	b.n	4016d0 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  4016ec:	4632      	mov	r2, r6
  4016ee:	4629      	mov	r1, r5
  4016f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4016f4:	4b04      	ldr	r3, [pc, #16]	; (401708 <vQueueWaitForMessageRestricted+0x54>)
  4016f6:	4798      	blx	r3
  4016f8:	e7ee      	b.n	4016d8 <vQueueWaitForMessageRestricted+0x24>
  4016fa:	bf00      	nop
  4016fc:	00400c31 	.word	0x00400c31
  401700:	00400c7d 	.word	0x00400c7d
  401704:	00401019 	.word	0x00401019
  401708:	004020c1 	.word	0x004020c1

0040170c <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
  40170c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
  401710:	680f      	ldr	r7, [r1, #0]
  401712:	2f00      	cmp	r7, #0
  401714:	d050      	beq.n	4017b8 <prvListTaskWithinSingleList+0xac>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
  401716:	684b      	ldr	r3, [r1, #4]
  401718:	685b      	ldr	r3, [r3, #4]
  40171a:	604b      	str	r3, [r1, #4]
  40171c:	f101 0e08 	add.w	lr, r1, #8
  401720:	4573      	cmp	r3, lr
  401722:	d008      	beq.n	401736 <prvListTaskWithinSingleList+0x2a>
  401724:	684b      	ldr	r3, [r1, #4]
  401726:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40172a:	4606      	mov	r6, r0
	UBaseType_t uxTask = 0;
  40172c:	2700      	movs	r7, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
  40172e:	f04f 0802 	mov.w	r8, #2
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
  401732:	4638      	mov	r0, r7
  401734:	e020      	b.n	401778 <prvListTaskWithinSingleList+0x6c>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
  401736:	68cb      	ldr	r3, [r1, #12]
  401738:	604b      	str	r3, [r1, #4]
  40173a:	e7f3      	b.n	401724 <prvListTaskWithinSingleList+0x18>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
  40173c:	68cb      	ldr	r3, [r1, #12]
  40173e:	604b      	str	r3, [r1, #4]
  401740:	e01f      	b.n	401782 <prvListTaskWithinSingleList+0x76>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
  401742:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
  401746:	f8ca 3014 	str.w	r3, [sl, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
  40174a:	f8ca 0018 	str.w	r0, [sl, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
  40174e:	f8d9 b030 	ldr.w	fp, [r9, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
  401752:	f89b 3000 	ldrb.w	r3, [fp]
  401756:	2ba5      	cmp	r3, #165	; 0xa5
  401758:	d12c      	bne.n	4017b4 <prvListTaskWithinSingleList+0xa8>
  40175a:	f10b 0301 	add.w	r3, fp, #1
  40175e:	eba3 050b 	sub.w	r5, r3, fp
  401762:	f813 4b01 	ldrb.w	r4, [r3], #1
  401766:	2ca5      	cmp	r4, #165	; 0xa5
  401768:	d0f9      	beq.n	40175e <prvListTaskWithinSingleList+0x52>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
  40176a:	08ad      	lsrs	r5, r5, #2

		return ( uint16_t ) ulCount;
  40176c:	f8aa 501c 	strh.w	r5, [sl, #28]
				uxTask++;
  401770:	3701      	adds	r7, #1
  401772:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
  401774:	45cc      	cmp	ip, r9
  401776:	d01f      	beq.n	4017b8 <prvListTaskWithinSingleList+0xac>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
  401778:	684b      	ldr	r3, [r1, #4]
  40177a:	685b      	ldr	r3, [r3, #4]
  40177c:	604b      	str	r3, [r1, #4]
  40177e:	459e      	cmp	lr, r3
  401780:	d0dc      	beq.n	40173c <prvListTaskWithinSingleList+0x30>
  401782:	684b      	ldr	r3, [r1, #4]
  401784:	f8d3 900c 	ldr.w	r9, [r3, #12]
  401788:	46b2      	mov	sl, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
  40178a:	f8c6 9000 	str.w	r9, [r6]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
  40178e:	f109 0334 	add.w	r3, r9, #52	; 0x34
  401792:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
  401794:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
  401798:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
  40179a:	7332      	strb	r2, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
  40179c:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
  4017a0:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
  4017a2:	2a03      	cmp	r2, #3
  4017a4:	d1cd      	bne.n	401742 <prvListTaskWithinSingleList+0x36>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
  4017a6:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
  4017aa:	2b00      	cmp	r3, #0
  4017ac:	d0c9      	beq.n	401742 <prvListTaskWithinSingleList+0x36>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
  4017ae:	f886 800c 	strb.w	r8, [r6, #12]
  4017b2:	e7c6      	b.n	401742 <prvListTaskWithinSingleList+0x36>
	uint32_t ulCount = 0U;
  4017b4:	4605      	mov	r5, r0
  4017b6:	e7d8      	b.n	40176a <prvListTaskWithinSingleList+0x5e>
	}
  4017b8:	4638      	mov	r0, r7
  4017ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

004017c0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4017c0:	4b08      	ldr	r3, [pc, #32]	; (4017e4 <prvResetNextTaskUnblockTime+0x24>)
  4017c2:	681b      	ldr	r3, [r3, #0]
  4017c4:	681b      	ldr	r3, [r3, #0]
  4017c6:	b13b      	cbz	r3, 4017d8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4017c8:	4b06      	ldr	r3, [pc, #24]	; (4017e4 <prvResetNextTaskUnblockTime+0x24>)
  4017ca:	681b      	ldr	r3, [r3, #0]
  4017cc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4017ce:	68db      	ldr	r3, [r3, #12]
  4017d0:	685a      	ldr	r2, [r3, #4]
  4017d2:	4b05      	ldr	r3, [pc, #20]	; (4017e8 <prvResetNextTaskUnblockTime+0x28>)
  4017d4:	601a      	str	r2, [r3, #0]
  4017d6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  4017d8:	f04f 32ff 	mov.w	r2, #4294967295
  4017dc:	4b02      	ldr	r3, [pc, #8]	; (4017e8 <prvResetNextTaskUnblockTime+0x28>)
  4017de:	601a      	str	r2, [r3, #0]
  4017e0:	4770      	bx	lr
  4017e2:	bf00      	nop
  4017e4:	20400a54 	.word	0x20400a54
  4017e8:	20400b00 	.word	0x20400b00

004017ec <prvAddCurrentTaskToDelayedList>:
{
  4017ec:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4017ee:	4b0f      	ldr	r3, [pc, #60]	; (40182c <prvAddCurrentTaskToDelayedList+0x40>)
  4017f0:	681b      	ldr	r3, [r3, #0]
  4017f2:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  4017f4:	4b0e      	ldr	r3, [pc, #56]	; (401830 <prvAddCurrentTaskToDelayedList+0x44>)
  4017f6:	681b      	ldr	r3, [r3, #0]
  4017f8:	4298      	cmp	r0, r3
  4017fa:	d30e      	bcc.n	40181a <prvAddCurrentTaskToDelayedList+0x2e>
  4017fc:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4017fe:	4b0d      	ldr	r3, [pc, #52]	; (401834 <prvAddCurrentTaskToDelayedList+0x48>)
  401800:	6818      	ldr	r0, [r3, #0]
  401802:	4b0a      	ldr	r3, [pc, #40]	; (40182c <prvAddCurrentTaskToDelayedList+0x40>)
  401804:	6819      	ldr	r1, [r3, #0]
  401806:	3104      	adds	r1, #4
  401808:	4b0b      	ldr	r3, [pc, #44]	; (401838 <prvAddCurrentTaskToDelayedList+0x4c>)
  40180a:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  40180c:	4b0b      	ldr	r3, [pc, #44]	; (40183c <prvAddCurrentTaskToDelayedList+0x50>)
  40180e:	681b      	ldr	r3, [r3, #0]
  401810:	429c      	cmp	r4, r3
  401812:	d201      	bcs.n	401818 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401814:	4b09      	ldr	r3, [pc, #36]	; (40183c <prvAddCurrentTaskToDelayedList+0x50>)
  401816:	601c      	str	r4, [r3, #0]
  401818:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40181a:	4b09      	ldr	r3, [pc, #36]	; (401840 <prvAddCurrentTaskToDelayedList+0x54>)
  40181c:	6818      	ldr	r0, [r3, #0]
  40181e:	4b03      	ldr	r3, [pc, #12]	; (40182c <prvAddCurrentTaskToDelayedList+0x40>)
  401820:	6819      	ldr	r1, [r3, #0]
  401822:	3104      	adds	r1, #4
  401824:	4b04      	ldr	r3, [pc, #16]	; (401838 <prvAddCurrentTaskToDelayedList+0x4c>)
  401826:	4798      	blx	r3
  401828:	bd10      	pop	{r4, pc}
  40182a:	bf00      	nop
  40182c:	20400a50 	.word	0x20400a50
  401830:	20400b48 	.word	0x20400b48
  401834:	20400a54 	.word	0x20400a54
  401838:	00400b19 	.word	0x00400b19
  40183c:	20400b00 	.word	0x20400b00
  401840:	20400a58 	.word	0x20400a58

00401844 <xTaskGenericCreate>:
{
  401844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401848:	b083      	sub	sp, #12
  40184a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40184c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401850:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  401852:	b160      	cbz	r0, 40186e <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401854:	2d04      	cmp	r5, #4
  401856:	d915      	bls.n	401884 <xTaskGenericCreate+0x40>
  401858:	f04f 0380 	mov.w	r3, #128	; 0x80
  40185c:	b672      	cpsid	i
  40185e:	f383 8811 	msr	BASEPRI, r3
  401862:	f3bf 8f6f 	isb	sy
  401866:	f3bf 8f4f 	dsb	sy
  40186a:	b662      	cpsie	i
  40186c:	e7fe      	b.n	40186c <xTaskGenericCreate+0x28>
  40186e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401872:	b672      	cpsid	i
  401874:	f383 8811 	msr	BASEPRI, r3
  401878:	f3bf 8f6f 	isb	sy
  40187c:	f3bf 8f4f 	dsb	sy
  401880:	b662      	cpsie	i
  401882:	e7fe      	b.n	401882 <xTaskGenericCreate+0x3e>
  401884:	9001      	str	r0, [sp, #4]
  401886:	4698      	mov	r8, r3
  401888:	4691      	mov	r9, r2
  40188a:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40188c:	b936      	cbnz	r6, 40189c <xTaskGenericCreate+0x58>
  40188e:	0090      	lsls	r0, r2, #2
  401890:	4b62      	ldr	r3, [pc, #392]	; (401a1c <xTaskGenericCreate+0x1d8>)
  401892:	4798      	blx	r3
		if( pxStack != NULL )
  401894:	4606      	mov	r6, r0
  401896:	2800      	cmp	r0, #0
  401898:	f000 809e 	beq.w	4019d8 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  40189c:	2058      	movs	r0, #88	; 0x58
  40189e:	4b5f      	ldr	r3, [pc, #380]	; (401a1c <xTaskGenericCreate+0x1d8>)
  4018a0:	4798      	blx	r3
			if( pxNewTCB != NULL )
  4018a2:	4604      	mov	r4, r0
  4018a4:	2800      	cmp	r0, #0
  4018a6:	f000 8094 	beq.w	4019d2 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  4018aa:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  4018ac:	ea4f 0289 	mov.w	r2, r9, lsl #2
  4018b0:	21a5      	movs	r1, #165	; 0xa5
  4018b2:	4630      	mov	r0, r6
  4018b4:	4b5a      	ldr	r3, [pc, #360]	; (401a20 <xTaskGenericCreate+0x1dc>)
  4018b6:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  4018b8:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  4018bc:	444e      	add	r6, r9
  4018be:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4018c0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  4018c4:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4018c8:	783b      	ldrb	r3, [r7, #0]
  4018ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  4018ce:	783b      	ldrb	r3, [r7, #0]
  4018d0:	2b00      	cmp	r3, #0
  4018d2:	f040 8084 	bne.w	4019de <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4018d6:	2700      	movs	r7, #0
  4018d8:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  4018dc:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  4018de:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  4018e0:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4018e2:	f104 0904 	add.w	r9, r4, #4
  4018e6:	4648      	mov	r0, r9
  4018e8:	f8df b184 	ldr.w	fp, [pc, #388]	; 401a70 <xTaskGenericCreate+0x22c>
  4018ec:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4018ee:	f104 0018 	add.w	r0, r4, #24
  4018f2:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4018f4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4018f6:	f1c5 0305 	rsb	r3, r5, #5
  4018fa:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4018fc:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  4018fe:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401900:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401904:	4642      	mov	r2, r8
  401906:	9901      	ldr	r1, [sp, #4]
  401908:	4630      	mov	r0, r6
  40190a:	4b46      	ldr	r3, [pc, #280]	; (401a24 <xTaskGenericCreate+0x1e0>)
  40190c:	4798      	blx	r3
  40190e:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401910:	f1ba 0f00 	cmp.w	sl, #0
  401914:	d001      	beq.n	40191a <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401916:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  40191a:	4b43      	ldr	r3, [pc, #268]	; (401a28 <xTaskGenericCreate+0x1e4>)
  40191c:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  40191e:	4a43      	ldr	r2, [pc, #268]	; (401a2c <xTaskGenericCreate+0x1e8>)
  401920:	6813      	ldr	r3, [r2, #0]
  401922:	3301      	adds	r3, #1
  401924:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401926:	4b42      	ldr	r3, [pc, #264]	; (401a30 <xTaskGenericCreate+0x1ec>)
  401928:	681b      	ldr	r3, [r3, #0]
  40192a:	2b00      	cmp	r3, #0
  40192c:	d166      	bne.n	4019fc <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  40192e:	4b40      	ldr	r3, [pc, #256]	; (401a30 <xTaskGenericCreate+0x1ec>)
  401930:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401932:	6813      	ldr	r3, [r2, #0]
  401934:	2b01      	cmp	r3, #1
  401936:	d121      	bne.n	40197c <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401938:	4f3e      	ldr	r7, [pc, #248]	; (401a34 <xTaskGenericCreate+0x1f0>)
  40193a:	4638      	mov	r0, r7
  40193c:	4e3e      	ldr	r6, [pc, #248]	; (401a38 <xTaskGenericCreate+0x1f4>)
  40193e:	47b0      	blx	r6
  401940:	f107 0014 	add.w	r0, r7, #20
  401944:	47b0      	blx	r6
  401946:	f107 0028 	add.w	r0, r7, #40	; 0x28
  40194a:	47b0      	blx	r6
  40194c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  401950:	47b0      	blx	r6
  401952:	f107 0050 	add.w	r0, r7, #80	; 0x50
  401956:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  401958:	f8df 8118 	ldr.w	r8, [pc, #280]	; 401a74 <xTaskGenericCreate+0x230>
  40195c:	4640      	mov	r0, r8
  40195e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  401960:	4f36      	ldr	r7, [pc, #216]	; (401a3c <xTaskGenericCreate+0x1f8>)
  401962:	4638      	mov	r0, r7
  401964:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  401966:	4836      	ldr	r0, [pc, #216]	; (401a40 <xTaskGenericCreate+0x1fc>)
  401968:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  40196a:	4836      	ldr	r0, [pc, #216]	; (401a44 <xTaskGenericCreate+0x200>)
  40196c:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  40196e:	4836      	ldr	r0, [pc, #216]	; (401a48 <xTaskGenericCreate+0x204>)
  401970:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  401972:	4b36      	ldr	r3, [pc, #216]	; (401a4c <xTaskGenericCreate+0x208>)
  401974:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401978:	4b35      	ldr	r3, [pc, #212]	; (401a50 <xTaskGenericCreate+0x20c>)
  40197a:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  40197c:	4a35      	ldr	r2, [pc, #212]	; (401a54 <xTaskGenericCreate+0x210>)
  40197e:	6813      	ldr	r3, [r2, #0]
  401980:	3301      	adds	r3, #1
  401982:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401984:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  401986:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401988:	4a33      	ldr	r2, [pc, #204]	; (401a58 <xTaskGenericCreate+0x214>)
  40198a:	6811      	ldr	r1, [r2, #0]
  40198c:	2301      	movs	r3, #1
  40198e:	4083      	lsls	r3, r0
  401990:	430b      	orrs	r3, r1
  401992:	6013      	str	r3, [r2, #0]
  401994:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401998:	4649      	mov	r1, r9
  40199a:	4b26      	ldr	r3, [pc, #152]	; (401a34 <xTaskGenericCreate+0x1f0>)
  40199c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4019a0:	4b2e      	ldr	r3, [pc, #184]	; (401a5c <xTaskGenericCreate+0x218>)
  4019a2:	4798      	blx	r3
		taskEXIT_CRITICAL();
  4019a4:	4b2e      	ldr	r3, [pc, #184]	; (401a60 <xTaskGenericCreate+0x21c>)
  4019a6:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  4019a8:	4b2e      	ldr	r3, [pc, #184]	; (401a64 <xTaskGenericCreate+0x220>)
  4019aa:	681b      	ldr	r3, [r3, #0]
  4019ac:	2b00      	cmp	r3, #0
  4019ae:	d031      	beq.n	401a14 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  4019b0:	4b1f      	ldr	r3, [pc, #124]	; (401a30 <xTaskGenericCreate+0x1ec>)
  4019b2:	681b      	ldr	r3, [r3, #0]
  4019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4019b6:	429d      	cmp	r5, r3
  4019b8:	d92e      	bls.n	401a18 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  4019ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019be:	4b2a      	ldr	r3, [pc, #168]	; (401a68 <xTaskGenericCreate+0x224>)
  4019c0:	601a      	str	r2, [r3, #0]
  4019c2:	f3bf 8f4f 	dsb	sy
  4019c6:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  4019ca:	2001      	movs	r0, #1
}
  4019cc:	b003      	add	sp, #12
  4019ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  4019d2:	4630      	mov	r0, r6
  4019d4:	4b25      	ldr	r3, [pc, #148]	; (401a6c <xTaskGenericCreate+0x228>)
  4019d6:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4019d8:	f04f 30ff 	mov.w	r0, #4294967295
  4019dc:	e7f6      	b.n	4019cc <xTaskGenericCreate+0x188>
  4019de:	463b      	mov	r3, r7
  4019e0:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4019e4:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4019e6:	7859      	ldrb	r1, [r3, #1]
  4019e8:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  4019ec:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4019f0:	2900      	cmp	r1, #0
  4019f2:	f43f af70 	beq.w	4018d6 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4019f6:	42bb      	cmp	r3, r7
  4019f8:	d1f5      	bne.n	4019e6 <xTaskGenericCreate+0x1a2>
  4019fa:	e76c      	b.n	4018d6 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  4019fc:	4b19      	ldr	r3, [pc, #100]	; (401a64 <xTaskGenericCreate+0x220>)
  4019fe:	681b      	ldr	r3, [r3, #0]
  401a00:	2b00      	cmp	r3, #0
  401a02:	d1bb      	bne.n	40197c <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401a04:	4b0a      	ldr	r3, [pc, #40]	; (401a30 <xTaskGenericCreate+0x1ec>)
  401a06:	681b      	ldr	r3, [r3, #0]
  401a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401a0a:	429d      	cmp	r5, r3
  401a0c:	d3b6      	bcc.n	40197c <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  401a0e:	4b08      	ldr	r3, [pc, #32]	; (401a30 <xTaskGenericCreate+0x1ec>)
  401a10:	601c      	str	r4, [r3, #0]
  401a12:	e7b3      	b.n	40197c <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  401a14:	2001      	movs	r0, #1
  401a16:	e7d9      	b.n	4019cc <xTaskGenericCreate+0x188>
  401a18:	2001      	movs	r0, #1
	return xReturn;
  401a1a:	e7d7      	b.n	4019cc <xTaskGenericCreate+0x188>
  401a1c:	00400e8d 	.word	0x00400e8d
  401a20:	00403689 	.word	0x00403689
  401a24:	00400be5 	.word	0x00400be5
  401a28:	00400c31 	.word	0x00400c31
  401a2c:	20400ac0 	.word	0x20400ac0
  401a30:	20400a50 	.word	0x20400a50
  401a34:	20400a5c 	.word	0x20400a5c
  401a38:	00400ae5 	.word	0x00400ae5
  401a3c:	20400aec 	.word	0x20400aec
  401a40:	20400b08 	.word	0x20400b08
  401a44:	20400b34 	.word	0x20400b34
  401a48:	20400b20 	.word	0x20400b20
  401a4c:	20400a54 	.word	0x20400a54
  401a50:	20400a58 	.word	0x20400a58
  401a54:	20400acc 	.word	0x20400acc
  401a58:	20400ad4 	.word	0x20400ad4
  401a5c:	00400b01 	.word	0x00400b01
  401a60:	00400c7d 	.word	0x00400c7d
  401a64:	20400b1c 	.word	0x20400b1c
  401a68:	e000ed04 	.word	0xe000ed04
  401a6c:	00400ebd 	.word	0x00400ebd
  401a70:	00400afb 	.word	0x00400afb
  401a74:	20400ad8 	.word	0x20400ad8

00401a78 <vTaskStartScheduler>:
{
  401a78:	b510      	push	{r4, lr}
  401a7a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401a7c:	2300      	movs	r3, #0
  401a7e:	9303      	str	r3, [sp, #12]
  401a80:	9302      	str	r3, [sp, #8]
  401a82:	9301      	str	r3, [sp, #4]
  401a84:	9300      	str	r3, [sp, #0]
  401a86:	2282      	movs	r2, #130	; 0x82
  401a88:	4916      	ldr	r1, [pc, #88]	; (401ae4 <vTaskStartScheduler+0x6c>)
  401a8a:	4817      	ldr	r0, [pc, #92]	; (401ae8 <vTaskStartScheduler+0x70>)
  401a8c:	4c17      	ldr	r4, [pc, #92]	; (401aec <vTaskStartScheduler+0x74>)
  401a8e:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401a90:	2801      	cmp	r0, #1
  401a92:	d00b      	beq.n	401aac <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  401a94:	bb20      	cbnz	r0, 401ae0 <vTaskStartScheduler+0x68>
  401a96:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a9a:	b672      	cpsid	i
  401a9c:	f383 8811 	msr	BASEPRI, r3
  401aa0:	f3bf 8f6f 	isb	sy
  401aa4:	f3bf 8f4f 	dsb	sy
  401aa8:	b662      	cpsie	i
  401aaa:	e7fe      	b.n	401aaa <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  401aac:	4b10      	ldr	r3, [pc, #64]	; (401af0 <vTaskStartScheduler+0x78>)
  401aae:	4798      	blx	r3
	if( xReturn == pdPASS )
  401ab0:	2801      	cmp	r0, #1
  401ab2:	d1ef      	bne.n	401a94 <vTaskStartScheduler+0x1c>
  401ab4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ab8:	b672      	cpsid	i
  401aba:	f383 8811 	msr	BASEPRI, r3
  401abe:	f3bf 8f6f 	isb	sy
  401ac2:	f3bf 8f4f 	dsb	sy
  401ac6:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401ac8:	f04f 32ff 	mov.w	r2, #4294967295
  401acc:	4b09      	ldr	r3, [pc, #36]	; (401af4 <vTaskStartScheduler+0x7c>)
  401ace:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401ad0:	2201      	movs	r2, #1
  401ad2:	4b09      	ldr	r3, [pc, #36]	; (401af8 <vTaskStartScheduler+0x80>)
  401ad4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401ad6:	2200      	movs	r2, #0
  401ad8:	4b08      	ldr	r3, [pc, #32]	; (401afc <vTaskStartScheduler+0x84>)
  401ada:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  401adc:	4b08      	ldr	r3, [pc, #32]	; (401b00 <vTaskStartScheduler+0x88>)
  401ade:	4798      	blx	r3
}
  401ae0:	b004      	add	sp, #16
  401ae2:	bd10      	pop	{r4, pc}
  401ae4:	004092b4 	.word	0x004092b4
  401ae8:	00401e29 	.word	0x00401e29
  401aec:	00401845 	.word	0x00401845
  401af0:	00402625 	.word	0x00402625
  401af4:	20400b00 	.word	0x20400b00
  401af8:	20400b1c 	.word	0x20400b1c
  401afc:	20400b48 	.word	0x20400b48
  401b00:	00400d65 	.word	0x00400d65

00401b04 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401b04:	4a02      	ldr	r2, [pc, #8]	; (401b10 <vTaskSuspendAll+0xc>)
  401b06:	6813      	ldr	r3, [r2, #0]
  401b08:	3301      	adds	r3, #1
  401b0a:	6013      	str	r3, [r2, #0]
  401b0c:	4770      	bx	lr
  401b0e:	bf00      	nop
  401b10:	20400ac8 	.word	0x20400ac8

00401b14 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401b14:	4b01      	ldr	r3, [pc, #4]	; (401b1c <xTaskGetTickCount+0x8>)
  401b16:	6818      	ldr	r0, [r3, #0]
}
  401b18:	4770      	bx	lr
  401b1a:	bf00      	nop
  401b1c:	20400b48 	.word	0x20400b48

00401b20 <uxTaskGetNumberOfTasks>:
	return uxCurrentNumberOfTasks;
  401b20:	4b01      	ldr	r3, [pc, #4]	; (401b28 <uxTaskGetNumberOfTasks+0x8>)
  401b22:	6818      	ldr	r0, [r3, #0]
}
  401b24:	4770      	bx	lr
  401b26:	bf00      	nop
  401b28:	20400ac0 	.word	0x20400ac0

00401b2c <xTaskIncrementTick>:
{
  401b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401b30:	4b42      	ldr	r3, [pc, #264]	; (401c3c <xTaskIncrementTick+0x110>)
  401b32:	681b      	ldr	r3, [r3, #0]
  401b34:	2b00      	cmp	r3, #0
  401b36:	d178      	bne.n	401c2a <xTaskIncrementTick+0xfe>
		++xTickCount;
  401b38:	4b41      	ldr	r3, [pc, #260]	; (401c40 <xTaskIncrementTick+0x114>)
  401b3a:	681a      	ldr	r2, [r3, #0]
  401b3c:	3201      	adds	r2, #1
  401b3e:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  401b40:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  401b42:	b9d6      	cbnz	r6, 401b7a <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  401b44:	4b3f      	ldr	r3, [pc, #252]	; (401c44 <xTaskIncrementTick+0x118>)
  401b46:	681b      	ldr	r3, [r3, #0]
  401b48:	681b      	ldr	r3, [r3, #0]
  401b4a:	b153      	cbz	r3, 401b62 <xTaskIncrementTick+0x36>
  401b4c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b50:	b672      	cpsid	i
  401b52:	f383 8811 	msr	BASEPRI, r3
  401b56:	f3bf 8f6f 	isb	sy
  401b5a:	f3bf 8f4f 	dsb	sy
  401b5e:	b662      	cpsie	i
  401b60:	e7fe      	b.n	401b60 <xTaskIncrementTick+0x34>
  401b62:	4a38      	ldr	r2, [pc, #224]	; (401c44 <xTaskIncrementTick+0x118>)
  401b64:	6811      	ldr	r1, [r2, #0]
  401b66:	4b38      	ldr	r3, [pc, #224]	; (401c48 <xTaskIncrementTick+0x11c>)
  401b68:	6818      	ldr	r0, [r3, #0]
  401b6a:	6010      	str	r0, [r2, #0]
  401b6c:	6019      	str	r1, [r3, #0]
  401b6e:	4a37      	ldr	r2, [pc, #220]	; (401c4c <xTaskIncrementTick+0x120>)
  401b70:	6813      	ldr	r3, [r2, #0]
  401b72:	3301      	adds	r3, #1
  401b74:	6013      	str	r3, [r2, #0]
  401b76:	4b36      	ldr	r3, [pc, #216]	; (401c50 <xTaskIncrementTick+0x124>)
  401b78:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  401b7a:	4b36      	ldr	r3, [pc, #216]	; (401c54 <xTaskIncrementTick+0x128>)
  401b7c:	681b      	ldr	r3, [r3, #0]
  401b7e:	429e      	cmp	r6, r3
  401b80:	d218      	bcs.n	401bb4 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  401b82:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401b84:	4b34      	ldr	r3, [pc, #208]	; (401c58 <xTaskIncrementTick+0x12c>)
  401b86:	681b      	ldr	r3, [r3, #0]
  401b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401b8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401b8e:	4a33      	ldr	r2, [pc, #204]	; (401c5c <xTaskIncrementTick+0x130>)
  401b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  401b94:	2b02      	cmp	r3, #2
  401b96:	bf28      	it	cs
  401b98:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401b9a:	4b31      	ldr	r3, [pc, #196]	; (401c60 <xTaskIncrementTick+0x134>)
  401b9c:	681b      	ldr	r3, [r3, #0]
  401b9e:	b90b      	cbnz	r3, 401ba4 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  401ba0:	4b30      	ldr	r3, [pc, #192]	; (401c64 <xTaskIncrementTick+0x138>)
  401ba2:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  401ba4:	4b30      	ldr	r3, [pc, #192]	; (401c68 <xTaskIncrementTick+0x13c>)
  401ba6:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401ba8:	2b00      	cmp	r3, #0
}
  401baa:	bf0c      	ite	eq
  401bac:	4620      	moveq	r0, r4
  401bae:	2001      	movne	r0, #1
  401bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401bb4:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401bb6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 401c44 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401bba:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 401c74 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  401bbe:	4f2b      	ldr	r7, [pc, #172]	; (401c6c <xTaskIncrementTick+0x140>)
  401bc0:	e01f      	b.n	401c02 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  401bc2:	f04f 32ff 	mov.w	r2, #4294967295
  401bc6:	4b23      	ldr	r3, [pc, #140]	; (401c54 <xTaskIncrementTick+0x128>)
  401bc8:	601a      	str	r2, [r3, #0]
						break;
  401bca:	e7db      	b.n	401b84 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  401bcc:	4a21      	ldr	r2, [pc, #132]	; (401c54 <xTaskIncrementTick+0x128>)
  401bce:	6013      	str	r3, [r2, #0]
							break;
  401bd0:	e7d8      	b.n	401b84 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401bd2:	f105 0018 	add.w	r0, r5, #24
  401bd6:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  401bd8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  401bda:	683a      	ldr	r2, [r7, #0]
  401bdc:	2301      	movs	r3, #1
  401bde:	4083      	lsls	r3, r0
  401be0:	4313      	orrs	r3, r2
  401be2:	603b      	str	r3, [r7, #0]
  401be4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401be8:	4651      	mov	r1, sl
  401bea:	4b1c      	ldr	r3, [pc, #112]	; (401c5c <xTaskIncrementTick+0x130>)
  401bec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401bf0:	4b1f      	ldr	r3, [pc, #124]	; (401c70 <xTaskIncrementTick+0x144>)
  401bf2:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401bf4:	4b18      	ldr	r3, [pc, #96]	; (401c58 <xTaskIncrementTick+0x12c>)
  401bf6:	681b      	ldr	r3, [r3, #0]
  401bf8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  401bfc:	429a      	cmp	r2, r3
  401bfe:	bf28      	it	cs
  401c00:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401c02:	f8d9 3000 	ldr.w	r3, [r9]
  401c06:	681b      	ldr	r3, [r3, #0]
  401c08:	2b00      	cmp	r3, #0
  401c0a:	d0da      	beq.n	401bc2 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401c0c:	f8d9 3000 	ldr.w	r3, [r9]
  401c10:	68db      	ldr	r3, [r3, #12]
  401c12:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401c14:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  401c16:	429e      	cmp	r6, r3
  401c18:	d3d8      	bcc.n	401bcc <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401c1a:	f105 0a04 	add.w	sl, r5, #4
  401c1e:	4650      	mov	r0, sl
  401c20:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401c22:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401c24:	2b00      	cmp	r3, #0
  401c26:	d1d4      	bne.n	401bd2 <xTaskIncrementTick+0xa6>
  401c28:	e7d6      	b.n	401bd8 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  401c2a:	4a0d      	ldr	r2, [pc, #52]	; (401c60 <xTaskIncrementTick+0x134>)
  401c2c:	6813      	ldr	r3, [r2, #0]
  401c2e:	3301      	adds	r3, #1
  401c30:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401c32:	4b0c      	ldr	r3, [pc, #48]	; (401c64 <xTaskIncrementTick+0x138>)
  401c34:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  401c36:	2400      	movs	r4, #0
  401c38:	e7b4      	b.n	401ba4 <xTaskIncrementTick+0x78>
  401c3a:	bf00      	nop
  401c3c:	20400ac8 	.word	0x20400ac8
  401c40:	20400b48 	.word	0x20400b48
  401c44:	20400a54 	.word	0x20400a54
  401c48:	20400a58 	.word	0x20400a58
  401c4c:	20400b04 	.word	0x20400b04
  401c50:	004017c1 	.word	0x004017c1
  401c54:	20400b00 	.word	0x20400b00
  401c58:	20400a50 	.word	0x20400a50
  401c5c:	20400a5c 	.word	0x20400a5c
  401c60:	20400ac4 	.word	0x20400ac4
  401c64:	00402c45 	.word	0x00402c45
  401c68:	20400b4c 	.word	0x20400b4c
  401c6c:	20400ad4 	.word	0x20400ad4
  401c70:	00400b01 	.word	0x00400b01
  401c74:	00400b4d 	.word	0x00400b4d

00401c78 <xTaskResumeAll>:
{
  401c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  401c7c:	4b38      	ldr	r3, [pc, #224]	; (401d60 <xTaskResumeAll+0xe8>)
  401c7e:	681b      	ldr	r3, [r3, #0]
  401c80:	b953      	cbnz	r3, 401c98 <xTaskResumeAll+0x20>
  401c82:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c86:	b672      	cpsid	i
  401c88:	f383 8811 	msr	BASEPRI, r3
  401c8c:	f3bf 8f6f 	isb	sy
  401c90:	f3bf 8f4f 	dsb	sy
  401c94:	b662      	cpsie	i
  401c96:	e7fe      	b.n	401c96 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  401c98:	4b32      	ldr	r3, [pc, #200]	; (401d64 <xTaskResumeAll+0xec>)
  401c9a:	4798      	blx	r3
		--uxSchedulerSuspended;
  401c9c:	4b30      	ldr	r3, [pc, #192]	; (401d60 <xTaskResumeAll+0xe8>)
  401c9e:	681a      	ldr	r2, [r3, #0]
  401ca0:	3a01      	subs	r2, #1
  401ca2:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401ca4:	681b      	ldr	r3, [r3, #0]
  401ca6:	2b00      	cmp	r3, #0
  401ca8:	d155      	bne.n	401d56 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401caa:	4b2f      	ldr	r3, [pc, #188]	; (401d68 <xTaskResumeAll+0xf0>)
  401cac:	681b      	ldr	r3, [r3, #0]
  401cae:	2b00      	cmp	r3, #0
  401cb0:	d132      	bne.n	401d18 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  401cb2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401cb4:	4b2d      	ldr	r3, [pc, #180]	; (401d6c <xTaskResumeAll+0xf4>)
  401cb6:	4798      	blx	r3
}
  401cb8:	4620      	mov	r0, r4
  401cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401cbe:	68fb      	ldr	r3, [r7, #12]
  401cc0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401cc2:	f104 0018 	add.w	r0, r4, #24
  401cc6:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401cc8:	f104 0804 	add.w	r8, r4, #4
  401ccc:	4640      	mov	r0, r8
  401cce:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401cd0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401cd2:	682a      	ldr	r2, [r5, #0]
  401cd4:	2301      	movs	r3, #1
  401cd6:	4083      	lsls	r3, r0
  401cd8:	4313      	orrs	r3, r2
  401cda:	602b      	str	r3, [r5, #0]
  401cdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ce0:	4641      	mov	r1, r8
  401ce2:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401ce6:	4b22      	ldr	r3, [pc, #136]	; (401d70 <xTaskResumeAll+0xf8>)
  401ce8:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401cea:	4b22      	ldr	r3, [pc, #136]	; (401d74 <xTaskResumeAll+0xfc>)
  401cec:	681b      	ldr	r3, [r3, #0]
  401cee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401cf2:	429a      	cmp	r2, r3
  401cf4:	d20c      	bcs.n	401d10 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401cf6:	683b      	ldr	r3, [r7, #0]
  401cf8:	2b00      	cmp	r3, #0
  401cfa:	d1e0      	bne.n	401cbe <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401cfc:	4b1e      	ldr	r3, [pc, #120]	; (401d78 <xTaskResumeAll+0x100>)
  401cfe:	681b      	ldr	r3, [r3, #0]
  401d00:	b1db      	cbz	r3, 401d3a <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401d02:	4b1d      	ldr	r3, [pc, #116]	; (401d78 <xTaskResumeAll+0x100>)
  401d04:	681b      	ldr	r3, [r3, #0]
  401d06:	b1c3      	cbz	r3, 401d3a <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  401d08:	4e1c      	ldr	r6, [pc, #112]	; (401d7c <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  401d0a:	4d1d      	ldr	r5, [pc, #116]	; (401d80 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  401d0c:	4c1a      	ldr	r4, [pc, #104]	; (401d78 <xTaskResumeAll+0x100>)
  401d0e:	e00e      	b.n	401d2e <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  401d10:	2201      	movs	r2, #1
  401d12:	4b1b      	ldr	r3, [pc, #108]	; (401d80 <xTaskResumeAll+0x108>)
  401d14:	601a      	str	r2, [r3, #0]
  401d16:	e7ee      	b.n	401cf6 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401d18:	4f1a      	ldr	r7, [pc, #104]	; (401d84 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401d1a:	4e1b      	ldr	r6, [pc, #108]	; (401d88 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  401d1c:	4d1b      	ldr	r5, [pc, #108]	; (401d8c <xTaskResumeAll+0x114>)
  401d1e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 401d94 <xTaskResumeAll+0x11c>
  401d22:	e7e8      	b.n	401cf6 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  401d24:	6823      	ldr	r3, [r4, #0]
  401d26:	3b01      	subs	r3, #1
  401d28:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401d2a:	6823      	ldr	r3, [r4, #0]
  401d2c:	b12b      	cbz	r3, 401d3a <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  401d2e:	47b0      	blx	r6
  401d30:	2800      	cmp	r0, #0
  401d32:	d0f7      	beq.n	401d24 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  401d34:	2301      	movs	r3, #1
  401d36:	602b      	str	r3, [r5, #0]
  401d38:	e7f4      	b.n	401d24 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  401d3a:	4b11      	ldr	r3, [pc, #68]	; (401d80 <xTaskResumeAll+0x108>)
  401d3c:	681b      	ldr	r3, [r3, #0]
  401d3e:	2b01      	cmp	r3, #1
  401d40:	d10b      	bne.n	401d5a <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  401d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401d46:	4b12      	ldr	r3, [pc, #72]	; (401d90 <xTaskResumeAll+0x118>)
  401d48:	601a      	str	r2, [r3, #0]
  401d4a:	f3bf 8f4f 	dsb	sy
  401d4e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  401d52:	2401      	movs	r4, #1
  401d54:	e7ae      	b.n	401cb4 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  401d56:	2400      	movs	r4, #0
  401d58:	e7ac      	b.n	401cb4 <xTaskResumeAll+0x3c>
  401d5a:	2400      	movs	r4, #0
  401d5c:	e7aa      	b.n	401cb4 <xTaskResumeAll+0x3c>
  401d5e:	bf00      	nop
  401d60:	20400ac8 	.word	0x20400ac8
  401d64:	00400c31 	.word	0x00400c31
  401d68:	20400ac0 	.word	0x20400ac0
  401d6c:	00400c7d 	.word	0x00400c7d
  401d70:	00400b01 	.word	0x00400b01
  401d74:	20400a50 	.word	0x20400a50
  401d78:	20400ac4 	.word	0x20400ac4
  401d7c:	00401b2d 	.word	0x00401b2d
  401d80:	20400b4c 	.word	0x20400b4c
  401d84:	20400b08 	.word	0x20400b08
  401d88:	00400b4d 	.word	0x00400b4d
  401d8c:	20400ad4 	.word	0x20400ad4
  401d90:	e000ed04 	.word	0xe000ed04
  401d94:	20400a5c 	.word	0x20400a5c

00401d98 <vTaskDelay>:
	{
  401d98:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  401d9a:	2800      	cmp	r0, #0
  401d9c:	d029      	beq.n	401df2 <vTaskDelay+0x5a>
  401d9e:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  401da0:	4b18      	ldr	r3, [pc, #96]	; (401e04 <vTaskDelay+0x6c>)
  401da2:	681b      	ldr	r3, [r3, #0]
  401da4:	b153      	cbz	r3, 401dbc <vTaskDelay+0x24>
  401da6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401daa:	b672      	cpsid	i
  401dac:	f383 8811 	msr	BASEPRI, r3
  401db0:	f3bf 8f6f 	isb	sy
  401db4:	f3bf 8f4f 	dsb	sy
  401db8:	b662      	cpsie	i
  401dba:	e7fe      	b.n	401dba <vTaskDelay+0x22>
			vTaskSuspendAll();
  401dbc:	4b12      	ldr	r3, [pc, #72]	; (401e08 <vTaskDelay+0x70>)
  401dbe:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  401dc0:	4b12      	ldr	r3, [pc, #72]	; (401e0c <vTaskDelay+0x74>)
  401dc2:	681b      	ldr	r3, [r3, #0]
  401dc4:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401dc6:	4b12      	ldr	r3, [pc, #72]	; (401e10 <vTaskDelay+0x78>)
  401dc8:	6818      	ldr	r0, [r3, #0]
  401dca:	3004      	adds	r0, #4
  401dcc:	4b11      	ldr	r3, [pc, #68]	; (401e14 <vTaskDelay+0x7c>)
  401dce:	4798      	blx	r3
  401dd0:	b948      	cbnz	r0, 401de6 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401dd2:	4b0f      	ldr	r3, [pc, #60]	; (401e10 <vTaskDelay+0x78>)
  401dd4:	681a      	ldr	r2, [r3, #0]
  401dd6:	4910      	ldr	r1, [pc, #64]	; (401e18 <vTaskDelay+0x80>)
  401dd8:	680b      	ldr	r3, [r1, #0]
  401dda:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401ddc:	2201      	movs	r2, #1
  401dde:	4082      	lsls	r2, r0
  401de0:	ea23 0302 	bic.w	r3, r3, r2
  401de4:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401de6:	4620      	mov	r0, r4
  401de8:	4b0c      	ldr	r3, [pc, #48]	; (401e1c <vTaskDelay+0x84>)
  401dea:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  401dec:	4b0c      	ldr	r3, [pc, #48]	; (401e20 <vTaskDelay+0x88>)
  401dee:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  401df0:	b938      	cbnz	r0, 401e02 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  401df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401df6:	4b0b      	ldr	r3, [pc, #44]	; (401e24 <vTaskDelay+0x8c>)
  401df8:	601a      	str	r2, [r3, #0]
  401dfa:	f3bf 8f4f 	dsb	sy
  401dfe:	f3bf 8f6f 	isb	sy
  401e02:	bd10      	pop	{r4, pc}
  401e04:	20400ac8 	.word	0x20400ac8
  401e08:	00401b05 	.word	0x00401b05
  401e0c:	20400b48 	.word	0x20400b48
  401e10:	20400a50 	.word	0x20400a50
  401e14:	00400b4d 	.word	0x00400b4d
  401e18:	20400ad4 	.word	0x20400ad4
  401e1c:	004017ed 	.word	0x004017ed
  401e20:	00401c79 	.word	0x00401c79
  401e24:	e000ed04 	.word	0xe000ed04

00401e28 <prvIdleTask>:
{
  401e28:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  401e2a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 401eb4 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401e2e:	4e19      	ldr	r6, [pc, #100]	; (401e94 <prvIdleTask+0x6c>)
				taskYIELD();
  401e30:	f8df 9084 	ldr.w	r9, [pc, #132]	; 401eb8 <prvIdleTask+0x90>
  401e34:	e02a      	b.n	401e8c <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401e36:	4b18      	ldr	r3, [pc, #96]	; (401e98 <prvIdleTask+0x70>)
  401e38:	681b      	ldr	r3, [r3, #0]
  401e3a:	2b01      	cmp	r3, #1
  401e3c:	d81e      	bhi.n	401e7c <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401e3e:	682b      	ldr	r3, [r5, #0]
  401e40:	2b00      	cmp	r3, #0
  401e42:	d0f8      	beq.n	401e36 <prvIdleTask+0xe>
			vTaskSuspendAll();
  401e44:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401e46:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  401e48:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  401e4a:	2c00      	cmp	r4, #0
  401e4c:	d0f7      	beq.n	401e3e <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  401e4e:	4b13      	ldr	r3, [pc, #76]	; (401e9c <prvIdleTask+0x74>)
  401e50:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401e52:	68f3      	ldr	r3, [r6, #12]
  401e54:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401e56:	1d20      	adds	r0, r4, #4
  401e58:	4b11      	ldr	r3, [pc, #68]	; (401ea0 <prvIdleTask+0x78>)
  401e5a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401e5c:	4a11      	ldr	r2, [pc, #68]	; (401ea4 <prvIdleTask+0x7c>)
  401e5e:	6813      	ldr	r3, [r2, #0]
  401e60:	3b01      	subs	r3, #1
  401e62:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401e64:	682b      	ldr	r3, [r5, #0]
  401e66:	3b01      	subs	r3, #1
  401e68:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  401e6a:	4b0f      	ldr	r3, [pc, #60]	; (401ea8 <prvIdleTask+0x80>)
  401e6c:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  401e6e:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401e70:	f8df a048 	ldr.w	sl, [pc, #72]	; 401ebc <prvIdleTask+0x94>
  401e74:	47d0      	blx	sl
		vPortFree( pxTCB );
  401e76:	4620      	mov	r0, r4
  401e78:	47d0      	blx	sl
  401e7a:	e7e0      	b.n	401e3e <prvIdleTask+0x16>
				taskYIELD();
  401e7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401e80:	f8c9 3000 	str.w	r3, [r9]
  401e84:	f3bf 8f4f 	dsb	sy
  401e88:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401e8c:	4d07      	ldr	r5, [pc, #28]	; (401eac <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  401e8e:	4f08      	ldr	r7, [pc, #32]	; (401eb0 <prvIdleTask+0x88>)
  401e90:	e7d5      	b.n	401e3e <prvIdleTask+0x16>
  401e92:	bf00      	nop
  401e94:	20400b34 	.word	0x20400b34
  401e98:	20400a5c 	.word	0x20400a5c
  401e9c:	00400c31 	.word	0x00400c31
  401ea0:	00400b4d 	.word	0x00400b4d
  401ea4:	20400ac0 	.word	0x20400ac0
  401ea8:	00400c7d 	.word	0x00400c7d
  401eac:	20400ad0 	.word	0x20400ad0
  401eb0:	00401c79 	.word	0x00401c79
  401eb4:	00401b05 	.word	0x00401b05
  401eb8:	e000ed04 	.word	0xe000ed04
  401ebc:	00400ebd 	.word	0x00400ebd

00401ec0 <uxTaskGetSystemState>:
	{
  401ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401ec4:	4606      	mov	r6, r0
  401ec6:	460c      	mov	r4, r1
  401ec8:	4617      	mov	r7, r2
		vTaskSuspendAll();
  401eca:	4b1f      	ldr	r3, [pc, #124]	; (401f48 <uxTaskGetSystemState+0x88>)
  401ecc:	4798      	blx	r3
			if( uxArraySize >= uxCurrentNumberOfTasks )
  401ece:	4b1f      	ldr	r3, [pc, #124]	; (401f4c <uxTaskGetSystemState+0x8c>)
  401ed0:	681b      	ldr	r3, [r3, #0]
  401ed2:	42a3      	cmp	r3, r4
  401ed4:	d835      	bhi.n	401f42 <uxTaskGetSystemState+0x82>
  401ed6:	4b1e      	ldr	r3, [pc, #120]	; (401f50 <uxTaskGetSystemState+0x90>)
  401ed8:	f103 0550 	add.w	r5, r3, #80	; 0x50
  401edc:	f1a3 0814 	sub.w	r8, r3, #20
  401ee0:	2400      	movs	r4, #0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
  401ee2:	f04f 0a01 	mov.w	sl, #1
  401ee6:	f8df 9070 	ldr.w	r9, [pc, #112]	; 401f58 <uxTaskGetSystemState+0x98>
  401eea:	4652      	mov	r2, sl
  401eec:	4629      	mov	r1, r5
  401eee:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  401ef2:	47c8      	blx	r9
  401ef4:	4404      	add	r4, r0
  401ef6:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401ef8:	4545      	cmp	r5, r8
  401efa:	d1f6      	bne.n	401eea <uxTaskGetSystemState+0x2a>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
  401efc:	4b15      	ldr	r3, [pc, #84]	; (401f54 <uxTaskGetSystemState+0x94>)
  401efe:	6819      	ldr	r1, [r3, #0]
  401f00:	2202      	movs	r2, #2
  401f02:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  401f06:	4d14      	ldr	r5, [pc, #80]	; (401f58 <uxTaskGetSystemState+0x98>)
  401f08:	47a8      	blx	r5
  401f0a:	4404      	add	r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
  401f0c:	4b13      	ldr	r3, [pc, #76]	; (401f5c <uxTaskGetSystemState+0x9c>)
  401f0e:	6819      	ldr	r1, [r3, #0]
  401f10:	2202      	movs	r2, #2
  401f12:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  401f16:	47a8      	blx	r5
  401f18:	4404      	add	r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
  401f1a:	2204      	movs	r2, #4
  401f1c:	4910      	ldr	r1, [pc, #64]	; (401f60 <uxTaskGetSystemState+0xa0>)
  401f1e:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  401f22:	47a8      	blx	r5
  401f24:	4404      	add	r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
  401f26:	2203      	movs	r2, #3
  401f28:	490e      	ldr	r1, [pc, #56]	; (401f64 <uxTaskGetSystemState+0xa4>)
  401f2a:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  401f2e:	47a8      	blx	r5
  401f30:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
  401f32:	b10f      	cbz	r7, 401f38 <uxTaskGetSystemState+0x78>
						*pulTotalRunTime = 0;
  401f34:	2300      	movs	r3, #0
  401f36:	603b      	str	r3, [r7, #0]
		( void ) xTaskResumeAll();
  401f38:	4b0b      	ldr	r3, [pc, #44]	; (401f68 <uxTaskGetSystemState+0xa8>)
  401f3a:	4798      	blx	r3
	}
  401f3c:	4620      	mov	r0, r4
  401f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
  401f42:	2400      	movs	r4, #0
  401f44:	e7f8      	b.n	401f38 <uxTaskGetSystemState+0x78>
  401f46:	bf00      	nop
  401f48:	00401b05 	.word	0x00401b05
  401f4c:	20400ac0 	.word	0x20400ac0
  401f50:	20400a5c 	.word	0x20400a5c
  401f54:	20400a54 	.word	0x20400a54
  401f58:	0040170d 	.word	0x0040170d
  401f5c:	20400a58 	.word	0x20400a58
  401f60:	20400b34 	.word	0x20400b34
  401f64:	20400b20 	.word	0x20400b20
  401f68:	00401c79 	.word	0x00401c79

00401f6c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401f6c:	4b2d      	ldr	r3, [pc, #180]	; (402024 <vTaskSwitchContext+0xb8>)
  401f6e:	681b      	ldr	r3, [r3, #0]
  401f70:	2b00      	cmp	r3, #0
  401f72:	d12c      	bne.n	401fce <vTaskSwitchContext+0x62>
{
  401f74:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  401f76:	2200      	movs	r2, #0
  401f78:	4b2b      	ldr	r3, [pc, #172]	; (402028 <vTaskSwitchContext+0xbc>)
  401f7a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  401f7c:	4b2b      	ldr	r3, [pc, #172]	; (40202c <vTaskSwitchContext+0xc0>)
  401f7e:	681b      	ldr	r3, [r3, #0]
  401f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f82:	681a      	ldr	r2, [r3, #0]
  401f84:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401f88:	d103      	bne.n	401f92 <vTaskSwitchContext+0x26>
  401f8a:	685a      	ldr	r2, [r3, #4]
  401f8c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401f90:	d021      	beq.n	401fd6 <vTaskSwitchContext+0x6a>
  401f92:	4b26      	ldr	r3, [pc, #152]	; (40202c <vTaskSwitchContext+0xc0>)
  401f94:	6818      	ldr	r0, [r3, #0]
  401f96:	6819      	ldr	r1, [r3, #0]
  401f98:	3134      	adds	r1, #52	; 0x34
  401f9a:	4b25      	ldr	r3, [pc, #148]	; (402030 <vTaskSwitchContext+0xc4>)
  401f9c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401f9e:	4b25      	ldr	r3, [pc, #148]	; (402034 <vTaskSwitchContext+0xc8>)
  401fa0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401fa2:	fab3 f383 	clz	r3, r3
  401fa6:	b2db      	uxtb	r3, r3
  401fa8:	f1c3 031f 	rsb	r3, r3, #31
  401fac:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401fb0:	4a21      	ldr	r2, [pc, #132]	; (402038 <vTaskSwitchContext+0xcc>)
  401fb2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401fb6:	b9ba      	cbnz	r2, 401fe8 <vTaskSwitchContext+0x7c>
	__asm volatile
  401fb8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fbc:	b672      	cpsid	i
  401fbe:	f383 8811 	msr	BASEPRI, r3
  401fc2:	f3bf 8f6f 	isb	sy
  401fc6:	f3bf 8f4f 	dsb	sy
  401fca:	b662      	cpsie	i
  401fcc:	e7fe      	b.n	401fcc <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  401fce:	2201      	movs	r2, #1
  401fd0:	4b15      	ldr	r3, [pc, #84]	; (402028 <vTaskSwitchContext+0xbc>)
  401fd2:	601a      	str	r2, [r3, #0]
  401fd4:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  401fd6:	689a      	ldr	r2, [r3, #8]
  401fd8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401fdc:	d1d9      	bne.n	401f92 <vTaskSwitchContext+0x26>
  401fde:	68db      	ldr	r3, [r3, #12]
  401fe0:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  401fe4:	d1d5      	bne.n	401f92 <vTaskSwitchContext+0x26>
  401fe6:	e7da      	b.n	401f9e <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401fe8:	4a13      	ldr	r2, [pc, #76]	; (402038 <vTaskSwitchContext+0xcc>)
  401fea:	0099      	lsls	r1, r3, #2
  401fec:	18c8      	adds	r0, r1, r3
  401fee:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401ff2:	6844      	ldr	r4, [r0, #4]
  401ff4:	6864      	ldr	r4, [r4, #4]
  401ff6:	6044      	str	r4, [r0, #4]
  401ff8:	4419      	add	r1, r3
  401ffa:	4602      	mov	r2, r0
  401ffc:	3208      	adds	r2, #8
  401ffe:	4294      	cmp	r4, r2
  402000:	d009      	beq.n	402016 <vTaskSwitchContext+0xaa>
  402002:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402006:	4a0c      	ldr	r2, [pc, #48]	; (402038 <vTaskSwitchContext+0xcc>)
  402008:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40200c:	685b      	ldr	r3, [r3, #4]
  40200e:	68da      	ldr	r2, [r3, #12]
  402010:	4b06      	ldr	r3, [pc, #24]	; (40202c <vTaskSwitchContext+0xc0>)
  402012:	601a      	str	r2, [r3, #0]
  402014:	bd10      	pop	{r4, pc}
  402016:	6860      	ldr	r0, [r4, #4]
  402018:	4a07      	ldr	r2, [pc, #28]	; (402038 <vTaskSwitchContext+0xcc>)
  40201a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  40201e:	6050      	str	r0, [r2, #4]
  402020:	e7ef      	b.n	402002 <vTaskSwitchContext+0x96>
  402022:	bf00      	nop
  402024:	20400ac8 	.word	0x20400ac8
  402028:	20400b4c 	.word	0x20400b4c
  40202c:	20400a50 	.word	0x20400a50
  402030:	00402c2d 	.word	0x00402c2d
  402034:	20400ad4 	.word	0x20400ad4
  402038:	20400a5c 	.word	0x20400a5c

0040203c <vTaskPlaceOnEventList>:
{
  40203c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  40203e:	b1e0      	cbz	r0, 40207a <vTaskPlaceOnEventList+0x3e>
  402040:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402042:	4d17      	ldr	r5, [pc, #92]	; (4020a0 <vTaskPlaceOnEventList+0x64>)
  402044:	6829      	ldr	r1, [r5, #0]
  402046:	3118      	adds	r1, #24
  402048:	4b16      	ldr	r3, [pc, #88]	; (4020a4 <vTaskPlaceOnEventList+0x68>)
  40204a:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40204c:	6828      	ldr	r0, [r5, #0]
  40204e:	3004      	adds	r0, #4
  402050:	4b15      	ldr	r3, [pc, #84]	; (4020a8 <vTaskPlaceOnEventList+0x6c>)
  402052:	4798      	blx	r3
  402054:	b940      	cbnz	r0, 402068 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402056:	682a      	ldr	r2, [r5, #0]
  402058:	4914      	ldr	r1, [pc, #80]	; (4020ac <vTaskPlaceOnEventList+0x70>)
  40205a:	680b      	ldr	r3, [r1, #0]
  40205c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40205e:	2201      	movs	r2, #1
  402060:	4082      	lsls	r2, r0
  402062:	ea23 0302 	bic.w	r3, r3, r2
  402066:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402068:	f1b4 3fff 	cmp.w	r4, #4294967295
  40206c:	d010      	beq.n	402090 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  40206e:	4b10      	ldr	r3, [pc, #64]	; (4020b0 <vTaskPlaceOnEventList+0x74>)
  402070:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402072:	4420      	add	r0, r4
  402074:	4b0f      	ldr	r3, [pc, #60]	; (4020b4 <vTaskPlaceOnEventList+0x78>)
  402076:	4798      	blx	r3
  402078:	bd38      	pop	{r3, r4, r5, pc}
  40207a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40207e:	b672      	cpsid	i
  402080:	f383 8811 	msr	BASEPRI, r3
  402084:	f3bf 8f6f 	isb	sy
  402088:	f3bf 8f4f 	dsb	sy
  40208c:	b662      	cpsie	i
  40208e:	e7fe      	b.n	40208e <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402090:	4b03      	ldr	r3, [pc, #12]	; (4020a0 <vTaskPlaceOnEventList+0x64>)
  402092:	6819      	ldr	r1, [r3, #0]
  402094:	3104      	adds	r1, #4
  402096:	4808      	ldr	r0, [pc, #32]	; (4020b8 <vTaskPlaceOnEventList+0x7c>)
  402098:	4b08      	ldr	r3, [pc, #32]	; (4020bc <vTaskPlaceOnEventList+0x80>)
  40209a:	4798      	blx	r3
  40209c:	bd38      	pop	{r3, r4, r5, pc}
  40209e:	bf00      	nop
  4020a0:	20400a50 	.word	0x20400a50
  4020a4:	00400b19 	.word	0x00400b19
  4020a8:	00400b4d 	.word	0x00400b4d
  4020ac:	20400ad4 	.word	0x20400ad4
  4020b0:	20400b48 	.word	0x20400b48
  4020b4:	004017ed 	.word	0x004017ed
  4020b8:	20400b20 	.word	0x20400b20
  4020bc:	00400b01 	.word	0x00400b01

004020c0 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  4020c0:	b1e8      	cbz	r0, 4020fe <vTaskPlaceOnEventListRestricted+0x3e>
	{
  4020c2:	b570      	push	{r4, r5, r6, lr}
  4020c4:	4615      	mov	r5, r2
  4020c6:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4020c8:	4e16      	ldr	r6, [pc, #88]	; (402124 <vTaskPlaceOnEventListRestricted+0x64>)
  4020ca:	6831      	ldr	r1, [r6, #0]
  4020cc:	3118      	adds	r1, #24
  4020ce:	4b16      	ldr	r3, [pc, #88]	; (402128 <vTaskPlaceOnEventListRestricted+0x68>)
  4020d0:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4020d2:	6830      	ldr	r0, [r6, #0]
  4020d4:	3004      	adds	r0, #4
  4020d6:	4b15      	ldr	r3, [pc, #84]	; (40212c <vTaskPlaceOnEventListRestricted+0x6c>)
  4020d8:	4798      	blx	r3
  4020da:	b940      	cbnz	r0, 4020ee <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4020dc:	6832      	ldr	r2, [r6, #0]
  4020de:	4914      	ldr	r1, [pc, #80]	; (402130 <vTaskPlaceOnEventListRestricted+0x70>)
  4020e0:	680b      	ldr	r3, [r1, #0]
  4020e2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4020e4:	2201      	movs	r2, #1
  4020e6:	4082      	lsls	r2, r0
  4020e8:	ea23 0302 	bic.w	r3, r3, r2
  4020ec:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  4020ee:	2d01      	cmp	r5, #1
  4020f0:	d010      	beq.n	402114 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  4020f2:	4b10      	ldr	r3, [pc, #64]	; (402134 <vTaskPlaceOnEventListRestricted+0x74>)
  4020f4:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4020f6:	4420      	add	r0, r4
  4020f8:	4b0f      	ldr	r3, [pc, #60]	; (402138 <vTaskPlaceOnEventListRestricted+0x78>)
  4020fa:	4798      	blx	r3
  4020fc:	bd70      	pop	{r4, r5, r6, pc}
  4020fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  402102:	b672      	cpsid	i
  402104:	f383 8811 	msr	BASEPRI, r3
  402108:	f3bf 8f6f 	isb	sy
  40210c:	f3bf 8f4f 	dsb	sy
  402110:	b662      	cpsie	i
  402112:	e7fe      	b.n	402112 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402114:	4b03      	ldr	r3, [pc, #12]	; (402124 <vTaskPlaceOnEventListRestricted+0x64>)
  402116:	6819      	ldr	r1, [r3, #0]
  402118:	3104      	adds	r1, #4
  40211a:	4808      	ldr	r0, [pc, #32]	; (40213c <vTaskPlaceOnEventListRestricted+0x7c>)
  40211c:	4b02      	ldr	r3, [pc, #8]	; (402128 <vTaskPlaceOnEventListRestricted+0x68>)
  40211e:	4798      	blx	r3
  402120:	bd70      	pop	{r4, r5, r6, pc}
  402122:	bf00      	nop
  402124:	20400a50 	.word	0x20400a50
  402128:	00400b01 	.word	0x00400b01
  40212c:	00400b4d 	.word	0x00400b4d
  402130:	20400ad4 	.word	0x20400ad4
  402134:	20400b48 	.word	0x20400b48
  402138:	004017ed 	.word	0x004017ed
  40213c:	20400b20 	.word	0x20400b20

00402140 <xTaskRemoveFromEventList>:
{
  402140:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402142:	68c3      	ldr	r3, [r0, #12]
  402144:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402146:	b324      	cbz	r4, 402192 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402148:	f104 0518 	add.w	r5, r4, #24
  40214c:	4628      	mov	r0, r5
  40214e:	4b1a      	ldr	r3, [pc, #104]	; (4021b8 <xTaskRemoveFromEventList+0x78>)
  402150:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402152:	4b1a      	ldr	r3, [pc, #104]	; (4021bc <xTaskRemoveFromEventList+0x7c>)
  402154:	681b      	ldr	r3, [r3, #0]
  402156:	bb3b      	cbnz	r3, 4021a8 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402158:	1d25      	adds	r5, r4, #4
  40215a:	4628      	mov	r0, r5
  40215c:	4b16      	ldr	r3, [pc, #88]	; (4021b8 <xTaskRemoveFromEventList+0x78>)
  40215e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402160:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402162:	4a17      	ldr	r2, [pc, #92]	; (4021c0 <xTaskRemoveFromEventList+0x80>)
  402164:	6811      	ldr	r1, [r2, #0]
  402166:	2301      	movs	r3, #1
  402168:	4083      	lsls	r3, r0
  40216a:	430b      	orrs	r3, r1
  40216c:	6013      	str	r3, [r2, #0]
  40216e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402172:	4629      	mov	r1, r5
  402174:	4b13      	ldr	r3, [pc, #76]	; (4021c4 <xTaskRemoveFromEventList+0x84>)
  402176:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40217a:	4b13      	ldr	r3, [pc, #76]	; (4021c8 <xTaskRemoveFromEventList+0x88>)
  40217c:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  40217e:	4b13      	ldr	r3, [pc, #76]	; (4021cc <xTaskRemoveFromEventList+0x8c>)
  402180:	681b      	ldr	r3, [r3, #0]
  402182:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402186:	429a      	cmp	r2, r3
  402188:	d913      	bls.n	4021b2 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  40218a:	2001      	movs	r0, #1
  40218c:	4b10      	ldr	r3, [pc, #64]	; (4021d0 <xTaskRemoveFromEventList+0x90>)
  40218e:	6018      	str	r0, [r3, #0]
  402190:	bd38      	pop	{r3, r4, r5, pc}
  402192:	f04f 0380 	mov.w	r3, #128	; 0x80
  402196:	b672      	cpsid	i
  402198:	f383 8811 	msr	BASEPRI, r3
  40219c:	f3bf 8f6f 	isb	sy
  4021a0:	f3bf 8f4f 	dsb	sy
  4021a4:	b662      	cpsie	i
  4021a6:	e7fe      	b.n	4021a6 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4021a8:	4629      	mov	r1, r5
  4021aa:	480a      	ldr	r0, [pc, #40]	; (4021d4 <xTaskRemoveFromEventList+0x94>)
  4021ac:	4b06      	ldr	r3, [pc, #24]	; (4021c8 <xTaskRemoveFromEventList+0x88>)
  4021ae:	4798      	blx	r3
  4021b0:	e7e5      	b.n	40217e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  4021b2:	2000      	movs	r0, #0
}
  4021b4:	bd38      	pop	{r3, r4, r5, pc}
  4021b6:	bf00      	nop
  4021b8:	00400b4d 	.word	0x00400b4d
  4021bc:	20400ac8 	.word	0x20400ac8
  4021c0:	20400ad4 	.word	0x20400ad4
  4021c4:	20400a5c 	.word	0x20400a5c
  4021c8:	00400b01 	.word	0x00400b01
  4021cc:	20400a50 	.word	0x20400a50
  4021d0:	20400b4c 	.word	0x20400b4c
  4021d4:	20400b08 	.word	0x20400b08

004021d8 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  4021d8:	b130      	cbz	r0, 4021e8 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4021da:	4a09      	ldr	r2, [pc, #36]	; (402200 <vTaskSetTimeOutState+0x28>)
  4021dc:	6812      	ldr	r2, [r2, #0]
  4021de:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4021e0:	4a08      	ldr	r2, [pc, #32]	; (402204 <vTaskSetTimeOutState+0x2c>)
  4021e2:	6812      	ldr	r2, [r2, #0]
  4021e4:	6042      	str	r2, [r0, #4]
  4021e6:	4770      	bx	lr
  4021e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021ec:	b672      	cpsid	i
  4021ee:	f383 8811 	msr	BASEPRI, r3
  4021f2:	f3bf 8f6f 	isb	sy
  4021f6:	f3bf 8f4f 	dsb	sy
  4021fa:	b662      	cpsie	i
  4021fc:	e7fe      	b.n	4021fc <vTaskSetTimeOutState+0x24>
  4021fe:	bf00      	nop
  402200:	20400b04 	.word	0x20400b04
  402204:	20400b48 	.word	0x20400b48

00402208 <xTaskCheckForTimeOut>:
{
  402208:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  40220a:	b1c0      	cbz	r0, 40223e <xTaskCheckForTimeOut+0x36>
  40220c:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  40220e:	b309      	cbz	r1, 402254 <xTaskCheckForTimeOut+0x4c>
  402210:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402212:	4b1d      	ldr	r3, [pc, #116]	; (402288 <xTaskCheckForTimeOut+0x80>)
  402214:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402216:	4b1d      	ldr	r3, [pc, #116]	; (40228c <xTaskCheckForTimeOut+0x84>)
  402218:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  40221a:	682b      	ldr	r3, [r5, #0]
  40221c:	f1b3 3fff 	cmp.w	r3, #4294967295
  402220:	d02e      	beq.n	402280 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402222:	491b      	ldr	r1, [pc, #108]	; (402290 <xTaskCheckForTimeOut+0x88>)
  402224:	6809      	ldr	r1, [r1, #0]
  402226:	6820      	ldr	r0, [r4, #0]
  402228:	4288      	cmp	r0, r1
  40222a:	d002      	beq.n	402232 <xTaskCheckForTimeOut+0x2a>
  40222c:	6861      	ldr	r1, [r4, #4]
  40222e:	428a      	cmp	r2, r1
  402230:	d228      	bcs.n	402284 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402232:	6861      	ldr	r1, [r4, #4]
  402234:	1a50      	subs	r0, r2, r1
  402236:	4283      	cmp	r3, r0
  402238:	d817      	bhi.n	40226a <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  40223a:	2401      	movs	r4, #1
  40223c:	e01c      	b.n	402278 <xTaskCheckForTimeOut+0x70>
  40223e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402242:	b672      	cpsid	i
  402244:	f383 8811 	msr	BASEPRI, r3
  402248:	f3bf 8f6f 	isb	sy
  40224c:	f3bf 8f4f 	dsb	sy
  402250:	b662      	cpsie	i
  402252:	e7fe      	b.n	402252 <xTaskCheckForTimeOut+0x4a>
  402254:	f04f 0380 	mov.w	r3, #128	; 0x80
  402258:	b672      	cpsid	i
  40225a:	f383 8811 	msr	BASEPRI, r3
  40225e:	f3bf 8f6f 	isb	sy
  402262:	f3bf 8f4f 	dsb	sy
  402266:	b662      	cpsie	i
  402268:	e7fe      	b.n	402268 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40226a:	1a9b      	subs	r3, r3, r2
  40226c:	440b      	add	r3, r1
  40226e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402270:	4620      	mov	r0, r4
  402272:	4b08      	ldr	r3, [pc, #32]	; (402294 <xTaskCheckForTimeOut+0x8c>)
  402274:	4798      	blx	r3
			xReturn = pdFALSE;
  402276:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402278:	4b07      	ldr	r3, [pc, #28]	; (402298 <xTaskCheckForTimeOut+0x90>)
  40227a:	4798      	blx	r3
}
  40227c:	4620      	mov	r0, r4
  40227e:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  402280:	2400      	movs	r4, #0
  402282:	e7f9      	b.n	402278 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  402284:	2401      	movs	r4, #1
  402286:	e7f7      	b.n	402278 <xTaskCheckForTimeOut+0x70>
  402288:	00400c31 	.word	0x00400c31
  40228c:	20400b48 	.word	0x20400b48
  402290:	20400b04 	.word	0x20400b04
  402294:	004021d9 	.word	0x004021d9
  402298:	00400c7d 	.word	0x00400c7d

0040229c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  40229c:	2201      	movs	r2, #1
  40229e:	4b01      	ldr	r3, [pc, #4]	; (4022a4 <vTaskMissedYield+0x8>)
  4022a0:	601a      	str	r2, [r3, #0]
  4022a2:	4770      	bx	lr
  4022a4:	20400b4c 	.word	0x20400b4c

004022a8 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4022a8:	4b05      	ldr	r3, [pc, #20]	; (4022c0 <xTaskGetSchedulerState+0x18>)
  4022aa:	681b      	ldr	r3, [r3, #0]
  4022ac:	b133      	cbz	r3, 4022bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4022ae:	4b05      	ldr	r3, [pc, #20]	; (4022c4 <xTaskGetSchedulerState+0x1c>)
  4022b0:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4022b2:	2b00      	cmp	r3, #0
  4022b4:	bf0c      	ite	eq
  4022b6:	2002      	moveq	r0, #2
  4022b8:	2000      	movne	r0, #0
  4022ba:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4022bc:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4022be:	4770      	bx	lr
  4022c0:	20400b1c 	.word	0x20400b1c
  4022c4:	20400ac8 	.word	0x20400ac8

004022c8 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4022c8:	2800      	cmp	r0, #0
  4022ca:	d044      	beq.n	402356 <vTaskPriorityInherit+0x8e>
	{
  4022cc:	b538      	push	{r3, r4, r5, lr}
  4022ce:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4022d0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4022d2:	4921      	ldr	r1, [pc, #132]	; (402358 <vTaskPriorityInherit+0x90>)
  4022d4:	6809      	ldr	r1, [r1, #0]
  4022d6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4022d8:	428a      	cmp	r2, r1
  4022da:	d214      	bcs.n	402306 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4022dc:	6981      	ldr	r1, [r0, #24]
  4022de:	2900      	cmp	r1, #0
  4022e0:	db05      	blt.n	4022ee <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4022e2:	491d      	ldr	r1, [pc, #116]	; (402358 <vTaskPriorityInherit+0x90>)
  4022e4:	6809      	ldr	r1, [r1, #0]
  4022e6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4022e8:	f1c1 0105 	rsb	r1, r1, #5
  4022ec:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4022ee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4022f2:	491a      	ldr	r1, [pc, #104]	; (40235c <vTaskPriorityInherit+0x94>)
  4022f4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4022f8:	6961      	ldr	r1, [r4, #20]
  4022fa:	4291      	cmp	r1, r2
  4022fc:	d004      	beq.n	402308 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4022fe:	4a16      	ldr	r2, [pc, #88]	; (402358 <vTaskPriorityInherit+0x90>)
  402300:	6812      	ldr	r2, [r2, #0]
  402302:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402304:	62e2      	str	r2, [r4, #44]	; 0x2c
  402306:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402308:	1d25      	adds	r5, r4, #4
  40230a:	4628      	mov	r0, r5
  40230c:	4b14      	ldr	r3, [pc, #80]	; (402360 <vTaskPriorityInherit+0x98>)
  40230e:	4798      	blx	r3
  402310:	b970      	cbnz	r0, 402330 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402312:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402314:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402318:	4a10      	ldr	r2, [pc, #64]	; (40235c <vTaskPriorityInherit+0x94>)
  40231a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40231e:	b93a      	cbnz	r2, 402330 <vTaskPriorityInherit+0x68>
  402320:	4810      	ldr	r0, [pc, #64]	; (402364 <vTaskPriorityInherit+0x9c>)
  402322:	6802      	ldr	r2, [r0, #0]
  402324:	2101      	movs	r1, #1
  402326:	fa01 f303 	lsl.w	r3, r1, r3
  40232a:	ea22 0303 	bic.w	r3, r2, r3
  40232e:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402330:	4b09      	ldr	r3, [pc, #36]	; (402358 <vTaskPriorityInherit+0x90>)
  402332:	681b      	ldr	r3, [r3, #0]
  402334:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402336:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402338:	4a0a      	ldr	r2, [pc, #40]	; (402364 <vTaskPriorityInherit+0x9c>)
  40233a:	6811      	ldr	r1, [r2, #0]
  40233c:	2301      	movs	r3, #1
  40233e:	4083      	lsls	r3, r0
  402340:	430b      	orrs	r3, r1
  402342:	6013      	str	r3, [r2, #0]
  402344:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402348:	4629      	mov	r1, r5
  40234a:	4b04      	ldr	r3, [pc, #16]	; (40235c <vTaskPriorityInherit+0x94>)
  40234c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402350:	4b05      	ldr	r3, [pc, #20]	; (402368 <vTaskPriorityInherit+0xa0>)
  402352:	4798      	blx	r3
  402354:	bd38      	pop	{r3, r4, r5, pc}
  402356:	4770      	bx	lr
  402358:	20400a50 	.word	0x20400a50
  40235c:	20400a5c 	.word	0x20400a5c
  402360:	00400b4d 	.word	0x00400b4d
  402364:	20400ad4 	.word	0x20400ad4
  402368:	00400b01 	.word	0x00400b01

0040236c <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  40236c:	2800      	cmp	r0, #0
  40236e:	d04d      	beq.n	40240c <xTaskPriorityDisinherit+0xa0>
	{
  402370:	b538      	push	{r3, r4, r5, lr}
  402372:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402374:	4a27      	ldr	r2, [pc, #156]	; (402414 <xTaskPriorityDisinherit+0xa8>)
  402376:	6812      	ldr	r2, [r2, #0]
  402378:	4290      	cmp	r0, r2
  40237a:	d00a      	beq.n	402392 <xTaskPriorityDisinherit+0x26>
  40237c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402380:	b672      	cpsid	i
  402382:	f383 8811 	msr	BASEPRI, r3
  402386:	f3bf 8f6f 	isb	sy
  40238a:	f3bf 8f4f 	dsb	sy
  40238e:	b662      	cpsie	i
  402390:	e7fe      	b.n	402390 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  402392:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402394:	b952      	cbnz	r2, 4023ac <xTaskPriorityDisinherit+0x40>
  402396:	f04f 0380 	mov.w	r3, #128	; 0x80
  40239a:	b672      	cpsid	i
  40239c:	f383 8811 	msr	BASEPRI, r3
  4023a0:	f3bf 8f6f 	isb	sy
  4023a4:	f3bf 8f4f 	dsb	sy
  4023a8:	b662      	cpsie	i
  4023aa:	e7fe      	b.n	4023aa <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  4023ac:	3a01      	subs	r2, #1
  4023ae:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4023b0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4023b2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4023b4:	4288      	cmp	r0, r1
  4023b6:	d02b      	beq.n	402410 <xTaskPriorityDisinherit+0xa4>
  4023b8:	bb52      	cbnz	r2, 402410 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4023ba:	1d25      	adds	r5, r4, #4
  4023bc:	4628      	mov	r0, r5
  4023be:	4b16      	ldr	r3, [pc, #88]	; (402418 <xTaskPriorityDisinherit+0xac>)
  4023c0:	4798      	blx	r3
  4023c2:	b968      	cbnz	r0, 4023e0 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4023c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4023c6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4023ca:	4b14      	ldr	r3, [pc, #80]	; (40241c <xTaskPriorityDisinherit+0xb0>)
  4023cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4023d0:	b933      	cbnz	r3, 4023e0 <xTaskPriorityDisinherit+0x74>
  4023d2:	4813      	ldr	r0, [pc, #76]	; (402420 <xTaskPriorityDisinherit+0xb4>)
  4023d4:	6803      	ldr	r3, [r0, #0]
  4023d6:	2201      	movs	r2, #1
  4023d8:	408a      	lsls	r2, r1
  4023da:	ea23 0302 	bic.w	r3, r3, r2
  4023de:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4023e0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4023e2:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4023e4:	f1c0 0305 	rsb	r3, r0, #5
  4023e8:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4023ea:	4a0d      	ldr	r2, [pc, #52]	; (402420 <xTaskPriorityDisinherit+0xb4>)
  4023ec:	6811      	ldr	r1, [r2, #0]
  4023ee:	2401      	movs	r4, #1
  4023f0:	fa04 f300 	lsl.w	r3, r4, r0
  4023f4:	430b      	orrs	r3, r1
  4023f6:	6013      	str	r3, [r2, #0]
  4023f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4023fc:	4629      	mov	r1, r5
  4023fe:	4b07      	ldr	r3, [pc, #28]	; (40241c <xTaskPriorityDisinherit+0xb0>)
  402400:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402404:	4b07      	ldr	r3, [pc, #28]	; (402424 <xTaskPriorityDisinherit+0xb8>)
  402406:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402408:	4620      	mov	r0, r4
  40240a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  40240c:	2000      	movs	r0, #0
  40240e:	4770      	bx	lr
  402410:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402412:	bd38      	pop	{r3, r4, r5, pc}
  402414:	20400a50 	.word	0x20400a50
  402418:	00400b4d 	.word	0x00400b4d
  40241c:	20400a5c 	.word	0x20400a5c
  402420:	20400ad4 	.word	0x20400ad4
  402424:	00400b01 	.word	0x00400b01

00402428 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
  402428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40242c:	b084      	sub	sp, #16
  40242e:	4604      	mov	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
  402430:	2300      	movs	r3, #0
  402432:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
  402434:	4b38      	ldr	r3, [pc, #224]	; (402518 <vTaskList+0xf0>)
  402436:	681a      	ldr	r2, [r3, #0]
  402438:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
  40243a:	6818      	ldr	r0, [r3, #0]
  40243c:	0140      	lsls	r0, r0, #5
  40243e:	4b37      	ldr	r3, [pc, #220]	; (40251c <vTaskList+0xf4>)
  402440:	4798      	blx	r3

		if( pxTaskStatusArray != NULL )
  402442:	2800      	cmp	r0, #0
  402444:	d065      	beq.n	402512 <vTaskList+0xea>
  402446:	4605      	mov	r5, r0
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
  402448:	9903      	ldr	r1, [sp, #12]
  40244a:	2200      	movs	r2, #0
  40244c:	4b34      	ldr	r3, [pc, #208]	; (402520 <vTaskList+0xf8>)
  40244e:	4798      	blx	r3
  402450:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
  402452:	2300      	movs	r3, #0
  402454:	9302      	str	r3, [sp, #8]
  402456:	9a02      	ldr	r2, [sp, #8]
  402458:	9b03      	ldr	r3, [sp, #12]
  40245a:	429a      	cmp	r2, r3
  40245c:	d256      	bcs.n	40250c <vTaskList+0xe4>
					case eDeleted:		cStatus = tskDELETED_CHAR;
										break;

					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = 0x00;
  40245e:	f04f 0800 	mov.w	r8, #0
		strcpy( pcBuffer, pcTaskName );
  402462:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 402534 <vTaskList+0x10c>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  402466:	4e2f      	ldr	r6, [pc, #188]	; (402524 <vTaskList+0xfc>)
  402468:	e03d      	b.n	4024e6 <vTaskList+0xbe>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
  40246a:	2742      	movs	r7, #66	; 0x42
  40246c:	e006      	b.n	40247c <vTaskList+0x54>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
  40246e:	2753      	movs	r7, #83	; 0x53
										break;
  402470:	e004      	b.n	40247c <vTaskList+0x54>
					case eDeleted:		cStatus = tskDELETED_CHAR;
  402472:	2744      	movs	r7, #68	; 0x44
										break;
  402474:	e002      	b.n	40247c <vTaskList+0x54>
										cStatus = 0x00;
  402476:	4647      	mov	r7, r8
										break;
  402478:	e000      	b.n	40247c <vTaskList+0x54>
					case eReady:		cStatus = tskREADY_CHAR;
  40247a:	2752      	movs	r7, #82	; 0x52
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
  40247c:	9b02      	ldr	r3, [sp, #8]
  40247e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
		strcpy( pcBuffer, pcTaskName );
  402482:	6859      	ldr	r1, [r3, #4]
  402484:	4620      	mov	r0, r4
  402486:	47c8      	blx	r9
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  402488:	4620      	mov	r0, r4
  40248a:	47b0      	blx	r6
  40248c:	2808      	cmp	r0, #8
  40248e:	d808      	bhi.n	4024a2 <vTaskList+0x7a>
  402490:	4420      	add	r0, r4
  402492:	f104 0209 	add.w	r2, r4, #9
			pcBuffer[ x ] = ' ';
  402496:	2320      	movs	r3, #32
  402498:	f800 3b01 	strb.w	r3, [r0], #1
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  40249c:	4282      	cmp	r2, r0
  40249e:	d1fb      	bne.n	402498 <vTaskList+0x70>
  4024a0:	2009      	movs	r0, #9
		pcBuffer[ x ] = 0x00;
  4024a2:	eb04 0a00 	add.w	sl, r4, r0
  4024a6:	f804 8000 	strb.w	r8, [r4, r0]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
  4024aa:	9b02      	ldr	r3, [sp, #8]
  4024ac:	9a02      	ldr	r2, [sp, #8]
  4024ae:	9902      	ldr	r1, [sp, #8]
  4024b0:	eb05 1343 	add.w	r3, r5, r3, lsl #5
  4024b4:	691b      	ldr	r3, [r3, #16]
  4024b6:	eb05 1141 	add.w	r1, r5, r1, lsl #5
  4024ba:	6889      	ldr	r1, [r1, #8]
  4024bc:	9101      	str	r1, [sp, #4]
  4024be:	eb05 1242 	add.w	r2, r5, r2, lsl #5
  4024c2:	8b92      	ldrh	r2, [r2, #28]
  4024c4:	9200      	str	r2, [sp, #0]
  4024c6:	463a      	mov	r2, r7
  4024c8:	4917      	ldr	r1, [pc, #92]	; (402528 <vTaskList+0x100>)
  4024ca:	4650      	mov	r0, sl
  4024cc:	4c17      	ldr	r4, [pc, #92]	; (40252c <vTaskList+0x104>)
  4024ce:	47a0      	blx	r4
				pcWriteBuffer += strlen( pcWriteBuffer );
  4024d0:	4650      	mov	r0, sl
  4024d2:	47b0      	blx	r6
  4024d4:	eb0a 0400 	add.w	r4, sl, r0
			for( x = 0; x < uxArraySize; x++ )
  4024d8:	9b02      	ldr	r3, [sp, #8]
  4024da:	3301      	adds	r3, #1
  4024dc:	9302      	str	r3, [sp, #8]
  4024de:	9a02      	ldr	r2, [sp, #8]
  4024e0:	9b03      	ldr	r3, [sp, #12]
  4024e2:	429a      	cmp	r2, r3
  4024e4:	d212      	bcs.n	40250c <vTaskList+0xe4>
				switch( pxTaskStatusArray[ x ].eCurrentState )
  4024e6:	9b02      	ldr	r3, [sp, #8]
  4024e8:	eb05 1343 	add.w	r3, r5, r3, lsl #5
  4024ec:	7b1b      	ldrb	r3, [r3, #12]
  4024ee:	3b01      	subs	r3, #1
  4024f0:	2b03      	cmp	r3, #3
  4024f2:	d8c0      	bhi.n	402476 <vTaskList+0x4e>
  4024f4:	a201      	add	r2, pc, #4	; (adr r2, 4024fc <vTaskList+0xd4>)
  4024f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4024fa:	bf00      	nop
  4024fc:	0040247b 	.word	0x0040247b
  402500:	0040246b 	.word	0x0040246b
  402504:	0040246f 	.word	0x0040246f
  402508:	00402473 	.word	0x00402473
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
  40250c:	4628      	mov	r0, r5
  40250e:	4b08      	ldr	r3, [pc, #32]	; (402530 <vTaskList+0x108>)
  402510:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
  402512:	b004      	add	sp, #16
  402514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402518:	20400ac0 	.word	0x20400ac0
  40251c:	00400e8d 	.word	0x00400e8d
  402520:	00401ec1 	.word	0x00401ec1
  402524:	004039c1 	.word	0x004039c1
  402528:	004092a4 	.word	0x004092a4
  40252c:	004038ad 	.word	0x004038ad
  402530:	00400ebd 	.word	0x00400ebd
  402534:	004038f9 	.word	0x004038f9

00402538 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402538:	4b05      	ldr	r3, [pc, #20]	; (402550 <pvTaskIncrementMutexHeldCount+0x18>)
  40253a:	681b      	ldr	r3, [r3, #0]
  40253c:	b123      	cbz	r3, 402548 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  40253e:	4b04      	ldr	r3, [pc, #16]	; (402550 <pvTaskIncrementMutexHeldCount+0x18>)
  402540:	681a      	ldr	r2, [r3, #0]
  402542:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402544:	3301      	adds	r3, #1
  402546:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402548:	4b01      	ldr	r3, [pc, #4]	; (402550 <pvTaskIncrementMutexHeldCount+0x18>)
  40254a:	6818      	ldr	r0, [r3, #0]
	}
  40254c:	4770      	bx	lr
  40254e:	bf00      	nop
  402550:	20400a50 	.word	0x20400a50

00402554 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402554:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402556:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402558:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  40255a:	4291      	cmp	r1, r2
  40255c:	d80c      	bhi.n	402578 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  40255e:	1ad2      	subs	r2, r2, r3
  402560:	6983      	ldr	r3, [r0, #24]
  402562:	429a      	cmp	r2, r3
  402564:	d301      	bcc.n	40256a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402566:	2001      	movs	r0, #1
  402568:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40256a:	1d01      	adds	r1, r0, #4
  40256c:	4b09      	ldr	r3, [pc, #36]	; (402594 <prvInsertTimerInActiveList+0x40>)
  40256e:	6818      	ldr	r0, [r3, #0]
  402570:	4b09      	ldr	r3, [pc, #36]	; (402598 <prvInsertTimerInActiveList+0x44>)
  402572:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402574:	2000      	movs	r0, #0
  402576:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402578:	429a      	cmp	r2, r3
  40257a:	d203      	bcs.n	402584 <prvInsertTimerInActiveList+0x30>
  40257c:	4299      	cmp	r1, r3
  40257e:	d301      	bcc.n	402584 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402580:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402582:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402584:	1d01      	adds	r1, r0, #4
  402586:	4b05      	ldr	r3, [pc, #20]	; (40259c <prvInsertTimerInActiveList+0x48>)
  402588:	6818      	ldr	r0, [r3, #0]
  40258a:	4b03      	ldr	r3, [pc, #12]	; (402598 <prvInsertTimerInActiveList+0x44>)
  40258c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  40258e:	2000      	movs	r0, #0
  402590:	bd08      	pop	{r3, pc}
  402592:	bf00      	nop
  402594:	20400b54 	.word	0x20400b54
  402598:	00400b19 	.word	0x00400b19
  40259c:	20400b50 	.word	0x20400b50

004025a0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4025a0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4025a2:	4b15      	ldr	r3, [pc, #84]	; (4025f8 <prvCheckForValidListAndQueue+0x58>)
  4025a4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4025a6:	4b15      	ldr	r3, [pc, #84]	; (4025fc <prvCheckForValidListAndQueue+0x5c>)
  4025a8:	681b      	ldr	r3, [r3, #0]
  4025aa:	b113      	cbz	r3, 4025b2 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4025ac:	4b14      	ldr	r3, [pc, #80]	; (402600 <prvCheckForValidListAndQueue+0x60>)
  4025ae:	4798      	blx	r3
  4025b0:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4025b2:	4d14      	ldr	r5, [pc, #80]	; (402604 <prvCheckForValidListAndQueue+0x64>)
  4025b4:	4628      	mov	r0, r5
  4025b6:	4e14      	ldr	r6, [pc, #80]	; (402608 <prvCheckForValidListAndQueue+0x68>)
  4025b8:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4025ba:	4c14      	ldr	r4, [pc, #80]	; (40260c <prvCheckForValidListAndQueue+0x6c>)
  4025bc:	4620      	mov	r0, r4
  4025be:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4025c0:	4b13      	ldr	r3, [pc, #76]	; (402610 <prvCheckForValidListAndQueue+0x70>)
  4025c2:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4025c4:	4b13      	ldr	r3, [pc, #76]	; (402614 <prvCheckForValidListAndQueue+0x74>)
  4025c6:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4025c8:	2200      	movs	r2, #0
  4025ca:	2110      	movs	r1, #16
  4025cc:	2005      	movs	r0, #5
  4025ce:	4b12      	ldr	r3, [pc, #72]	; (402618 <prvCheckForValidListAndQueue+0x78>)
  4025d0:	4798      	blx	r3
  4025d2:	4b0a      	ldr	r3, [pc, #40]	; (4025fc <prvCheckForValidListAndQueue+0x5c>)
  4025d4:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  4025d6:	b118      	cbz	r0, 4025e0 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4025d8:	4910      	ldr	r1, [pc, #64]	; (40261c <prvCheckForValidListAndQueue+0x7c>)
  4025da:	4b11      	ldr	r3, [pc, #68]	; (402620 <prvCheckForValidListAndQueue+0x80>)
  4025dc:	4798      	blx	r3
  4025de:	e7e5      	b.n	4025ac <prvCheckForValidListAndQueue+0xc>
  4025e0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025e4:	b672      	cpsid	i
  4025e6:	f383 8811 	msr	BASEPRI, r3
  4025ea:	f3bf 8f6f 	isb	sy
  4025ee:	f3bf 8f4f 	dsb	sy
  4025f2:	b662      	cpsie	i
  4025f4:	e7fe      	b.n	4025f4 <prvCheckForValidListAndQueue+0x54>
  4025f6:	bf00      	nop
  4025f8:	00400c31 	.word	0x00400c31
  4025fc:	20400b84 	.word	0x20400b84
  402600:	00400c7d 	.word	0x00400c7d
  402604:	20400b58 	.word	0x20400b58
  402608:	00400ae5 	.word	0x00400ae5
  40260c:	20400b6c 	.word	0x20400b6c
  402610:	20400b50 	.word	0x20400b50
  402614:	20400b54 	.word	0x20400b54
  402618:	00401151 	.word	0x00401151
  40261c:	004092bc 	.word	0x004092bc
  402620:	00401681 	.word	0x00401681

00402624 <xTimerCreateTimerTask>:
{
  402624:	b510      	push	{r4, lr}
  402626:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402628:	4b0f      	ldr	r3, [pc, #60]	; (402668 <xTimerCreateTimerTask+0x44>)
  40262a:	4798      	blx	r3
	if( xTimerQueue != NULL )
  40262c:	4b0f      	ldr	r3, [pc, #60]	; (40266c <xTimerCreateTimerTask+0x48>)
  40262e:	681b      	ldr	r3, [r3, #0]
  402630:	b173      	cbz	r3, 402650 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402632:	2300      	movs	r3, #0
  402634:	9303      	str	r3, [sp, #12]
  402636:	9302      	str	r3, [sp, #8]
  402638:	9301      	str	r3, [sp, #4]
  40263a:	2204      	movs	r2, #4
  40263c:	9200      	str	r2, [sp, #0]
  40263e:	f44f 7282 	mov.w	r2, #260	; 0x104
  402642:	490b      	ldr	r1, [pc, #44]	; (402670 <xTimerCreateTimerTask+0x4c>)
  402644:	480b      	ldr	r0, [pc, #44]	; (402674 <xTimerCreateTimerTask+0x50>)
  402646:	4c0c      	ldr	r4, [pc, #48]	; (402678 <xTimerCreateTimerTask+0x54>)
  402648:	47a0      	blx	r4
	configASSERT( xReturn );
  40264a:	b108      	cbz	r0, 402650 <xTimerCreateTimerTask+0x2c>
}
  40264c:	b004      	add	sp, #16
  40264e:	bd10      	pop	{r4, pc}
  402650:	f04f 0380 	mov.w	r3, #128	; 0x80
  402654:	b672      	cpsid	i
  402656:	f383 8811 	msr	BASEPRI, r3
  40265a:	f3bf 8f6f 	isb	sy
  40265e:	f3bf 8f4f 	dsb	sy
  402662:	b662      	cpsie	i
  402664:	e7fe      	b.n	402664 <xTimerCreateTimerTask+0x40>
  402666:	bf00      	nop
  402668:	004025a1 	.word	0x004025a1
  40266c:	20400b84 	.word	0x20400b84
  402670:	004092c4 	.word	0x004092c4
  402674:	004027a5 	.word	0x004027a5
  402678:	00401845 	.word	0x00401845

0040267c <xTimerGenericCommand>:
	configASSERT( xTimer );
  40267c:	b1d8      	cbz	r0, 4026b6 <xTimerGenericCommand+0x3a>
{
  40267e:	b530      	push	{r4, r5, lr}
  402680:	b085      	sub	sp, #20
  402682:	4615      	mov	r5, r2
  402684:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402686:	4a15      	ldr	r2, [pc, #84]	; (4026dc <xTimerGenericCommand+0x60>)
  402688:	6810      	ldr	r0, [r2, #0]
  40268a:	b320      	cbz	r0, 4026d6 <xTimerGenericCommand+0x5a>
  40268c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  40268e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402690:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402692:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402694:	2905      	cmp	r1, #5
  402696:	dc19      	bgt.n	4026cc <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402698:	4b11      	ldr	r3, [pc, #68]	; (4026e0 <xTimerGenericCommand+0x64>)
  40269a:	4798      	blx	r3
  40269c:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  40269e:	f04f 0300 	mov.w	r3, #0
  4026a2:	bf0c      	ite	eq
  4026a4:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4026a6:	461a      	movne	r2, r3
  4026a8:	4669      	mov	r1, sp
  4026aa:	480c      	ldr	r0, [pc, #48]	; (4026dc <xTimerGenericCommand+0x60>)
  4026ac:	6800      	ldr	r0, [r0, #0]
  4026ae:	4c0d      	ldr	r4, [pc, #52]	; (4026e4 <xTimerGenericCommand+0x68>)
  4026b0:	47a0      	blx	r4
}
  4026b2:	b005      	add	sp, #20
  4026b4:	bd30      	pop	{r4, r5, pc}
  4026b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026ba:	b672      	cpsid	i
  4026bc:	f383 8811 	msr	BASEPRI, r3
  4026c0:	f3bf 8f6f 	isb	sy
  4026c4:	f3bf 8f4f 	dsb	sy
  4026c8:	b662      	cpsie	i
  4026ca:	e7fe      	b.n	4026ca <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4026cc:	2300      	movs	r3, #0
  4026ce:	4669      	mov	r1, sp
  4026d0:	4c05      	ldr	r4, [pc, #20]	; (4026e8 <xTimerGenericCommand+0x6c>)
  4026d2:	47a0      	blx	r4
  4026d4:	e7ed      	b.n	4026b2 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  4026d6:	2000      	movs	r0, #0
	return xReturn;
  4026d8:	e7eb      	b.n	4026b2 <xTimerGenericCommand+0x36>
  4026da:	bf00      	nop
  4026dc:	20400b84 	.word	0x20400b84
  4026e0:	004022a9 	.word	0x004022a9
  4026e4:	004011cd 	.word	0x004011cd
  4026e8:	004013b1 	.word	0x004013b1

004026ec <prvSampleTimeNow>:
{
  4026ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4026f0:	b082      	sub	sp, #8
  4026f2:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  4026f4:	4b24      	ldr	r3, [pc, #144]	; (402788 <prvSampleTimeNow+0x9c>)
  4026f6:	4798      	blx	r3
  4026f8:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  4026fa:	4b24      	ldr	r3, [pc, #144]	; (40278c <prvSampleTimeNow+0xa0>)
  4026fc:	681b      	ldr	r3, [r3, #0]
  4026fe:	4298      	cmp	r0, r3
  402700:	d31b      	bcc.n	40273a <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402702:	2300      	movs	r3, #0
  402704:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402708:	4b20      	ldr	r3, [pc, #128]	; (40278c <prvSampleTimeNow+0xa0>)
  40270a:	601f      	str	r7, [r3, #0]
}
  40270c:	4638      	mov	r0, r7
  40270e:	b002      	add	sp, #8
  402710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402714:	2100      	movs	r1, #0
  402716:	9100      	str	r1, [sp, #0]
  402718:	460b      	mov	r3, r1
  40271a:	4652      	mov	r2, sl
  40271c:	4620      	mov	r0, r4
  40271e:	4c1c      	ldr	r4, [pc, #112]	; (402790 <prvSampleTimeNow+0xa4>)
  402720:	47a0      	blx	r4
				configASSERT( xResult );
  402722:	b960      	cbnz	r0, 40273e <prvSampleTimeNow+0x52>
  402724:	f04f 0380 	mov.w	r3, #128	; 0x80
  402728:	b672      	cpsid	i
  40272a:	f383 8811 	msr	BASEPRI, r3
  40272e:	f3bf 8f6f 	isb	sy
  402732:	f3bf 8f4f 	dsb	sy
  402736:	b662      	cpsie	i
  402738:	e7fe      	b.n	402738 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40273a:	4d16      	ldr	r5, [pc, #88]	; (402794 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40273c:	4e16      	ldr	r6, [pc, #88]	; (402798 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40273e:	682b      	ldr	r3, [r5, #0]
  402740:	681a      	ldr	r2, [r3, #0]
  402742:	b1c2      	cbz	r2, 402776 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402744:	68db      	ldr	r3, [r3, #12]
  402746:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40274a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40274c:	f104 0904 	add.w	r9, r4, #4
  402750:	4648      	mov	r0, r9
  402752:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402754:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402756:	4620      	mov	r0, r4
  402758:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40275a:	69e3      	ldr	r3, [r4, #28]
  40275c:	2b01      	cmp	r3, #1
  40275e:	d1ee      	bne.n	40273e <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402760:	69a3      	ldr	r3, [r4, #24]
  402762:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402764:	459a      	cmp	sl, r3
  402766:	d2d5      	bcs.n	402714 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402768:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40276a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40276c:	4649      	mov	r1, r9
  40276e:	6828      	ldr	r0, [r5, #0]
  402770:	4b0a      	ldr	r3, [pc, #40]	; (40279c <prvSampleTimeNow+0xb0>)
  402772:	4798      	blx	r3
  402774:	e7e3      	b.n	40273e <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402776:	4a0a      	ldr	r2, [pc, #40]	; (4027a0 <prvSampleTimeNow+0xb4>)
  402778:	6810      	ldr	r0, [r2, #0]
  40277a:	4906      	ldr	r1, [pc, #24]	; (402794 <prvSampleTimeNow+0xa8>)
  40277c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  40277e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402780:	2301      	movs	r3, #1
  402782:	f8c8 3000 	str.w	r3, [r8]
  402786:	e7bf      	b.n	402708 <prvSampleTimeNow+0x1c>
  402788:	00401b15 	.word	0x00401b15
  40278c:	20400b80 	.word	0x20400b80
  402790:	0040267d 	.word	0x0040267d
  402794:	20400b50 	.word	0x20400b50
  402798:	00400b4d 	.word	0x00400b4d
  40279c:	00400b19 	.word	0x00400b19
  4027a0:	20400b54 	.word	0x20400b54

004027a4 <prvTimerTask>:
{
  4027a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4027a8:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4027aa:	4e75      	ldr	r6, [pc, #468]	; (402980 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  4027ac:	4f75      	ldr	r7, [pc, #468]	; (402984 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  4027ae:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 4029ac <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4027b2:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 4029b0 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4027b6:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  4027b8:	681a      	ldr	r2, [r3, #0]
  4027ba:	2a00      	cmp	r2, #0
  4027bc:	f000 80ce 	beq.w	40295c <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4027c0:	68db      	ldr	r3, [r3, #12]
  4027c2:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  4027c4:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4027c6:	a804      	add	r0, sp, #16
  4027c8:	4b6f      	ldr	r3, [pc, #444]	; (402988 <prvTimerTask+0x1e4>)
  4027ca:	4798      	blx	r3
  4027cc:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4027ce:	9b04      	ldr	r3, [sp, #16]
  4027d0:	2b00      	cmp	r3, #0
  4027d2:	d144      	bne.n	40285e <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4027d4:	42a0      	cmp	r0, r4
  4027d6:	d212      	bcs.n	4027fe <prvTimerTask+0x5a>
  4027d8:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4027da:	1b61      	subs	r1, r4, r5
  4027dc:	4b6b      	ldr	r3, [pc, #428]	; (40298c <prvTimerTask+0x1e8>)
  4027de:	6818      	ldr	r0, [r3, #0]
  4027e0:	4b6b      	ldr	r3, [pc, #428]	; (402990 <prvTimerTask+0x1ec>)
  4027e2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4027e4:	4b6b      	ldr	r3, [pc, #428]	; (402994 <prvTimerTask+0x1f0>)
  4027e6:	4798      	blx	r3
  4027e8:	2800      	cmp	r0, #0
  4027ea:	d13a      	bne.n	402862 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  4027ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4027f0:	f8c9 3000 	str.w	r3, [r9]
  4027f4:	f3bf 8f4f 	dsb	sy
  4027f8:	f3bf 8f6f 	isb	sy
  4027fc:	e031      	b.n	402862 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  4027fe:	4b65      	ldr	r3, [pc, #404]	; (402994 <prvTimerTask+0x1f0>)
  402800:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402802:	6833      	ldr	r3, [r6, #0]
  402804:	68db      	ldr	r3, [r3, #12]
  402806:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40280a:	f10a 0004 	add.w	r0, sl, #4
  40280e:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402810:	f8da 301c 	ldr.w	r3, [sl, #28]
  402814:	2b01      	cmp	r3, #1
  402816:	d004      	beq.n	402822 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402818:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40281c:	4650      	mov	r0, sl
  40281e:	4798      	blx	r3
  402820:	e01f      	b.n	402862 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402822:	f8da 1018 	ldr.w	r1, [sl, #24]
  402826:	4623      	mov	r3, r4
  402828:	462a      	mov	r2, r5
  40282a:	4421      	add	r1, r4
  40282c:	4650      	mov	r0, sl
  40282e:	4d5a      	ldr	r5, [pc, #360]	; (402998 <prvTimerTask+0x1f4>)
  402830:	47a8      	blx	r5
  402832:	2801      	cmp	r0, #1
  402834:	d1f0      	bne.n	402818 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402836:	2100      	movs	r1, #0
  402838:	9100      	str	r1, [sp, #0]
  40283a:	460b      	mov	r3, r1
  40283c:	4622      	mov	r2, r4
  40283e:	4650      	mov	r0, sl
  402840:	4c56      	ldr	r4, [pc, #344]	; (40299c <prvTimerTask+0x1f8>)
  402842:	47a0      	blx	r4
			configASSERT( xResult );
  402844:	2800      	cmp	r0, #0
  402846:	d1e7      	bne.n	402818 <prvTimerTask+0x74>
  402848:	f04f 0380 	mov.w	r3, #128	; 0x80
  40284c:	b672      	cpsid	i
  40284e:	f383 8811 	msr	BASEPRI, r3
  402852:	f3bf 8f6f 	isb	sy
  402856:	f3bf 8f4f 	dsb	sy
  40285a:	b662      	cpsie	i
  40285c:	e7fe      	b.n	40285c <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  40285e:	4b4d      	ldr	r3, [pc, #308]	; (402994 <prvTimerTask+0x1f0>)
  402860:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402862:	4d4a      	ldr	r5, [pc, #296]	; (40298c <prvTimerTask+0x1e8>)
  402864:	4c4e      	ldr	r4, [pc, #312]	; (4029a0 <prvTimerTask+0x1fc>)
  402866:	e006      	b.n	402876 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402868:	9907      	ldr	r1, [sp, #28]
  40286a:	9806      	ldr	r0, [sp, #24]
  40286c:	9b05      	ldr	r3, [sp, #20]
  40286e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402870:	9b04      	ldr	r3, [sp, #16]
  402872:	2b00      	cmp	r3, #0
  402874:	da09      	bge.n	40288a <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402876:	2300      	movs	r3, #0
  402878:	461a      	mov	r2, r3
  40287a:	a904      	add	r1, sp, #16
  40287c:	6828      	ldr	r0, [r5, #0]
  40287e:	47a0      	blx	r4
  402880:	2800      	cmp	r0, #0
  402882:	d098      	beq.n	4027b6 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402884:	9b04      	ldr	r3, [sp, #16]
  402886:	2b00      	cmp	r3, #0
  402888:	dbee      	blt.n	402868 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40288a:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40288e:	f8da 3014 	ldr.w	r3, [sl, #20]
  402892:	b113      	cbz	r3, 40289a <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402894:	f10a 0004 	add.w	r0, sl, #4
  402898:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40289a:	a803      	add	r0, sp, #12
  40289c:	4b3a      	ldr	r3, [pc, #232]	; (402988 <prvTimerTask+0x1e4>)
  40289e:	4798      	blx	r3
			switch( xMessage.xMessageID )
  4028a0:	9b04      	ldr	r3, [sp, #16]
  4028a2:	2b09      	cmp	r3, #9
  4028a4:	d8e7      	bhi.n	402876 <prvTimerTask+0xd2>
  4028a6:	a201      	add	r2, pc, #4	; (adr r2, 4028ac <prvTimerTask+0x108>)
  4028a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4028ac:	004028d5 	.word	0x004028d5
  4028b0:	004028d5 	.word	0x004028d5
  4028b4:	004028d5 	.word	0x004028d5
  4028b8:	00402877 	.word	0x00402877
  4028bc:	00402929 	.word	0x00402929
  4028c0:	00402955 	.word	0x00402955
  4028c4:	004028d5 	.word	0x004028d5
  4028c8:	004028d5 	.word	0x004028d5
  4028cc:	00402877 	.word	0x00402877
  4028d0:	00402929 	.word	0x00402929
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  4028d4:	9c05      	ldr	r4, [sp, #20]
  4028d6:	f8da 1018 	ldr.w	r1, [sl, #24]
  4028da:	4623      	mov	r3, r4
  4028dc:	4602      	mov	r2, r0
  4028de:	4421      	add	r1, r4
  4028e0:	4650      	mov	r0, sl
  4028e2:	4c2d      	ldr	r4, [pc, #180]	; (402998 <prvTimerTask+0x1f4>)
  4028e4:	47a0      	blx	r4
  4028e6:	2801      	cmp	r0, #1
  4028e8:	d1bc      	bne.n	402864 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4028ea:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4028ee:	4650      	mov	r0, sl
  4028f0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4028f2:	f8da 301c 	ldr.w	r3, [sl, #28]
  4028f6:	2b01      	cmp	r3, #1
  4028f8:	d1b4      	bne.n	402864 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4028fa:	f8da 2018 	ldr.w	r2, [sl, #24]
  4028fe:	2100      	movs	r1, #0
  402900:	9100      	str	r1, [sp, #0]
  402902:	460b      	mov	r3, r1
  402904:	9805      	ldr	r0, [sp, #20]
  402906:	4402      	add	r2, r0
  402908:	4650      	mov	r0, sl
  40290a:	4c24      	ldr	r4, [pc, #144]	; (40299c <prvTimerTask+0x1f8>)
  40290c:	47a0      	blx	r4
							configASSERT( xResult );
  40290e:	2800      	cmp	r0, #0
  402910:	d1a8      	bne.n	402864 <prvTimerTask+0xc0>
  402912:	f04f 0380 	mov.w	r3, #128	; 0x80
  402916:	b672      	cpsid	i
  402918:	f383 8811 	msr	BASEPRI, r3
  40291c:	f3bf 8f6f 	isb	sy
  402920:	f3bf 8f4f 	dsb	sy
  402924:	b662      	cpsie	i
  402926:	e7fe      	b.n	402926 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402928:	9905      	ldr	r1, [sp, #20]
  40292a:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  40292e:	b131      	cbz	r1, 40293e <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402930:	4603      	mov	r3, r0
  402932:	4602      	mov	r2, r0
  402934:	4401      	add	r1, r0
  402936:	4650      	mov	r0, sl
  402938:	4c17      	ldr	r4, [pc, #92]	; (402998 <prvTimerTask+0x1f4>)
  40293a:	47a0      	blx	r4
  40293c:	e792      	b.n	402864 <prvTimerTask+0xc0>
  40293e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402942:	b672      	cpsid	i
  402944:	f383 8811 	msr	BASEPRI, r3
  402948:	f3bf 8f6f 	isb	sy
  40294c:	f3bf 8f4f 	dsb	sy
  402950:	b662      	cpsie	i
  402952:	e7fe      	b.n	402952 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  402954:	4650      	mov	r0, sl
  402956:	4b13      	ldr	r3, [pc, #76]	; (4029a4 <prvTimerTask+0x200>)
  402958:	4798      	blx	r3
  40295a:	e783      	b.n	402864 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  40295c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40295e:	a804      	add	r0, sp, #16
  402960:	4b09      	ldr	r3, [pc, #36]	; (402988 <prvTimerTask+0x1e4>)
  402962:	4798      	blx	r3
  402964:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402966:	9b04      	ldr	r3, [sp, #16]
  402968:	2b00      	cmp	r3, #0
  40296a:	f47f af78 	bne.w	40285e <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  40296e:	4b0e      	ldr	r3, [pc, #56]	; (4029a8 <prvTimerTask+0x204>)
  402970:	681b      	ldr	r3, [r3, #0]
  402972:	681a      	ldr	r2, [r3, #0]
  402974:	fab2 f282 	clz	r2, r2
  402978:	0952      	lsrs	r2, r2, #5
  40297a:	2400      	movs	r4, #0
  40297c:	e72d      	b.n	4027da <prvTimerTask+0x36>
  40297e:	bf00      	nop
  402980:	20400b50 	.word	0x20400b50
  402984:	00401b05 	.word	0x00401b05
  402988:	004026ed 	.word	0x004026ed
  40298c:	20400b84 	.word	0x20400b84
  402990:	004016b5 	.word	0x004016b5
  402994:	00401c79 	.word	0x00401c79
  402998:	00402555 	.word	0x00402555
  40299c:	0040267d 	.word	0x0040267d
  4029a0:	004014b1 	.word	0x004014b1
  4029a4:	00400ebd 	.word	0x00400ebd
  4029a8:	20400b54 	.word	0x20400b54
  4029ac:	e000ed04 	.word	0xe000ed04
  4029b0:	00400b4d 	.word	0x00400b4d

004029b4 <task_but>:
		pio_clear(pio, mask);
	else
		pio_set(pio,mask);
}
static void task_but(void *pvParameters)
{
  4029b4:	b570      	push	{r4, r5, r6, lr}
	uint8_t click = 0;
	uint8_t count = 0;
	UNUSED(pvParameters);
	for (;;) {

		uint8_t but = pio_get(BUT_PIO,PIO_INPUT,BUT_PIN_MASK);
  4029b6:	4e08      	ldr	r6, [pc, #32]	; (4029d8 <task_but+0x24>)
  4029b8:	4d08      	ldr	r5, [pc, #32]	; (4029dc <task_but+0x28>)
			count = 0;
		}
		if(click = 1 && count == 1){
			xSemaphoreGive(xSemaphore);
		}
		printf("%d \n",but);
  4029ba:	4c09      	ldr	r4, [pc, #36]	; (4029e0 <task_but+0x2c>)
		uint8_t but = pio_get(BUT_PIO,PIO_INPUT,BUT_PIN_MASK);
  4029bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4029c0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4029c4:	4630      	mov	r0, r6
  4029c6:	47a8      	blx	r5
		printf("%d \n",but);
  4029c8:	2100      	movs	r1, #0
  4029ca:	4620      	mov	r0, r4
  4029cc:	4b05      	ldr	r3, [pc, #20]	; (4029e4 <task_but+0x30>)
  4029ce:	4798      	blx	r3
		vTaskDelay(100);
  4029d0:	2064      	movs	r0, #100	; 0x64
  4029d2:	4b05      	ldr	r3, [pc, #20]	; (4029e8 <task_but+0x34>)
  4029d4:	4798      	blx	r3
  4029d6:	e7f1      	b.n	4029bc <task_but+0x8>
  4029d8:	400e0e00 	.word	0x400e0e00
  4029dc:	00400449 	.word	0x00400449
  4029e0:	00409428 	.word	0x00409428
  4029e4:	00402fad 	.word	0x00402fad
  4029e8:	00401d99 	.word	0x00401d99

004029ec <task_monitor>:
{
  4029ec:	b580      	push	{r7, lr}
		printf("--- task ## %u", (unsigned int)uxTaskGetNumberOfTasks());
  4029ee:	4f09      	ldr	r7, [pc, #36]	; (402a14 <task_monitor+0x28>)
  4029f0:	4e09      	ldr	r6, [pc, #36]	; (402a18 <task_monitor+0x2c>)
  4029f2:	4d0a      	ldr	r5, [pc, #40]	; (402a1c <task_monitor+0x30>)
  4029f4:	47b8      	blx	r7
  4029f6:	4601      	mov	r1, r0
  4029f8:	4630      	mov	r0, r6
  4029fa:	47a8      	blx	r5
		vTaskList((signed portCHAR *)szList);
  4029fc:	4c08      	ldr	r4, [pc, #32]	; (402a20 <task_monitor+0x34>)
  4029fe:	4620      	mov	r0, r4
  402a00:	4b08      	ldr	r3, [pc, #32]	; (402a24 <task_monitor+0x38>)
  402a02:	4798      	blx	r3
		printf(szList);
  402a04:	4620      	mov	r0, r4
  402a06:	47a8      	blx	r5
		vTaskDelay(1000);
  402a08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  402a0c:	4b06      	ldr	r3, [pc, #24]	; (402a28 <task_monitor+0x3c>)
  402a0e:	4798      	blx	r3
  402a10:	e7f0      	b.n	4029f4 <task_monitor+0x8>
  402a12:	bf00      	nop
  402a14:	00401b21 	.word	0x00401b21
  402a18:	00409430 	.word	0x00409430
  402a1c:	00402fad 	.word	0x00402fad
  402a20:	20400b88 	.word	0x20400b88
  402a24:	00402429 	.word	0x00402429
  402a28:	00401d99 	.word	0x00401d99

00402a2c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  402a2e:	b083      	sub	sp, #12
  402a30:	4605      	mov	r5, r0
  402a32:	460c      	mov	r4, r1
	uint32_t val = 0;
  402a34:	2300      	movs	r3, #0
  402a36:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402a38:	4b2a      	ldr	r3, [pc, #168]	; (402ae4 <usart_serial_getchar+0xb8>)
  402a3a:	4298      	cmp	r0, r3
  402a3c:	d013      	beq.n	402a66 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402a3e:	4b2a      	ldr	r3, [pc, #168]	; (402ae8 <usart_serial_getchar+0xbc>)
  402a40:	4298      	cmp	r0, r3
  402a42:	d018      	beq.n	402a76 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402a44:	4b29      	ldr	r3, [pc, #164]	; (402aec <usart_serial_getchar+0xc0>)
  402a46:	4298      	cmp	r0, r3
  402a48:	d01d      	beq.n	402a86 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402a4a:	4b29      	ldr	r3, [pc, #164]	; (402af0 <usart_serial_getchar+0xc4>)
  402a4c:	429d      	cmp	r5, r3
  402a4e:	d022      	beq.n	402a96 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402a50:	4b28      	ldr	r3, [pc, #160]	; (402af4 <usart_serial_getchar+0xc8>)
  402a52:	429d      	cmp	r5, r3
  402a54:	d027      	beq.n	402aa6 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402a56:	4b28      	ldr	r3, [pc, #160]	; (402af8 <usart_serial_getchar+0xcc>)
  402a58:	429d      	cmp	r5, r3
  402a5a:	d02e      	beq.n	402aba <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402a5c:	4b27      	ldr	r3, [pc, #156]	; (402afc <usart_serial_getchar+0xd0>)
  402a5e:	429d      	cmp	r5, r3
  402a60:	d035      	beq.n	402ace <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402a62:	b003      	add	sp, #12
  402a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  402a66:	461f      	mov	r7, r3
  402a68:	4e25      	ldr	r6, [pc, #148]	; (402b00 <usart_serial_getchar+0xd4>)
  402a6a:	4621      	mov	r1, r4
  402a6c:	4638      	mov	r0, r7
  402a6e:	47b0      	blx	r6
  402a70:	2800      	cmp	r0, #0
  402a72:	d1fa      	bne.n	402a6a <usart_serial_getchar+0x3e>
  402a74:	e7e9      	b.n	402a4a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  402a76:	461f      	mov	r7, r3
  402a78:	4e21      	ldr	r6, [pc, #132]	; (402b00 <usart_serial_getchar+0xd4>)
  402a7a:	4621      	mov	r1, r4
  402a7c:	4638      	mov	r0, r7
  402a7e:	47b0      	blx	r6
  402a80:	2800      	cmp	r0, #0
  402a82:	d1fa      	bne.n	402a7a <usart_serial_getchar+0x4e>
  402a84:	e7e4      	b.n	402a50 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  402a86:	461f      	mov	r7, r3
  402a88:	4e1d      	ldr	r6, [pc, #116]	; (402b00 <usart_serial_getchar+0xd4>)
  402a8a:	4621      	mov	r1, r4
  402a8c:	4638      	mov	r0, r7
  402a8e:	47b0      	blx	r6
  402a90:	2800      	cmp	r0, #0
  402a92:	d1fa      	bne.n	402a8a <usart_serial_getchar+0x5e>
  402a94:	e7df      	b.n	402a56 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  402a96:	461f      	mov	r7, r3
  402a98:	4e19      	ldr	r6, [pc, #100]	; (402b00 <usart_serial_getchar+0xd4>)
  402a9a:	4621      	mov	r1, r4
  402a9c:	4638      	mov	r0, r7
  402a9e:	47b0      	blx	r6
  402aa0:	2800      	cmp	r0, #0
  402aa2:	d1fa      	bne.n	402a9a <usart_serial_getchar+0x6e>
  402aa4:	e7da      	b.n	402a5c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  402aa6:	461e      	mov	r6, r3
  402aa8:	4d16      	ldr	r5, [pc, #88]	; (402b04 <usart_serial_getchar+0xd8>)
  402aaa:	a901      	add	r1, sp, #4
  402aac:	4630      	mov	r0, r6
  402aae:	47a8      	blx	r5
  402ab0:	2800      	cmp	r0, #0
  402ab2:	d1fa      	bne.n	402aaa <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  402ab4:	9b01      	ldr	r3, [sp, #4]
  402ab6:	7023      	strb	r3, [r4, #0]
  402ab8:	e7d3      	b.n	402a62 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402aba:	461e      	mov	r6, r3
  402abc:	4d11      	ldr	r5, [pc, #68]	; (402b04 <usart_serial_getchar+0xd8>)
  402abe:	a901      	add	r1, sp, #4
  402ac0:	4630      	mov	r0, r6
  402ac2:	47a8      	blx	r5
  402ac4:	2800      	cmp	r0, #0
  402ac6:	d1fa      	bne.n	402abe <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  402ac8:	9b01      	ldr	r3, [sp, #4]
  402aca:	7023      	strb	r3, [r4, #0]
  402acc:	e7c9      	b.n	402a62 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402ace:	461e      	mov	r6, r3
  402ad0:	4d0c      	ldr	r5, [pc, #48]	; (402b04 <usart_serial_getchar+0xd8>)
  402ad2:	a901      	add	r1, sp, #4
  402ad4:	4630      	mov	r0, r6
  402ad6:	47a8      	blx	r5
  402ad8:	2800      	cmp	r0, #0
  402ada:	d1fa      	bne.n	402ad2 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  402adc:	9b01      	ldr	r3, [sp, #4]
  402ade:	7023      	strb	r3, [r4, #0]
}
  402ae0:	e7bf      	b.n	402a62 <usart_serial_getchar+0x36>
  402ae2:	bf00      	nop
  402ae4:	400e0800 	.word	0x400e0800
  402ae8:	400e0a00 	.word	0x400e0a00
  402aec:	400e1a00 	.word	0x400e1a00
  402af0:	400e1c00 	.word	0x400e1c00
  402af4:	40024000 	.word	0x40024000
  402af8:	40028000 	.word	0x40028000
  402afc:	4002c000 	.word	0x4002c000
  402b00:	0040070f 	.word	0x0040070f
  402b04:	0040081b 	.word	0x0040081b

00402b08 <usart_serial_putchar>:
{
  402b08:	b570      	push	{r4, r5, r6, lr}
  402b0a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  402b0c:	4b2a      	ldr	r3, [pc, #168]	; (402bb8 <usart_serial_putchar+0xb0>)
  402b0e:	4298      	cmp	r0, r3
  402b10:	d013      	beq.n	402b3a <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  402b12:	4b2a      	ldr	r3, [pc, #168]	; (402bbc <usart_serial_putchar+0xb4>)
  402b14:	4298      	cmp	r0, r3
  402b16:	d019      	beq.n	402b4c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  402b18:	4b29      	ldr	r3, [pc, #164]	; (402bc0 <usart_serial_putchar+0xb8>)
  402b1a:	4298      	cmp	r0, r3
  402b1c:	d01f      	beq.n	402b5e <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  402b1e:	4b29      	ldr	r3, [pc, #164]	; (402bc4 <usart_serial_putchar+0xbc>)
  402b20:	4298      	cmp	r0, r3
  402b22:	d025      	beq.n	402b70 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  402b24:	4b28      	ldr	r3, [pc, #160]	; (402bc8 <usart_serial_putchar+0xc0>)
  402b26:	4298      	cmp	r0, r3
  402b28:	d02b      	beq.n	402b82 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  402b2a:	4b28      	ldr	r3, [pc, #160]	; (402bcc <usart_serial_putchar+0xc4>)
  402b2c:	4298      	cmp	r0, r3
  402b2e:	d031      	beq.n	402b94 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  402b30:	4b27      	ldr	r3, [pc, #156]	; (402bd0 <usart_serial_putchar+0xc8>)
  402b32:	4298      	cmp	r0, r3
  402b34:	d037      	beq.n	402ba6 <usart_serial_putchar+0x9e>
	return 0;
  402b36:	2000      	movs	r0, #0
}
  402b38:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402b3a:	461e      	mov	r6, r3
  402b3c:	4d25      	ldr	r5, [pc, #148]	; (402bd4 <usart_serial_putchar+0xcc>)
  402b3e:	4621      	mov	r1, r4
  402b40:	4630      	mov	r0, r6
  402b42:	47a8      	blx	r5
  402b44:	2800      	cmp	r0, #0
  402b46:	d1fa      	bne.n	402b3e <usart_serial_putchar+0x36>
		return 1;
  402b48:	2001      	movs	r0, #1
  402b4a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402b4c:	461e      	mov	r6, r3
  402b4e:	4d21      	ldr	r5, [pc, #132]	; (402bd4 <usart_serial_putchar+0xcc>)
  402b50:	4621      	mov	r1, r4
  402b52:	4630      	mov	r0, r6
  402b54:	47a8      	blx	r5
  402b56:	2800      	cmp	r0, #0
  402b58:	d1fa      	bne.n	402b50 <usart_serial_putchar+0x48>
		return 1;
  402b5a:	2001      	movs	r0, #1
  402b5c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402b5e:	461e      	mov	r6, r3
  402b60:	4d1c      	ldr	r5, [pc, #112]	; (402bd4 <usart_serial_putchar+0xcc>)
  402b62:	4621      	mov	r1, r4
  402b64:	4630      	mov	r0, r6
  402b66:	47a8      	blx	r5
  402b68:	2800      	cmp	r0, #0
  402b6a:	d1fa      	bne.n	402b62 <usart_serial_putchar+0x5a>
		return 1;
  402b6c:	2001      	movs	r0, #1
  402b6e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402b70:	461e      	mov	r6, r3
  402b72:	4d18      	ldr	r5, [pc, #96]	; (402bd4 <usart_serial_putchar+0xcc>)
  402b74:	4621      	mov	r1, r4
  402b76:	4630      	mov	r0, r6
  402b78:	47a8      	blx	r5
  402b7a:	2800      	cmp	r0, #0
  402b7c:	d1fa      	bne.n	402b74 <usart_serial_putchar+0x6c>
		return 1;
  402b7e:	2001      	movs	r0, #1
  402b80:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402b82:	461e      	mov	r6, r3
  402b84:	4d14      	ldr	r5, [pc, #80]	; (402bd8 <usart_serial_putchar+0xd0>)
  402b86:	4621      	mov	r1, r4
  402b88:	4630      	mov	r0, r6
  402b8a:	47a8      	blx	r5
  402b8c:	2800      	cmp	r0, #0
  402b8e:	d1fa      	bne.n	402b86 <usart_serial_putchar+0x7e>
		return 1;
  402b90:	2001      	movs	r0, #1
  402b92:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402b94:	461e      	mov	r6, r3
  402b96:	4d10      	ldr	r5, [pc, #64]	; (402bd8 <usart_serial_putchar+0xd0>)
  402b98:	4621      	mov	r1, r4
  402b9a:	4630      	mov	r0, r6
  402b9c:	47a8      	blx	r5
  402b9e:	2800      	cmp	r0, #0
  402ba0:	d1fa      	bne.n	402b98 <usart_serial_putchar+0x90>
		return 1;
  402ba2:	2001      	movs	r0, #1
  402ba4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402ba6:	461e      	mov	r6, r3
  402ba8:	4d0b      	ldr	r5, [pc, #44]	; (402bd8 <usart_serial_putchar+0xd0>)
  402baa:	4621      	mov	r1, r4
  402bac:	4630      	mov	r0, r6
  402bae:	47a8      	blx	r5
  402bb0:	2800      	cmp	r0, #0
  402bb2:	d1fa      	bne.n	402baa <usart_serial_putchar+0xa2>
		return 1;
  402bb4:	2001      	movs	r0, #1
  402bb6:	bd70      	pop	{r4, r5, r6, pc}
  402bb8:	400e0800 	.word	0x400e0800
  402bbc:	400e0a00 	.word	0x400e0a00
  402bc0:	400e1a00 	.word	0x400e1a00
  402bc4:	400e1c00 	.word	0x400e1c00
  402bc8:	40024000 	.word	0x40024000
  402bcc:	40028000 	.word	0x40028000
  402bd0:	4002c000 	.word	0x4002c000
  402bd4:	004006fd 	.word	0x004006fd
  402bd8:	00400805 	.word	0x00400805

00402bdc <LED_init>:
void LED_init(Pio *pio, uint32_t pio_id, uint32_t mask, int estado){
  402bdc:	b570      	push	{r4, r5, r6, lr}
  402bde:	b082      	sub	sp, #8
  402be0:	4604      	mov	r4, r0
  402be2:	4615      	mov	r5, r2
  402be4:	461e      	mov	r6, r3
	pmc_enable_periph_clk(pio_id);
  402be6:	4608      	mov	r0, r1
  402be8:	4b05      	ldr	r3, [pc, #20]	; (402c00 <LED_init+0x24>)
  402bea:	4798      	blx	r3
	pio_set_output(pio, mask, estado, 0, 0 );
  402bec:	2300      	movs	r3, #0
  402bee:	9300      	str	r3, [sp, #0]
  402bf0:	4632      	mov	r2, r6
  402bf2:	4629      	mov	r1, r5
  402bf4:	4620      	mov	r0, r4
  402bf6:	4c03      	ldr	r4, [pc, #12]	; (402c04 <LED_init+0x28>)
  402bf8:	47a0      	blx	r4
};
  402bfa:	b002      	add	sp, #8
  402bfc:	bd70      	pop	{r4, r5, r6, pc}
  402bfe:	bf00      	nop
  402c00:	004006a9 	.word	0x004006a9
  402c04:	00400499 	.word	0x00400499

00402c08 <BUT_init>:
				uint32_t ul_id){
  402c08:	b570      	push	{r4, r5, r6, lr}
  402c0a:	4604      	mov	r4, r0
  402c0c:	460d      	mov	r5, r1
  402c0e:	4616      	mov	r6, r2
	pmc_enable_periph_clk(ul_id);
  402c10:	4618      	mov	r0, r3
  402c12:	4b04      	ldr	r3, [pc, #16]	; (402c24 <BUT_init+0x1c>)
  402c14:	4798      	blx	r3
	pio_set_input(p_pio, ul_mask, ul_attribute);
  402c16:	4632      	mov	r2, r6
  402c18:	4629      	mov	r1, r5
  402c1a:	4620      	mov	r0, r4
  402c1c:	4b02      	ldr	r3, [pc, #8]	; (402c28 <BUT_init+0x20>)
  402c1e:	4798      	blx	r3
  402c20:	bd70      	pop	{r4, r5, r6, pc}
  402c22:	bf00      	nop
  402c24:	004006a9 	.word	0x004006a9
  402c28:	00400463 	.word	0x00400463

00402c2c <vApplicationStackOverflowHook>:
{
  402c2c:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  402c2e:	460a      	mov	r2, r1
  402c30:	4601      	mov	r1, r0
  402c32:	4802      	ldr	r0, [pc, #8]	; (402c3c <vApplicationStackOverflowHook+0x10>)
  402c34:	4b02      	ldr	r3, [pc, #8]	; (402c40 <vApplicationStackOverflowHook+0x14>)
  402c36:	4798      	blx	r3
  402c38:	e7fe      	b.n	402c38 <vApplicationStackOverflowHook+0xc>
  402c3a:	bf00      	nop
  402c3c:	00409440 	.word	0x00409440
  402c40:	00402fad 	.word	0x00402fad

00402c44 <vApplicationTickHook>:
{
  402c44:	4770      	bx	lr

00402c46 <vApplicationMallocFailedHook>:
  402c46:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c4a:	b672      	cpsid	i
  402c4c:	f383 8811 	msr	BASEPRI, r3
  402c50:	f3bf 8f6f 	isb	sy
  402c54:	f3bf 8f4f 	dsb	sy
  402c58:	b662      	cpsie	i
  402c5a:	e7fe      	b.n	402c5a <vApplicationMallocFailedHook+0x14>

00402c5c <pin_toggle>:
void pin_toggle(Pio *pio, uint32_t mask){
  402c5c:	b538      	push	{r3, r4, r5, lr}
  402c5e:	4604      	mov	r4, r0
  402c60:	460d      	mov	r5, r1
	if(pio_get_output_data_status(pio, mask))
  402c62:	4b06      	ldr	r3, [pc, #24]	; (402c7c <pin_toggle+0x20>)
  402c64:	4798      	blx	r3
  402c66:	b920      	cbnz	r0, 402c72 <pin_toggle+0x16>
		pio_set(pio,mask);
  402c68:	4629      	mov	r1, r5
  402c6a:	4620      	mov	r0, r4
  402c6c:	4b04      	ldr	r3, [pc, #16]	; (402c80 <pin_toggle+0x24>)
  402c6e:	4798      	blx	r3
  402c70:	bd38      	pop	{r3, r4, r5, pc}
		pio_clear(pio, mask);
  402c72:	4629      	mov	r1, r5
  402c74:	4620      	mov	r0, r4
  402c76:	4b03      	ldr	r3, [pc, #12]	; (402c84 <pin_toggle+0x28>)
  402c78:	4798      	blx	r3
  402c7a:	bd38      	pop	{r3, r4, r5, pc}
  402c7c:	004004c1 	.word	0x004004c1
  402c80:	00400441 	.word	0x00400441
  402c84:	00400445 	.word	0x00400445

00402c88 <task_led3>:
		vTaskDelay(500);
	}
}

static void task_led3(void *pvParameters)
{
  402c88:	b508      	push	{r3, lr}
	UNUSED(pvParameters);
	for (;;) {

		pin_toggle(LED3_PIO, LED3_PIN_MASK);
  402c8a:	4e05      	ldr	r6, [pc, #20]	; (402ca0 <task_led3+0x18>)
  402c8c:	4d05      	ldr	r5, [pc, #20]	; (402ca4 <task_led3+0x1c>)
		vTaskDelay(2000);
  402c8e:	4c06      	ldr	r4, [pc, #24]	; (402ca8 <task_led3+0x20>)
		pin_toggle(LED3_PIO, LED3_PIN_MASK);
  402c90:	2104      	movs	r1, #4
  402c92:	4630      	mov	r0, r6
  402c94:	47a8      	blx	r5
		vTaskDelay(2000);
  402c96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  402c9a:	47a0      	blx	r4
  402c9c:	e7f8      	b.n	402c90 <task_led3+0x8>
  402c9e:	bf00      	nop
  402ca0:	400e1000 	.word	0x400e1000
  402ca4:	00402c5d 	.word	0x00402c5d
  402ca8:	00401d99 	.word	0x00401d99

00402cac <task_led2>:
{
  402cac:	b508      	push	{r3, lr}
		pin_toggle(LED2_PIO, LED2_PIN_MASK);
  402cae:	4e05      	ldr	r6, [pc, #20]	; (402cc4 <task_led2+0x18>)
  402cb0:	4d05      	ldr	r5, [pc, #20]	; (402cc8 <task_led2+0x1c>)
		vTaskDelay(500);
  402cb2:	4c06      	ldr	r4, [pc, #24]	; (402ccc <task_led2+0x20>)
		pin_toggle(LED2_PIO, LED2_PIN_MASK);
  402cb4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402cb8:	4630      	mov	r0, r6
  402cba:	47a8      	blx	r5
		vTaskDelay(500);
  402cbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402cc0:	47a0      	blx	r4
  402cc2:	e7f7      	b.n	402cb4 <task_led2+0x8>
  402cc4:	400e1200 	.word	0x400e1200
  402cc8:	00402c5d 	.word	0x00402c5d
  402ccc:	00401d99 	.word	0x00401d99

00402cd0 <task_led1>:
{
  402cd0:	b508      	push	{r3, lr}
		pin_toggle(LED1_PIO, LED1_PIN_MASK);
  402cd2:	4e05      	ldr	r6, [pc, #20]	; (402ce8 <task_led1+0x18>)
  402cd4:	4d05      	ldr	r5, [pc, #20]	; (402cec <task_led1+0x1c>)
		vTaskDelay(1000);
  402cd6:	4c06      	ldr	r4, [pc, #24]	; (402cf0 <task_led1+0x20>)
		pin_toggle(LED1_PIO, LED1_PIN_MASK);
  402cd8:	2101      	movs	r1, #1
  402cda:	4630      	mov	r0, r6
  402cdc:	47a8      	blx	r5
		vTaskDelay(1000);
  402cde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  402ce2:	47a0      	blx	r4
  402ce4:	e7f8      	b.n	402cd8 <task_led1+0x8>
  402ce6:	bf00      	nop
  402ce8:	400e0e00 	.word	0x400e0e00
  402cec:	00402c5d 	.word	0x00402c5d
  402cf0:	00401d99 	.word	0x00401d99

00402cf4 <task_led>:
{
  402cf4:	b508      	push	{r3, lr}
		pin_toggle(LED_PIO, LED_PIN_MASK);
  402cf6:	4e05      	ldr	r6, [pc, #20]	; (402d0c <task_led+0x18>)
  402cf8:	4d05      	ldr	r5, [pc, #20]	; (402d10 <task_led+0x1c>)
		vTaskDelay(100);
  402cfa:	4c06      	ldr	r4, [pc, #24]	; (402d14 <task_led+0x20>)
		pin_toggle(LED_PIO, LED_PIN_MASK);
  402cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
  402d00:	4630      	mov	r0, r6
  402d02:	47a8      	blx	r5
		vTaskDelay(100);
  402d04:	2064      	movs	r0, #100	; 0x64
  402d06:	47a0      	blx	r4
  402d08:	e7f8      	b.n	402cfc <task_led+0x8>
  402d0a:	bf00      	nop
  402d0c:	400e1200 	.word	0x400e1200
  402d10:	00402c5d 	.word	0x00402c5d
  402d14:	00401d99 	.word	0x00401d99

00402d18 <main>:
 *  \brief FreeRTOS Real Time Kernel example entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  402d18:	b570      	push	{r4, r5, r6, lr}
  402d1a:	b08a      	sub	sp, #40	; 0x28
	/* Initialize the SAM system */
	sysclk_init();
  402d1c:	4b60      	ldr	r3, [pc, #384]	; (402ea0 <main+0x188>)
  402d1e:	4798      	blx	r3
	board_init();
  402d20:	4b60      	ldr	r3, [pc, #384]	; (402ea4 <main+0x18c>)
  402d22:	4798      	blx	r3
	
	/* Configura Leds */
	LED_init(LED_PIO, LED_PIO_ID,LED_PIN_MASK,0);
  402d24:	4e60      	ldr	r6, [pc, #384]	; (402ea8 <main+0x190>)
  402d26:	2300      	movs	r3, #0
  402d28:	f44f 7280 	mov.w	r2, #256	; 0x100
  402d2c:	210c      	movs	r1, #12
  402d2e:	4630      	mov	r0, r6
  402d30:	4c5e      	ldr	r4, [pc, #376]	; (402eac <main+0x194>)
  402d32:	47a0      	blx	r4
	LED_init(LED1_PIO, LED1_PIO_ID, LED1_PIN_MASK,0);
  402d34:	4d5e      	ldr	r5, [pc, #376]	; (402eb0 <main+0x198>)
  402d36:	2300      	movs	r3, #0
  402d38:	2201      	movs	r2, #1
  402d3a:	210a      	movs	r1, #10
  402d3c:	4628      	mov	r0, r5
  402d3e:	47a0      	blx	r4
	LED_init(LED2_PIO, LED2_PIO_ID, LED2_PIN_MASK,0);
  402d40:	2300      	movs	r3, #0
  402d42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402d46:	210c      	movs	r1, #12
  402d48:	4630      	mov	r0, r6
  402d4a:	47a0      	blx	r4
	LED_init(LED3_PIO, LED3_PIO_ID, LED3_PIN_MASK,0);
  402d4c:	2300      	movs	r3, #0
  402d4e:	2204      	movs	r2, #4
  402d50:	210b      	movs	r1, #11
  402d52:	4858      	ldr	r0, [pc, #352]	; (402eb4 <main+0x19c>)
  402d54:	47a0      	blx	r4
	BUT_init(BUT_PIO,BUT_PIN_MASK,PIO_PULLUP | PIO_DEBOUNCE,BUT_PIO_ID);
  402d56:	230a      	movs	r3, #10
  402d58:	2209      	movs	r2, #9
  402d5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402d5e:	4628      	mov	r0, r5
  402d60:	4c55      	ldr	r4, [pc, #340]	; (402eb8 <main+0x1a0>)
  402d62:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  402d64:	4d55      	ldr	r5, [pc, #340]	; (402ebc <main+0x1a4>)
  402d66:	4b56      	ldr	r3, [pc, #344]	; (402ec0 <main+0x1a8>)
  402d68:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402d6a:	4a56      	ldr	r2, [pc, #344]	; (402ec4 <main+0x1ac>)
  402d6c:	4b56      	ldr	r3, [pc, #344]	; (402ec8 <main+0x1b0>)
  402d6e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402d70:	4a56      	ldr	r2, [pc, #344]	; (402ecc <main+0x1b4>)
  402d72:	4b57      	ldr	r3, [pc, #348]	; (402ed0 <main+0x1b8>)
  402d74:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  402d76:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402d7a:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  402d7c:	23c0      	movs	r3, #192	; 0xc0
  402d7e:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  402d80:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402d84:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  402d86:	2400      	movs	r4, #0
  402d88:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402d8a:	9408      	str	r4, [sp, #32]
  402d8c:	200e      	movs	r0, #14
  402d8e:	4b51      	ldr	r3, [pc, #324]	; (402ed4 <main+0x1bc>)
  402d90:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  402d92:	4a51      	ldr	r2, [pc, #324]	; (402ed8 <main+0x1c0>)
  402d94:	a904      	add	r1, sp, #16
  402d96:	4628      	mov	r0, r5
  402d98:	4b50      	ldr	r3, [pc, #320]	; (402edc <main+0x1c4>)
  402d9a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  402d9c:	4628      	mov	r0, r5
  402d9e:	4b50      	ldr	r3, [pc, #320]	; (402ee0 <main+0x1c8>)
  402da0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402da2:	4628      	mov	r0, r5
  402da4:	4b4f      	ldr	r3, [pc, #316]	; (402ee4 <main+0x1cc>)
  402da6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402da8:	4e4f      	ldr	r6, [pc, #316]	; (402ee8 <main+0x1d0>)
  402daa:	6833      	ldr	r3, [r6, #0]
  402dac:	4621      	mov	r1, r4
  402dae:	6898      	ldr	r0, [r3, #8]
  402db0:	4d4e      	ldr	r5, [pc, #312]	; (402eec <main+0x1d4>)
  402db2:	47a8      	blx	r5
	setbuf(stdin, NULL);
  402db4:	6833      	ldr	r3, [r6, #0]
  402db6:	4621      	mov	r1, r4
  402db8:	6858      	ldr	r0, [r3, #4]
  402dba:	47a8      	blx	r5
	setbuf(stdout, NULL);
  402dbc:	6833      	ldr	r3, [r6, #0]
  402dbe:	4621      	mov	r1, r4
  402dc0:	6898      	ldr	r0, [r3, #8]
  402dc2:	47a8      	blx	r5

	/* Initialize the console uart */
	configure_console();

	/* Output demo information. */
	printf("-- Freertos Example --\n\r");
  402dc4:	484a      	ldr	r0, [pc, #296]	; (402ef0 <main+0x1d8>)
  402dc6:	4d4b      	ldr	r5, [pc, #300]	; (402ef4 <main+0x1dc>)
  402dc8:	47a8      	blx	r5
	printf("-- %s\n\r", BOARD_NAME);
  402dca:	494b      	ldr	r1, [pc, #300]	; (402ef8 <main+0x1e0>)
  402dcc:	484b      	ldr	r0, [pc, #300]	; (402efc <main+0x1e4>)
  402dce:	47a8      	blx	r5
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  402dd0:	4a4b      	ldr	r2, [pc, #300]	; (402f00 <main+0x1e8>)
  402dd2:	494c      	ldr	r1, [pc, #304]	; (402f04 <main+0x1ec>)
  402dd4:	484c      	ldr	r0, [pc, #304]	; (402f08 <main+0x1f0>)
  402dd6:	47a8      	blx	r5


	/* Create task to monitor processor activity */
	if (xTaskCreate(task_monitor, "Monitor", TASK_MONITOR_STACK_SIZE, NULL,
  402dd8:	9403      	str	r4, [sp, #12]
  402dda:	9402      	str	r4, [sp, #8]
  402ddc:	9401      	str	r4, [sp, #4]
  402dde:	9400      	str	r4, [sp, #0]
  402de0:	4623      	mov	r3, r4
  402de2:	f44f 7200 	mov.w	r2, #512	; 0x200
  402de6:	4949      	ldr	r1, [pc, #292]	; (402f0c <main+0x1f4>)
  402de8:	4849      	ldr	r0, [pc, #292]	; (402f10 <main+0x1f8>)
  402dea:	4c4a      	ldr	r4, [pc, #296]	; (402f14 <main+0x1fc>)
  402dec:	47a0      	blx	r4
  402dee:	2801      	cmp	r0, #1
  402df0:	d001      	beq.n	402df6 <main+0xde>
			TASK_MONITOR_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create Monitor task\r\n");
  402df2:	4849      	ldr	r0, [pc, #292]	; (402f18 <main+0x200>)
  402df4:	47a8      	blx	r5
	}

	/* Create task to make led blink */
	if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL,
  402df6:	2300      	movs	r3, #0
  402df8:	9303      	str	r3, [sp, #12]
  402dfa:	9302      	str	r3, [sp, #8]
  402dfc:	9301      	str	r3, [sp, #4]
  402dfe:	9300      	str	r3, [sp, #0]
  402e00:	f44f 7280 	mov.w	r2, #256	; 0x100
  402e04:	4945      	ldr	r1, [pc, #276]	; (402f1c <main+0x204>)
  402e06:	4846      	ldr	r0, [pc, #280]	; (402f20 <main+0x208>)
  402e08:	4c42      	ldr	r4, [pc, #264]	; (402f14 <main+0x1fc>)
  402e0a:	47a0      	blx	r4
  402e0c:	2801      	cmp	r0, #1
  402e0e:	d002      	beq.n	402e16 <main+0xfe>
			TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led task\r\n");
  402e10:	4844      	ldr	r0, [pc, #272]	; (402f24 <main+0x20c>)
  402e12:	4b38      	ldr	r3, [pc, #224]	; (402ef4 <main+0x1dc>)
  402e14:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_led1, "Led1", TASK_LED_STACK_SIZE, NULL,
  402e16:	2300      	movs	r3, #0
  402e18:	9303      	str	r3, [sp, #12]
  402e1a:	9302      	str	r3, [sp, #8]
  402e1c:	9301      	str	r3, [sp, #4]
  402e1e:	9300      	str	r3, [sp, #0]
  402e20:	f44f 7280 	mov.w	r2, #256	; 0x100
  402e24:	4940      	ldr	r1, [pc, #256]	; (402f28 <main+0x210>)
  402e26:	4841      	ldr	r0, [pc, #260]	; (402f2c <main+0x214>)
  402e28:	4c3a      	ldr	r4, [pc, #232]	; (402f14 <main+0x1fc>)
  402e2a:	47a0      	blx	r4
  402e2c:	2801      	cmp	r0, #1
  402e2e:	d002      	beq.n	402e36 <main+0x11e>
	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led1 task\r\n");
  402e30:	483f      	ldr	r0, [pc, #252]	; (402f30 <main+0x218>)
  402e32:	4b30      	ldr	r3, [pc, #192]	; (402ef4 <main+0x1dc>)
  402e34:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_led2, "Led2", TASK_LED_STACK_SIZE, NULL,
  402e36:	2300      	movs	r3, #0
  402e38:	9303      	str	r3, [sp, #12]
  402e3a:	9302      	str	r3, [sp, #8]
  402e3c:	9301      	str	r3, [sp, #4]
  402e3e:	9300      	str	r3, [sp, #0]
  402e40:	f44f 7280 	mov.w	r2, #256	; 0x100
  402e44:	493b      	ldr	r1, [pc, #236]	; (402f34 <main+0x21c>)
  402e46:	483c      	ldr	r0, [pc, #240]	; (402f38 <main+0x220>)
  402e48:	4c32      	ldr	r4, [pc, #200]	; (402f14 <main+0x1fc>)
  402e4a:	47a0      	blx	r4
  402e4c:	2801      	cmp	r0, #1
  402e4e:	d002      	beq.n	402e56 <main+0x13e>
		TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
			printf("Failed to create test led2 task\r\n");
  402e50:	483a      	ldr	r0, [pc, #232]	; (402f3c <main+0x224>)
  402e52:	4b28      	ldr	r3, [pc, #160]	; (402ef4 <main+0x1dc>)
  402e54:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_led3, "Led3", TASK_LED_STACK_SIZE, NULL,
  402e56:	2300      	movs	r3, #0
  402e58:	9303      	str	r3, [sp, #12]
  402e5a:	9302      	str	r3, [sp, #8]
  402e5c:	9301      	str	r3, [sp, #4]
  402e5e:	9300      	str	r3, [sp, #0]
  402e60:	f44f 7280 	mov.w	r2, #256	; 0x100
  402e64:	4936      	ldr	r1, [pc, #216]	; (402f40 <main+0x228>)
  402e66:	4837      	ldr	r0, [pc, #220]	; (402f44 <main+0x22c>)
  402e68:	4c2a      	ldr	r4, [pc, #168]	; (402f14 <main+0x1fc>)
  402e6a:	47a0      	blx	r4
  402e6c:	2801      	cmp	r0, #1
  402e6e:	d002      	beq.n	402e76 <main+0x15e>
	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led3 task\r\n");
  402e70:	4835      	ldr	r0, [pc, #212]	; (402f48 <main+0x230>)
  402e72:	4b20      	ldr	r3, [pc, #128]	; (402ef4 <main+0x1dc>)
  402e74:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_but, "But", TASK_LED_STACK_SIZE, NULL,
  402e76:	2300      	movs	r3, #0
  402e78:	9303      	str	r3, [sp, #12]
  402e7a:	9302      	str	r3, [sp, #8]
  402e7c:	9301      	str	r3, [sp, #4]
  402e7e:	9300      	str	r3, [sp, #0]
  402e80:	f44f 7280 	mov.w	r2, #256	; 0x100
  402e84:	4931      	ldr	r1, [pc, #196]	; (402f4c <main+0x234>)
  402e86:	4832      	ldr	r0, [pc, #200]	; (402f50 <main+0x238>)
  402e88:	4c22      	ldr	r4, [pc, #136]	; (402f14 <main+0x1fc>)
  402e8a:	47a0      	blx	r4
  402e8c:	2801      	cmp	r0, #1
  402e8e:	d002      	beq.n	402e96 <main+0x17e>
	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test BUT task\r\n");
  402e90:	4830      	ldr	r0, [pc, #192]	; (402f54 <main+0x23c>)
  402e92:	4b18      	ldr	r3, [pc, #96]	; (402ef4 <main+0x1dc>)
  402e94:	4798      	blx	r3
	}
	
	

	/* Start the scheduler. */
	vTaskStartScheduler();
  402e96:	4b30      	ldr	r3, [pc, #192]	; (402f58 <main+0x240>)
  402e98:	4798      	blx	r3

	/* Will only get here if there was insufficient memory to create the idle task. */
	return 0;
}
  402e9a:	2000      	movs	r0, #0
  402e9c:	b00a      	add	sp, #40	; 0x28
  402e9e:	bd70      	pop	{r4, r5, r6, pc}
  402ea0:	004001ad 	.word	0x004001ad
  402ea4:	004002a9 	.word	0x004002a9
  402ea8:	400e1200 	.word	0x400e1200
  402eac:	00402bdd 	.word	0x00402bdd
  402eb0:	400e0e00 	.word	0x400e0e00
  402eb4:	400e1000 	.word	0x400e1000
  402eb8:	00402c09 	.word	0x00402c09
  402ebc:	40028000 	.word	0x40028000
  402ec0:	20400cc4 	.word	0x20400cc4
  402ec4:	00402b09 	.word	0x00402b09
  402ec8:	20400cc0 	.word	0x20400cc0
  402ecc:	00402a2d 	.word	0x00402a2d
  402ed0:	20400cbc 	.word	0x20400cbc
  402ed4:	004006a9 	.word	0x004006a9
  402ed8:	08f0d180 	.word	0x08f0d180
  402edc:	004007a5 	.word	0x004007a5
  402ee0:	004007f9 	.word	0x004007f9
  402ee4:	004007ff 	.word	0x004007ff
  402ee8:	2040000c 	.word	0x2040000c
  402eec:	00403751 	.word	0x00403751
  402ef0:	004092cc 	.word	0x004092cc
  402ef4:	00402fad 	.word	0x00402fad
  402ef8:	004092e8 	.word	0x004092e8
  402efc:	004092f4 	.word	0x004092f4
  402f00:	004092fc 	.word	0x004092fc
  402f04:	00409308 	.word	0x00409308
  402f08:	00409314 	.word	0x00409314
  402f0c:	0040932c 	.word	0x0040932c
  402f10:	004029ed 	.word	0x004029ed
  402f14:	00401845 	.word	0x00401845
  402f18:	00409334 	.word	0x00409334
  402f1c:	00409354 	.word	0x00409354
  402f20:	00402cf5 	.word	0x00402cf5
  402f24:	00409358 	.word	0x00409358
  402f28:	0040937c 	.word	0x0040937c
  402f2c:	00402cd1 	.word	0x00402cd1
  402f30:	00409384 	.word	0x00409384
  402f34:	004093a8 	.word	0x004093a8
  402f38:	00402cad 	.word	0x00402cad
  402f3c:	004093b0 	.word	0x004093b0
  402f40:	004093d4 	.word	0x004093d4
  402f44:	00402c89 	.word	0x00402c89
  402f48:	004093dc 	.word	0x004093dc
  402f4c:	00409400 	.word	0x00409400
  402f50:	004029b5 	.word	0x004029b5
  402f54:	00409404 	.word	0x00409404
  402f58:	00401a79 	.word	0x00401a79

00402f5c <__libc_init_array>:
  402f5c:	b570      	push	{r4, r5, r6, lr}
  402f5e:	4e0f      	ldr	r6, [pc, #60]	; (402f9c <__libc_init_array+0x40>)
  402f60:	4d0f      	ldr	r5, [pc, #60]	; (402fa0 <__libc_init_array+0x44>)
  402f62:	1b76      	subs	r6, r6, r5
  402f64:	10b6      	asrs	r6, r6, #2
  402f66:	bf18      	it	ne
  402f68:	2400      	movne	r4, #0
  402f6a:	d005      	beq.n	402f78 <__libc_init_array+0x1c>
  402f6c:	3401      	adds	r4, #1
  402f6e:	f855 3b04 	ldr.w	r3, [r5], #4
  402f72:	4798      	blx	r3
  402f74:	42a6      	cmp	r6, r4
  402f76:	d1f9      	bne.n	402f6c <__libc_init_array+0x10>
  402f78:	4e0a      	ldr	r6, [pc, #40]	; (402fa4 <__libc_init_array+0x48>)
  402f7a:	4d0b      	ldr	r5, [pc, #44]	; (402fa8 <__libc_init_array+0x4c>)
  402f7c:	1b76      	subs	r6, r6, r5
  402f7e:	f006 fbbf 	bl	409700 <_init>
  402f82:	10b6      	asrs	r6, r6, #2
  402f84:	bf18      	it	ne
  402f86:	2400      	movne	r4, #0
  402f88:	d006      	beq.n	402f98 <__libc_init_array+0x3c>
  402f8a:	3401      	adds	r4, #1
  402f8c:	f855 3b04 	ldr.w	r3, [r5], #4
  402f90:	4798      	blx	r3
  402f92:	42a6      	cmp	r6, r4
  402f94:	d1f9      	bne.n	402f8a <__libc_init_array+0x2e>
  402f96:	bd70      	pop	{r4, r5, r6, pc}
  402f98:	bd70      	pop	{r4, r5, r6, pc}
  402f9a:	bf00      	nop
  402f9c:	0040970c 	.word	0x0040970c
  402fa0:	0040970c 	.word	0x0040970c
  402fa4:	00409714 	.word	0x00409714
  402fa8:	0040970c 	.word	0x0040970c

00402fac <iprintf>:
  402fac:	b40f      	push	{r0, r1, r2, r3}
  402fae:	b500      	push	{lr}
  402fb0:	4907      	ldr	r1, [pc, #28]	; (402fd0 <iprintf+0x24>)
  402fb2:	b083      	sub	sp, #12
  402fb4:	ab04      	add	r3, sp, #16
  402fb6:	6808      	ldr	r0, [r1, #0]
  402fb8:	f853 2b04 	ldr.w	r2, [r3], #4
  402fbc:	6881      	ldr	r1, [r0, #8]
  402fbe:	9301      	str	r3, [sp, #4]
  402fc0:	f001 ffd2 	bl	404f68 <_vfiprintf_r>
  402fc4:	b003      	add	sp, #12
  402fc6:	f85d eb04 	ldr.w	lr, [sp], #4
  402fca:	b004      	add	sp, #16
  402fcc:	4770      	bx	lr
  402fce:	bf00      	nop
  402fd0:	2040000c 	.word	0x2040000c

00402fd4 <malloc>:
  402fd4:	4b02      	ldr	r3, [pc, #8]	; (402fe0 <malloc+0xc>)
  402fd6:	4601      	mov	r1, r0
  402fd8:	6818      	ldr	r0, [r3, #0]
  402fda:	f000 b80b 	b.w	402ff4 <_malloc_r>
  402fde:	bf00      	nop
  402fe0:	2040000c 	.word	0x2040000c

00402fe4 <free>:
  402fe4:	4b02      	ldr	r3, [pc, #8]	; (402ff0 <free+0xc>)
  402fe6:	4601      	mov	r1, r0
  402fe8:	6818      	ldr	r0, [r3, #0]
  402fea:	f004 b831 	b.w	407050 <_free_r>
  402fee:	bf00      	nop
  402ff0:	2040000c 	.word	0x2040000c

00402ff4 <_malloc_r>:
  402ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ff8:	f101 060b 	add.w	r6, r1, #11
  402ffc:	2e16      	cmp	r6, #22
  402ffe:	b083      	sub	sp, #12
  403000:	4605      	mov	r5, r0
  403002:	f240 809e 	bls.w	403142 <_malloc_r+0x14e>
  403006:	f036 0607 	bics.w	r6, r6, #7
  40300a:	f100 80bd 	bmi.w	403188 <_malloc_r+0x194>
  40300e:	42b1      	cmp	r1, r6
  403010:	f200 80ba 	bhi.w	403188 <_malloc_r+0x194>
  403014:	f000 fb86 	bl	403724 <__malloc_lock>
  403018:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40301c:	f0c0 8293 	bcc.w	403546 <_malloc_r+0x552>
  403020:	0a73      	lsrs	r3, r6, #9
  403022:	f000 80b8 	beq.w	403196 <_malloc_r+0x1a2>
  403026:	2b04      	cmp	r3, #4
  403028:	f200 8179 	bhi.w	40331e <_malloc_r+0x32a>
  40302c:	09b3      	lsrs	r3, r6, #6
  40302e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403032:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403036:	00c3      	lsls	r3, r0, #3
  403038:	4fbf      	ldr	r7, [pc, #764]	; (403338 <_malloc_r+0x344>)
  40303a:	443b      	add	r3, r7
  40303c:	f1a3 0108 	sub.w	r1, r3, #8
  403040:	685c      	ldr	r4, [r3, #4]
  403042:	42a1      	cmp	r1, r4
  403044:	d106      	bne.n	403054 <_malloc_r+0x60>
  403046:	e00c      	b.n	403062 <_malloc_r+0x6e>
  403048:	2a00      	cmp	r2, #0
  40304a:	f280 80aa 	bge.w	4031a2 <_malloc_r+0x1ae>
  40304e:	68e4      	ldr	r4, [r4, #12]
  403050:	42a1      	cmp	r1, r4
  403052:	d006      	beq.n	403062 <_malloc_r+0x6e>
  403054:	6863      	ldr	r3, [r4, #4]
  403056:	f023 0303 	bic.w	r3, r3, #3
  40305a:	1b9a      	subs	r2, r3, r6
  40305c:	2a0f      	cmp	r2, #15
  40305e:	ddf3      	ble.n	403048 <_malloc_r+0x54>
  403060:	4670      	mov	r0, lr
  403062:	693c      	ldr	r4, [r7, #16]
  403064:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40334c <_malloc_r+0x358>
  403068:	4574      	cmp	r4, lr
  40306a:	f000 81ab 	beq.w	4033c4 <_malloc_r+0x3d0>
  40306e:	6863      	ldr	r3, [r4, #4]
  403070:	f023 0303 	bic.w	r3, r3, #3
  403074:	1b9a      	subs	r2, r3, r6
  403076:	2a0f      	cmp	r2, #15
  403078:	f300 8190 	bgt.w	40339c <_malloc_r+0x3a8>
  40307c:	2a00      	cmp	r2, #0
  40307e:	f8c7 e014 	str.w	lr, [r7, #20]
  403082:	f8c7 e010 	str.w	lr, [r7, #16]
  403086:	f280 809d 	bge.w	4031c4 <_malloc_r+0x1d0>
  40308a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40308e:	f080 8161 	bcs.w	403354 <_malloc_r+0x360>
  403092:	08db      	lsrs	r3, r3, #3
  403094:	f103 0c01 	add.w	ip, r3, #1
  403098:	1099      	asrs	r1, r3, #2
  40309a:	687a      	ldr	r2, [r7, #4]
  40309c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4030a0:	f8c4 8008 	str.w	r8, [r4, #8]
  4030a4:	2301      	movs	r3, #1
  4030a6:	408b      	lsls	r3, r1
  4030a8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4030ac:	4313      	orrs	r3, r2
  4030ae:	3908      	subs	r1, #8
  4030b0:	60e1      	str	r1, [r4, #12]
  4030b2:	607b      	str	r3, [r7, #4]
  4030b4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4030b8:	f8c8 400c 	str.w	r4, [r8, #12]
  4030bc:	1082      	asrs	r2, r0, #2
  4030be:	2401      	movs	r4, #1
  4030c0:	4094      	lsls	r4, r2
  4030c2:	429c      	cmp	r4, r3
  4030c4:	f200 808b 	bhi.w	4031de <_malloc_r+0x1ea>
  4030c8:	421c      	tst	r4, r3
  4030ca:	d106      	bne.n	4030da <_malloc_r+0xe6>
  4030cc:	f020 0003 	bic.w	r0, r0, #3
  4030d0:	0064      	lsls	r4, r4, #1
  4030d2:	421c      	tst	r4, r3
  4030d4:	f100 0004 	add.w	r0, r0, #4
  4030d8:	d0fa      	beq.n	4030d0 <_malloc_r+0xdc>
  4030da:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4030de:	46cc      	mov	ip, r9
  4030e0:	4680      	mov	r8, r0
  4030e2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4030e6:	459c      	cmp	ip, r3
  4030e8:	d107      	bne.n	4030fa <_malloc_r+0x106>
  4030ea:	e16d      	b.n	4033c8 <_malloc_r+0x3d4>
  4030ec:	2a00      	cmp	r2, #0
  4030ee:	f280 817b 	bge.w	4033e8 <_malloc_r+0x3f4>
  4030f2:	68db      	ldr	r3, [r3, #12]
  4030f4:	459c      	cmp	ip, r3
  4030f6:	f000 8167 	beq.w	4033c8 <_malloc_r+0x3d4>
  4030fa:	6859      	ldr	r1, [r3, #4]
  4030fc:	f021 0103 	bic.w	r1, r1, #3
  403100:	1b8a      	subs	r2, r1, r6
  403102:	2a0f      	cmp	r2, #15
  403104:	ddf2      	ble.n	4030ec <_malloc_r+0xf8>
  403106:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40310a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40310e:	9300      	str	r3, [sp, #0]
  403110:	199c      	adds	r4, r3, r6
  403112:	4628      	mov	r0, r5
  403114:	f046 0601 	orr.w	r6, r6, #1
  403118:	f042 0501 	orr.w	r5, r2, #1
  40311c:	605e      	str	r6, [r3, #4]
  40311e:	f8c8 c00c 	str.w	ip, [r8, #12]
  403122:	f8cc 8008 	str.w	r8, [ip, #8]
  403126:	617c      	str	r4, [r7, #20]
  403128:	613c      	str	r4, [r7, #16]
  40312a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40312e:	f8c4 e008 	str.w	lr, [r4, #8]
  403132:	6065      	str	r5, [r4, #4]
  403134:	505a      	str	r2, [r3, r1]
  403136:	f000 faf7 	bl	403728 <__malloc_unlock>
  40313a:	9b00      	ldr	r3, [sp, #0]
  40313c:	f103 0408 	add.w	r4, r3, #8
  403140:	e01e      	b.n	403180 <_malloc_r+0x18c>
  403142:	2910      	cmp	r1, #16
  403144:	d820      	bhi.n	403188 <_malloc_r+0x194>
  403146:	f000 faed 	bl	403724 <__malloc_lock>
  40314a:	2610      	movs	r6, #16
  40314c:	2318      	movs	r3, #24
  40314e:	2002      	movs	r0, #2
  403150:	4f79      	ldr	r7, [pc, #484]	; (403338 <_malloc_r+0x344>)
  403152:	443b      	add	r3, r7
  403154:	f1a3 0208 	sub.w	r2, r3, #8
  403158:	685c      	ldr	r4, [r3, #4]
  40315a:	4294      	cmp	r4, r2
  40315c:	f000 813d 	beq.w	4033da <_malloc_r+0x3e6>
  403160:	6863      	ldr	r3, [r4, #4]
  403162:	68e1      	ldr	r1, [r4, #12]
  403164:	68a6      	ldr	r6, [r4, #8]
  403166:	f023 0303 	bic.w	r3, r3, #3
  40316a:	4423      	add	r3, r4
  40316c:	4628      	mov	r0, r5
  40316e:	685a      	ldr	r2, [r3, #4]
  403170:	60f1      	str	r1, [r6, #12]
  403172:	f042 0201 	orr.w	r2, r2, #1
  403176:	608e      	str	r6, [r1, #8]
  403178:	605a      	str	r2, [r3, #4]
  40317a:	f000 fad5 	bl	403728 <__malloc_unlock>
  40317e:	3408      	adds	r4, #8
  403180:	4620      	mov	r0, r4
  403182:	b003      	add	sp, #12
  403184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403188:	2400      	movs	r4, #0
  40318a:	230c      	movs	r3, #12
  40318c:	4620      	mov	r0, r4
  40318e:	602b      	str	r3, [r5, #0]
  403190:	b003      	add	sp, #12
  403192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403196:	2040      	movs	r0, #64	; 0x40
  403198:	f44f 7300 	mov.w	r3, #512	; 0x200
  40319c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4031a0:	e74a      	b.n	403038 <_malloc_r+0x44>
  4031a2:	4423      	add	r3, r4
  4031a4:	68e1      	ldr	r1, [r4, #12]
  4031a6:	685a      	ldr	r2, [r3, #4]
  4031a8:	68a6      	ldr	r6, [r4, #8]
  4031aa:	f042 0201 	orr.w	r2, r2, #1
  4031ae:	60f1      	str	r1, [r6, #12]
  4031b0:	4628      	mov	r0, r5
  4031b2:	608e      	str	r6, [r1, #8]
  4031b4:	605a      	str	r2, [r3, #4]
  4031b6:	f000 fab7 	bl	403728 <__malloc_unlock>
  4031ba:	3408      	adds	r4, #8
  4031bc:	4620      	mov	r0, r4
  4031be:	b003      	add	sp, #12
  4031c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031c4:	4423      	add	r3, r4
  4031c6:	4628      	mov	r0, r5
  4031c8:	685a      	ldr	r2, [r3, #4]
  4031ca:	f042 0201 	orr.w	r2, r2, #1
  4031ce:	605a      	str	r2, [r3, #4]
  4031d0:	f000 faaa 	bl	403728 <__malloc_unlock>
  4031d4:	3408      	adds	r4, #8
  4031d6:	4620      	mov	r0, r4
  4031d8:	b003      	add	sp, #12
  4031da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031de:	68bc      	ldr	r4, [r7, #8]
  4031e0:	6863      	ldr	r3, [r4, #4]
  4031e2:	f023 0803 	bic.w	r8, r3, #3
  4031e6:	45b0      	cmp	r8, r6
  4031e8:	d304      	bcc.n	4031f4 <_malloc_r+0x200>
  4031ea:	eba8 0306 	sub.w	r3, r8, r6
  4031ee:	2b0f      	cmp	r3, #15
  4031f0:	f300 8085 	bgt.w	4032fe <_malloc_r+0x30a>
  4031f4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403350 <_malloc_r+0x35c>
  4031f8:	4b50      	ldr	r3, [pc, #320]	; (40333c <_malloc_r+0x348>)
  4031fa:	f8d9 2000 	ldr.w	r2, [r9]
  4031fe:	681b      	ldr	r3, [r3, #0]
  403200:	3201      	adds	r2, #1
  403202:	4433      	add	r3, r6
  403204:	eb04 0a08 	add.w	sl, r4, r8
  403208:	f000 8155 	beq.w	4034b6 <_malloc_r+0x4c2>
  40320c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403210:	330f      	adds	r3, #15
  403212:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403216:	f02b 0b0f 	bic.w	fp, fp, #15
  40321a:	4659      	mov	r1, fp
  40321c:	4628      	mov	r0, r5
  40321e:	f000 fa85 	bl	40372c <_sbrk_r>
  403222:	1c41      	adds	r1, r0, #1
  403224:	4602      	mov	r2, r0
  403226:	f000 80fc 	beq.w	403422 <_malloc_r+0x42e>
  40322a:	4582      	cmp	sl, r0
  40322c:	f200 80f7 	bhi.w	40341e <_malloc_r+0x42a>
  403230:	4b43      	ldr	r3, [pc, #268]	; (403340 <_malloc_r+0x34c>)
  403232:	6819      	ldr	r1, [r3, #0]
  403234:	4459      	add	r1, fp
  403236:	6019      	str	r1, [r3, #0]
  403238:	f000 814d 	beq.w	4034d6 <_malloc_r+0x4e2>
  40323c:	f8d9 0000 	ldr.w	r0, [r9]
  403240:	3001      	adds	r0, #1
  403242:	bf1b      	ittet	ne
  403244:	eba2 0a0a 	subne.w	sl, r2, sl
  403248:	4451      	addne	r1, sl
  40324a:	f8c9 2000 	streq.w	r2, [r9]
  40324e:	6019      	strne	r1, [r3, #0]
  403250:	f012 0107 	ands.w	r1, r2, #7
  403254:	f000 8115 	beq.w	403482 <_malloc_r+0x48e>
  403258:	f1c1 0008 	rsb	r0, r1, #8
  40325c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403260:	4402      	add	r2, r0
  403262:	3108      	adds	r1, #8
  403264:	eb02 090b 	add.w	r9, r2, fp
  403268:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40326c:	eba1 0909 	sub.w	r9, r1, r9
  403270:	4649      	mov	r1, r9
  403272:	4628      	mov	r0, r5
  403274:	9301      	str	r3, [sp, #4]
  403276:	9200      	str	r2, [sp, #0]
  403278:	f000 fa58 	bl	40372c <_sbrk_r>
  40327c:	1c43      	adds	r3, r0, #1
  40327e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403282:	f000 8143 	beq.w	40350c <_malloc_r+0x518>
  403286:	1a80      	subs	r0, r0, r2
  403288:	4448      	add	r0, r9
  40328a:	f040 0001 	orr.w	r0, r0, #1
  40328e:	6819      	ldr	r1, [r3, #0]
  403290:	60ba      	str	r2, [r7, #8]
  403292:	4449      	add	r1, r9
  403294:	42bc      	cmp	r4, r7
  403296:	6050      	str	r0, [r2, #4]
  403298:	6019      	str	r1, [r3, #0]
  40329a:	d017      	beq.n	4032cc <_malloc_r+0x2d8>
  40329c:	f1b8 0f0f 	cmp.w	r8, #15
  4032a0:	f240 80fb 	bls.w	40349a <_malloc_r+0x4a6>
  4032a4:	6860      	ldr	r0, [r4, #4]
  4032a6:	f1a8 020c 	sub.w	r2, r8, #12
  4032aa:	f022 0207 	bic.w	r2, r2, #7
  4032ae:	eb04 0e02 	add.w	lr, r4, r2
  4032b2:	f000 0001 	and.w	r0, r0, #1
  4032b6:	f04f 0c05 	mov.w	ip, #5
  4032ba:	4310      	orrs	r0, r2
  4032bc:	2a0f      	cmp	r2, #15
  4032be:	6060      	str	r0, [r4, #4]
  4032c0:	f8ce c004 	str.w	ip, [lr, #4]
  4032c4:	f8ce c008 	str.w	ip, [lr, #8]
  4032c8:	f200 8117 	bhi.w	4034fa <_malloc_r+0x506>
  4032cc:	4b1d      	ldr	r3, [pc, #116]	; (403344 <_malloc_r+0x350>)
  4032ce:	68bc      	ldr	r4, [r7, #8]
  4032d0:	681a      	ldr	r2, [r3, #0]
  4032d2:	4291      	cmp	r1, r2
  4032d4:	bf88      	it	hi
  4032d6:	6019      	strhi	r1, [r3, #0]
  4032d8:	4b1b      	ldr	r3, [pc, #108]	; (403348 <_malloc_r+0x354>)
  4032da:	681a      	ldr	r2, [r3, #0]
  4032dc:	4291      	cmp	r1, r2
  4032de:	6862      	ldr	r2, [r4, #4]
  4032e0:	bf88      	it	hi
  4032e2:	6019      	strhi	r1, [r3, #0]
  4032e4:	f022 0203 	bic.w	r2, r2, #3
  4032e8:	4296      	cmp	r6, r2
  4032ea:	eba2 0306 	sub.w	r3, r2, r6
  4032ee:	d801      	bhi.n	4032f4 <_malloc_r+0x300>
  4032f0:	2b0f      	cmp	r3, #15
  4032f2:	dc04      	bgt.n	4032fe <_malloc_r+0x30a>
  4032f4:	4628      	mov	r0, r5
  4032f6:	f000 fa17 	bl	403728 <__malloc_unlock>
  4032fa:	2400      	movs	r4, #0
  4032fc:	e740      	b.n	403180 <_malloc_r+0x18c>
  4032fe:	19a2      	adds	r2, r4, r6
  403300:	f043 0301 	orr.w	r3, r3, #1
  403304:	f046 0601 	orr.w	r6, r6, #1
  403308:	6066      	str	r6, [r4, #4]
  40330a:	4628      	mov	r0, r5
  40330c:	60ba      	str	r2, [r7, #8]
  40330e:	6053      	str	r3, [r2, #4]
  403310:	f000 fa0a 	bl	403728 <__malloc_unlock>
  403314:	3408      	adds	r4, #8
  403316:	4620      	mov	r0, r4
  403318:	b003      	add	sp, #12
  40331a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40331e:	2b14      	cmp	r3, #20
  403320:	d971      	bls.n	403406 <_malloc_r+0x412>
  403322:	2b54      	cmp	r3, #84	; 0x54
  403324:	f200 80a3 	bhi.w	40346e <_malloc_r+0x47a>
  403328:	0b33      	lsrs	r3, r6, #12
  40332a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40332e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403332:	00c3      	lsls	r3, r0, #3
  403334:	e680      	b.n	403038 <_malloc_r+0x44>
  403336:	bf00      	nop
  403338:	20400438 	.word	0x20400438
  40333c:	20400cb8 	.word	0x20400cb8
  403340:	20400c88 	.word	0x20400c88
  403344:	20400cb0 	.word	0x20400cb0
  403348:	20400cb4 	.word	0x20400cb4
  40334c:	20400440 	.word	0x20400440
  403350:	20400840 	.word	0x20400840
  403354:	0a5a      	lsrs	r2, r3, #9
  403356:	2a04      	cmp	r2, #4
  403358:	d95b      	bls.n	403412 <_malloc_r+0x41e>
  40335a:	2a14      	cmp	r2, #20
  40335c:	f200 80ae 	bhi.w	4034bc <_malloc_r+0x4c8>
  403360:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403364:	00c9      	lsls	r1, r1, #3
  403366:	325b      	adds	r2, #91	; 0x5b
  403368:	eb07 0c01 	add.w	ip, r7, r1
  40336c:	5879      	ldr	r1, [r7, r1]
  40336e:	f1ac 0c08 	sub.w	ip, ip, #8
  403372:	458c      	cmp	ip, r1
  403374:	f000 8088 	beq.w	403488 <_malloc_r+0x494>
  403378:	684a      	ldr	r2, [r1, #4]
  40337a:	f022 0203 	bic.w	r2, r2, #3
  40337e:	4293      	cmp	r3, r2
  403380:	d273      	bcs.n	40346a <_malloc_r+0x476>
  403382:	6889      	ldr	r1, [r1, #8]
  403384:	458c      	cmp	ip, r1
  403386:	d1f7      	bne.n	403378 <_malloc_r+0x384>
  403388:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40338c:	687b      	ldr	r3, [r7, #4]
  40338e:	60e2      	str	r2, [r4, #12]
  403390:	f8c4 c008 	str.w	ip, [r4, #8]
  403394:	6094      	str	r4, [r2, #8]
  403396:	f8cc 400c 	str.w	r4, [ip, #12]
  40339a:	e68f      	b.n	4030bc <_malloc_r+0xc8>
  40339c:	19a1      	adds	r1, r4, r6
  40339e:	f046 0c01 	orr.w	ip, r6, #1
  4033a2:	f042 0601 	orr.w	r6, r2, #1
  4033a6:	f8c4 c004 	str.w	ip, [r4, #4]
  4033aa:	4628      	mov	r0, r5
  4033ac:	6179      	str	r1, [r7, #20]
  4033ae:	6139      	str	r1, [r7, #16]
  4033b0:	f8c1 e00c 	str.w	lr, [r1, #12]
  4033b4:	f8c1 e008 	str.w	lr, [r1, #8]
  4033b8:	604e      	str	r6, [r1, #4]
  4033ba:	50e2      	str	r2, [r4, r3]
  4033bc:	f000 f9b4 	bl	403728 <__malloc_unlock>
  4033c0:	3408      	adds	r4, #8
  4033c2:	e6dd      	b.n	403180 <_malloc_r+0x18c>
  4033c4:	687b      	ldr	r3, [r7, #4]
  4033c6:	e679      	b.n	4030bc <_malloc_r+0xc8>
  4033c8:	f108 0801 	add.w	r8, r8, #1
  4033cc:	f018 0f03 	tst.w	r8, #3
  4033d0:	f10c 0c08 	add.w	ip, ip, #8
  4033d4:	f47f ae85 	bne.w	4030e2 <_malloc_r+0xee>
  4033d8:	e02d      	b.n	403436 <_malloc_r+0x442>
  4033da:	68dc      	ldr	r4, [r3, #12]
  4033dc:	42a3      	cmp	r3, r4
  4033de:	bf08      	it	eq
  4033e0:	3002      	addeq	r0, #2
  4033e2:	f43f ae3e 	beq.w	403062 <_malloc_r+0x6e>
  4033e6:	e6bb      	b.n	403160 <_malloc_r+0x16c>
  4033e8:	4419      	add	r1, r3
  4033ea:	461c      	mov	r4, r3
  4033ec:	684a      	ldr	r2, [r1, #4]
  4033ee:	68db      	ldr	r3, [r3, #12]
  4033f0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4033f4:	f042 0201 	orr.w	r2, r2, #1
  4033f8:	604a      	str	r2, [r1, #4]
  4033fa:	4628      	mov	r0, r5
  4033fc:	60f3      	str	r3, [r6, #12]
  4033fe:	609e      	str	r6, [r3, #8]
  403400:	f000 f992 	bl	403728 <__malloc_unlock>
  403404:	e6bc      	b.n	403180 <_malloc_r+0x18c>
  403406:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40340a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40340e:	00c3      	lsls	r3, r0, #3
  403410:	e612      	b.n	403038 <_malloc_r+0x44>
  403412:	099a      	lsrs	r2, r3, #6
  403414:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403418:	00c9      	lsls	r1, r1, #3
  40341a:	3238      	adds	r2, #56	; 0x38
  40341c:	e7a4      	b.n	403368 <_malloc_r+0x374>
  40341e:	42bc      	cmp	r4, r7
  403420:	d054      	beq.n	4034cc <_malloc_r+0x4d8>
  403422:	68bc      	ldr	r4, [r7, #8]
  403424:	6862      	ldr	r2, [r4, #4]
  403426:	f022 0203 	bic.w	r2, r2, #3
  40342a:	e75d      	b.n	4032e8 <_malloc_r+0x2f4>
  40342c:	f859 3908 	ldr.w	r3, [r9], #-8
  403430:	4599      	cmp	r9, r3
  403432:	f040 8086 	bne.w	403542 <_malloc_r+0x54e>
  403436:	f010 0f03 	tst.w	r0, #3
  40343a:	f100 30ff 	add.w	r0, r0, #4294967295
  40343e:	d1f5      	bne.n	40342c <_malloc_r+0x438>
  403440:	687b      	ldr	r3, [r7, #4]
  403442:	ea23 0304 	bic.w	r3, r3, r4
  403446:	607b      	str	r3, [r7, #4]
  403448:	0064      	lsls	r4, r4, #1
  40344a:	429c      	cmp	r4, r3
  40344c:	f63f aec7 	bhi.w	4031de <_malloc_r+0x1ea>
  403450:	2c00      	cmp	r4, #0
  403452:	f43f aec4 	beq.w	4031de <_malloc_r+0x1ea>
  403456:	421c      	tst	r4, r3
  403458:	4640      	mov	r0, r8
  40345a:	f47f ae3e 	bne.w	4030da <_malloc_r+0xe6>
  40345e:	0064      	lsls	r4, r4, #1
  403460:	421c      	tst	r4, r3
  403462:	f100 0004 	add.w	r0, r0, #4
  403466:	d0fa      	beq.n	40345e <_malloc_r+0x46a>
  403468:	e637      	b.n	4030da <_malloc_r+0xe6>
  40346a:	468c      	mov	ip, r1
  40346c:	e78c      	b.n	403388 <_malloc_r+0x394>
  40346e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403472:	d815      	bhi.n	4034a0 <_malloc_r+0x4ac>
  403474:	0bf3      	lsrs	r3, r6, #15
  403476:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40347a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40347e:	00c3      	lsls	r3, r0, #3
  403480:	e5da      	b.n	403038 <_malloc_r+0x44>
  403482:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403486:	e6ed      	b.n	403264 <_malloc_r+0x270>
  403488:	687b      	ldr	r3, [r7, #4]
  40348a:	1092      	asrs	r2, r2, #2
  40348c:	2101      	movs	r1, #1
  40348e:	fa01 f202 	lsl.w	r2, r1, r2
  403492:	4313      	orrs	r3, r2
  403494:	607b      	str	r3, [r7, #4]
  403496:	4662      	mov	r2, ip
  403498:	e779      	b.n	40338e <_malloc_r+0x39a>
  40349a:	2301      	movs	r3, #1
  40349c:	6053      	str	r3, [r2, #4]
  40349e:	e729      	b.n	4032f4 <_malloc_r+0x300>
  4034a0:	f240 5254 	movw	r2, #1364	; 0x554
  4034a4:	4293      	cmp	r3, r2
  4034a6:	d822      	bhi.n	4034ee <_malloc_r+0x4fa>
  4034a8:	0cb3      	lsrs	r3, r6, #18
  4034aa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4034ae:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4034b2:	00c3      	lsls	r3, r0, #3
  4034b4:	e5c0      	b.n	403038 <_malloc_r+0x44>
  4034b6:	f103 0b10 	add.w	fp, r3, #16
  4034ba:	e6ae      	b.n	40321a <_malloc_r+0x226>
  4034bc:	2a54      	cmp	r2, #84	; 0x54
  4034be:	d829      	bhi.n	403514 <_malloc_r+0x520>
  4034c0:	0b1a      	lsrs	r2, r3, #12
  4034c2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4034c6:	00c9      	lsls	r1, r1, #3
  4034c8:	326e      	adds	r2, #110	; 0x6e
  4034ca:	e74d      	b.n	403368 <_malloc_r+0x374>
  4034cc:	4b20      	ldr	r3, [pc, #128]	; (403550 <_malloc_r+0x55c>)
  4034ce:	6819      	ldr	r1, [r3, #0]
  4034d0:	4459      	add	r1, fp
  4034d2:	6019      	str	r1, [r3, #0]
  4034d4:	e6b2      	b.n	40323c <_malloc_r+0x248>
  4034d6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4034da:	2800      	cmp	r0, #0
  4034dc:	f47f aeae 	bne.w	40323c <_malloc_r+0x248>
  4034e0:	eb08 030b 	add.w	r3, r8, fp
  4034e4:	68ba      	ldr	r2, [r7, #8]
  4034e6:	f043 0301 	orr.w	r3, r3, #1
  4034ea:	6053      	str	r3, [r2, #4]
  4034ec:	e6ee      	b.n	4032cc <_malloc_r+0x2d8>
  4034ee:	207f      	movs	r0, #127	; 0x7f
  4034f0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4034f4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4034f8:	e59e      	b.n	403038 <_malloc_r+0x44>
  4034fa:	f104 0108 	add.w	r1, r4, #8
  4034fe:	4628      	mov	r0, r5
  403500:	9300      	str	r3, [sp, #0]
  403502:	f003 fda5 	bl	407050 <_free_r>
  403506:	9b00      	ldr	r3, [sp, #0]
  403508:	6819      	ldr	r1, [r3, #0]
  40350a:	e6df      	b.n	4032cc <_malloc_r+0x2d8>
  40350c:	2001      	movs	r0, #1
  40350e:	f04f 0900 	mov.w	r9, #0
  403512:	e6bc      	b.n	40328e <_malloc_r+0x29a>
  403514:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403518:	d805      	bhi.n	403526 <_malloc_r+0x532>
  40351a:	0bda      	lsrs	r2, r3, #15
  40351c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403520:	00c9      	lsls	r1, r1, #3
  403522:	3277      	adds	r2, #119	; 0x77
  403524:	e720      	b.n	403368 <_malloc_r+0x374>
  403526:	f240 5154 	movw	r1, #1364	; 0x554
  40352a:	428a      	cmp	r2, r1
  40352c:	d805      	bhi.n	40353a <_malloc_r+0x546>
  40352e:	0c9a      	lsrs	r2, r3, #18
  403530:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403534:	00c9      	lsls	r1, r1, #3
  403536:	327c      	adds	r2, #124	; 0x7c
  403538:	e716      	b.n	403368 <_malloc_r+0x374>
  40353a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40353e:	227e      	movs	r2, #126	; 0x7e
  403540:	e712      	b.n	403368 <_malloc_r+0x374>
  403542:	687b      	ldr	r3, [r7, #4]
  403544:	e780      	b.n	403448 <_malloc_r+0x454>
  403546:	08f0      	lsrs	r0, r6, #3
  403548:	f106 0308 	add.w	r3, r6, #8
  40354c:	e600      	b.n	403150 <_malloc_r+0x15c>
  40354e:	bf00      	nop
  403550:	20400c88 	.word	0x20400c88

00403554 <memcpy>:
  403554:	4684      	mov	ip, r0
  403556:	ea41 0300 	orr.w	r3, r1, r0
  40355a:	f013 0303 	ands.w	r3, r3, #3
  40355e:	d16d      	bne.n	40363c <memcpy+0xe8>
  403560:	3a40      	subs	r2, #64	; 0x40
  403562:	d341      	bcc.n	4035e8 <memcpy+0x94>
  403564:	f851 3b04 	ldr.w	r3, [r1], #4
  403568:	f840 3b04 	str.w	r3, [r0], #4
  40356c:	f851 3b04 	ldr.w	r3, [r1], #4
  403570:	f840 3b04 	str.w	r3, [r0], #4
  403574:	f851 3b04 	ldr.w	r3, [r1], #4
  403578:	f840 3b04 	str.w	r3, [r0], #4
  40357c:	f851 3b04 	ldr.w	r3, [r1], #4
  403580:	f840 3b04 	str.w	r3, [r0], #4
  403584:	f851 3b04 	ldr.w	r3, [r1], #4
  403588:	f840 3b04 	str.w	r3, [r0], #4
  40358c:	f851 3b04 	ldr.w	r3, [r1], #4
  403590:	f840 3b04 	str.w	r3, [r0], #4
  403594:	f851 3b04 	ldr.w	r3, [r1], #4
  403598:	f840 3b04 	str.w	r3, [r0], #4
  40359c:	f851 3b04 	ldr.w	r3, [r1], #4
  4035a0:	f840 3b04 	str.w	r3, [r0], #4
  4035a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4035a8:	f840 3b04 	str.w	r3, [r0], #4
  4035ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4035b0:	f840 3b04 	str.w	r3, [r0], #4
  4035b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4035b8:	f840 3b04 	str.w	r3, [r0], #4
  4035bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4035c0:	f840 3b04 	str.w	r3, [r0], #4
  4035c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4035c8:	f840 3b04 	str.w	r3, [r0], #4
  4035cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4035d0:	f840 3b04 	str.w	r3, [r0], #4
  4035d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4035d8:	f840 3b04 	str.w	r3, [r0], #4
  4035dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4035e0:	f840 3b04 	str.w	r3, [r0], #4
  4035e4:	3a40      	subs	r2, #64	; 0x40
  4035e6:	d2bd      	bcs.n	403564 <memcpy+0x10>
  4035e8:	3230      	adds	r2, #48	; 0x30
  4035ea:	d311      	bcc.n	403610 <memcpy+0xbc>
  4035ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4035f0:	f840 3b04 	str.w	r3, [r0], #4
  4035f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4035f8:	f840 3b04 	str.w	r3, [r0], #4
  4035fc:	f851 3b04 	ldr.w	r3, [r1], #4
  403600:	f840 3b04 	str.w	r3, [r0], #4
  403604:	f851 3b04 	ldr.w	r3, [r1], #4
  403608:	f840 3b04 	str.w	r3, [r0], #4
  40360c:	3a10      	subs	r2, #16
  40360e:	d2ed      	bcs.n	4035ec <memcpy+0x98>
  403610:	320c      	adds	r2, #12
  403612:	d305      	bcc.n	403620 <memcpy+0xcc>
  403614:	f851 3b04 	ldr.w	r3, [r1], #4
  403618:	f840 3b04 	str.w	r3, [r0], #4
  40361c:	3a04      	subs	r2, #4
  40361e:	d2f9      	bcs.n	403614 <memcpy+0xc0>
  403620:	3204      	adds	r2, #4
  403622:	d008      	beq.n	403636 <memcpy+0xe2>
  403624:	07d2      	lsls	r2, r2, #31
  403626:	bf1c      	itt	ne
  403628:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40362c:	f800 3b01 	strbne.w	r3, [r0], #1
  403630:	d301      	bcc.n	403636 <memcpy+0xe2>
  403632:	880b      	ldrh	r3, [r1, #0]
  403634:	8003      	strh	r3, [r0, #0]
  403636:	4660      	mov	r0, ip
  403638:	4770      	bx	lr
  40363a:	bf00      	nop
  40363c:	2a08      	cmp	r2, #8
  40363e:	d313      	bcc.n	403668 <memcpy+0x114>
  403640:	078b      	lsls	r3, r1, #30
  403642:	d08d      	beq.n	403560 <memcpy+0xc>
  403644:	f010 0303 	ands.w	r3, r0, #3
  403648:	d08a      	beq.n	403560 <memcpy+0xc>
  40364a:	f1c3 0304 	rsb	r3, r3, #4
  40364e:	1ad2      	subs	r2, r2, r3
  403650:	07db      	lsls	r3, r3, #31
  403652:	bf1c      	itt	ne
  403654:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403658:	f800 3b01 	strbne.w	r3, [r0], #1
  40365c:	d380      	bcc.n	403560 <memcpy+0xc>
  40365e:	f831 3b02 	ldrh.w	r3, [r1], #2
  403662:	f820 3b02 	strh.w	r3, [r0], #2
  403666:	e77b      	b.n	403560 <memcpy+0xc>
  403668:	3a04      	subs	r2, #4
  40366a:	d3d9      	bcc.n	403620 <memcpy+0xcc>
  40366c:	3a01      	subs	r2, #1
  40366e:	f811 3b01 	ldrb.w	r3, [r1], #1
  403672:	f800 3b01 	strb.w	r3, [r0], #1
  403676:	d2f9      	bcs.n	40366c <memcpy+0x118>
  403678:	780b      	ldrb	r3, [r1, #0]
  40367a:	7003      	strb	r3, [r0, #0]
  40367c:	784b      	ldrb	r3, [r1, #1]
  40367e:	7043      	strb	r3, [r0, #1]
  403680:	788b      	ldrb	r3, [r1, #2]
  403682:	7083      	strb	r3, [r0, #2]
  403684:	4660      	mov	r0, ip
  403686:	4770      	bx	lr

00403688 <memset>:
  403688:	b470      	push	{r4, r5, r6}
  40368a:	0786      	lsls	r6, r0, #30
  40368c:	d046      	beq.n	40371c <memset+0x94>
  40368e:	1e54      	subs	r4, r2, #1
  403690:	2a00      	cmp	r2, #0
  403692:	d041      	beq.n	403718 <memset+0x90>
  403694:	b2ca      	uxtb	r2, r1
  403696:	4603      	mov	r3, r0
  403698:	e002      	b.n	4036a0 <memset+0x18>
  40369a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40369e:	d33b      	bcc.n	403718 <memset+0x90>
  4036a0:	f803 2b01 	strb.w	r2, [r3], #1
  4036a4:	079d      	lsls	r5, r3, #30
  4036a6:	d1f8      	bne.n	40369a <memset+0x12>
  4036a8:	2c03      	cmp	r4, #3
  4036aa:	d92e      	bls.n	40370a <memset+0x82>
  4036ac:	b2cd      	uxtb	r5, r1
  4036ae:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4036b2:	2c0f      	cmp	r4, #15
  4036b4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4036b8:	d919      	bls.n	4036ee <memset+0x66>
  4036ba:	f103 0210 	add.w	r2, r3, #16
  4036be:	4626      	mov	r6, r4
  4036c0:	3e10      	subs	r6, #16
  4036c2:	2e0f      	cmp	r6, #15
  4036c4:	f842 5c10 	str.w	r5, [r2, #-16]
  4036c8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4036cc:	f842 5c08 	str.w	r5, [r2, #-8]
  4036d0:	f842 5c04 	str.w	r5, [r2, #-4]
  4036d4:	f102 0210 	add.w	r2, r2, #16
  4036d8:	d8f2      	bhi.n	4036c0 <memset+0x38>
  4036da:	f1a4 0210 	sub.w	r2, r4, #16
  4036de:	f022 020f 	bic.w	r2, r2, #15
  4036e2:	f004 040f 	and.w	r4, r4, #15
  4036e6:	3210      	adds	r2, #16
  4036e8:	2c03      	cmp	r4, #3
  4036ea:	4413      	add	r3, r2
  4036ec:	d90d      	bls.n	40370a <memset+0x82>
  4036ee:	461e      	mov	r6, r3
  4036f0:	4622      	mov	r2, r4
  4036f2:	3a04      	subs	r2, #4
  4036f4:	2a03      	cmp	r2, #3
  4036f6:	f846 5b04 	str.w	r5, [r6], #4
  4036fa:	d8fa      	bhi.n	4036f2 <memset+0x6a>
  4036fc:	1f22      	subs	r2, r4, #4
  4036fe:	f022 0203 	bic.w	r2, r2, #3
  403702:	3204      	adds	r2, #4
  403704:	4413      	add	r3, r2
  403706:	f004 0403 	and.w	r4, r4, #3
  40370a:	b12c      	cbz	r4, 403718 <memset+0x90>
  40370c:	b2c9      	uxtb	r1, r1
  40370e:	441c      	add	r4, r3
  403710:	f803 1b01 	strb.w	r1, [r3], #1
  403714:	429c      	cmp	r4, r3
  403716:	d1fb      	bne.n	403710 <memset+0x88>
  403718:	bc70      	pop	{r4, r5, r6}
  40371a:	4770      	bx	lr
  40371c:	4614      	mov	r4, r2
  40371e:	4603      	mov	r3, r0
  403720:	e7c2      	b.n	4036a8 <memset+0x20>
  403722:	bf00      	nop

00403724 <__malloc_lock>:
  403724:	4770      	bx	lr
  403726:	bf00      	nop

00403728 <__malloc_unlock>:
  403728:	4770      	bx	lr
  40372a:	bf00      	nop

0040372c <_sbrk_r>:
  40372c:	b538      	push	{r3, r4, r5, lr}
  40372e:	4c07      	ldr	r4, [pc, #28]	; (40374c <_sbrk_r+0x20>)
  403730:	2300      	movs	r3, #0
  403732:	4605      	mov	r5, r0
  403734:	4608      	mov	r0, r1
  403736:	6023      	str	r3, [r4, #0]
  403738:	f7fd f9ac 	bl	400a94 <_sbrk>
  40373c:	1c43      	adds	r3, r0, #1
  40373e:	d000      	beq.n	403742 <_sbrk_r+0x16>
  403740:	bd38      	pop	{r3, r4, r5, pc}
  403742:	6823      	ldr	r3, [r4, #0]
  403744:	2b00      	cmp	r3, #0
  403746:	d0fb      	beq.n	403740 <_sbrk_r+0x14>
  403748:	602b      	str	r3, [r5, #0]
  40374a:	bd38      	pop	{r3, r4, r5, pc}
  40374c:	20400d08 	.word	0x20400d08

00403750 <setbuf>:
  403750:	2900      	cmp	r1, #0
  403752:	bf0c      	ite	eq
  403754:	2202      	moveq	r2, #2
  403756:	2200      	movne	r2, #0
  403758:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40375c:	f000 b800 	b.w	403760 <setvbuf>

00403760 <setvbuf>:
  403760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403764:	4c50      	ldr	r4, [pc, #320]	; (4038a8 <setvbuf+0x148>)
  403766:	6825      	ldr	r5, [r4, #0]
  403768:	b083      	sub	sp, #12
  40376a:	4604      	mov	r4, r0
  40376c:	460f      	mov	r7, r1
  40376e:	4690      	mov	r8, r2
  403770:	461e      	mov	r6, r3
  403772:	b115      	cbz	r5, 40377a <setvbuf+0x1a>
  403774:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403776:	2b00      	cmp	r3, #0
  403778:	d077      	beq.n	40386a <setvbuf+0x10a>
  40377a:	f1b8 0f02 	cmp.w	r8, #2
  40377e:	d004      	beq.n	40378a <setvbuf+0x2a>
  403780:	f1b8 0f01 	cmp.w	r8, #1
  403784:	d87d      	bhi.n	403882 <setvbuf+0x122>
  403786:	2e00      	cmp	r6, #0
  403788:	db7b      	blt.n	403882 <setvbuf+0x122>
  40378a:	4621      	mov	r1, r4
  40378c:	4628      	mov	r0, r5
  40378e:	f003 faf5 	bl	406d7c <_fflush_r>
  403792:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403794:	b141      	cbz	r1, 4037a8 <setvbuf+0x48>
  403796:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40379a:	4299      	cmp	r1, r3
  40379c:	d002      	beq.n	4037a4 <setvbuf+0x44>
  40379e:	4628      	mov	r0, r5
  4037a0:	f003 fc56 	bl	407050 <_free_r>
  4037a4:	2300      	movs	r3, #0
  4037a6:	6323      	str	r3, [r4, #48]	; 0x30
  4037a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4037ac:	2200      	movs	r2, #0
  4037ae:	61a2      	str	r2, [r4, #24]
  4037b0:	6062      	str	r2, [r4, #4]
  4037b2:	061a      	lsls	r2, r3, #24
  4037b4:	d452      	bmi.n	40385c <setvbuf+0xfc>
  4037b6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4037ba:	f023 0303 	bic.w	r3, r3, #3
  4037be:	f1b8 0f02 	cmp.w	r8, #2
  4037c2:	81a3      	strh	r3, [r4, #12]
  4037c4:	d037      	beq.n	403836 <setvbuf+0xd6>
  4037c6:	ab01      	add	r3, sp, #4
  4037c8:	466a      	mov	r2, sp
  4037ca:	4621      	mov	r1, r4
  4037cc:	4628      	mov	r0, r5
  4037ce:	f003 fee3 	bl	407598 <__swhatbuf_r>
  4037d2:	89a3      	ldrh	r3, [r4, #12]
  4037d4:	4318      	orrs	r0, r3
  4037d6:	81a0      	strh	r0, [r4, #12]
  4037d8:	b316      	cbz	r6, 403820 <setvbuf+0xc0>
  4037da:	b317      	cbz	r7, 403822 <setvbuf+0xc2>
  4037dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4037de:	2b00      	cmp	r3, #0
  4037e0:	d04b      	beq.n	40387a <setvbuf+0x11a>
  4037e2:	9b00      	ldr	r3, [sp, #0]
  4037e4:	6027      	str	r7, [r4, #0]
  4037e6:	429e      	cmp	r6, r3
  4037e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4037ec:	6127      	str	r7, [r4, #16]
  4037ee:	bf1c      	itt	ne
  4037f0:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
  4037f4:	81a3      	strhne	r3, [r4, #12]
  4037f6:	f1b8 0f01 	cmp.w	r8, #1
  4037fa:	bf04      	itt	eq
  4037fc:	f043 0301 	orreq.w	r3, r3, #1
  403800:	81a3      	strheq	r3, [r4, #12]
  403802:	b29b      	uxth	r3, r3
  403804:	f013 0008 	ands.w	r0, r3, #8
  403808:	6166      	str	r6, [r4, #20]
  40380a:	d023      	beq.n	403854 <setvbuf+0xf4>
  40380c:	f013 0001 	ands.w	r0, r3, #1
  403810:	d02f      	beq.n	403872 <setvbuf+0x112>
  403812:	2000      	movs	r0, #0
  403814:	4276      	negs	r6, r6
  403816:	61a6      	str	r6, [r4, #24]
  403818:	60a0      	str	r0, [r4, #8]
  40381a:	b003      	add	sp, #12
  40381c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403820:	9e00      	ldr	r6, [sp, #0]
  403822:	4630      	mov	r0, r6
  403824:	f7ff fbd6 	bl	402fd4 <malloc>
  403828:	4607      	mov	r7, r0
  40382a:	b368      	cbz	r0, 403888 <setvbuf+0x128>
  40382c:	89a3      	ldrh	r3, [r4, #12]
  40382e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403832:	81a3      	strh	r3, [r4, #12]
  403834:	e7d2      	b.n	4037dc <setvbuf+0x7c>
  403836:	2000      	movs	r0, #0
  403838:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40383c:	f043 0302 	orr.w	r3, r3, #2
  403840:	2500      	movs	r5, #0
  403842:	2101      	movs	r1, #1
  403844:	81a3      	strh	r3, [r4, #12]
  403846:	60a5      	str	r5, [r4, #8]
  403848:	6022      	str	r2, [r4, #0]
  40384a:	6122      	str	r2, [r4, #16]
  40384c:	6161      	str	r1, [r4, #20]
  40384e:	b003      	add	sp, #12
  403850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403854:	60a0      	str	r0, [r4, #8]
  403856:	b003      	add	sp, #12
  403858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40385c:	6921      	ldr	r1, [r4, #16]
  40385e:	4628      	mov	r0, r5
  403860:	f003 fbf6 	bl	407050 <_free_r>
  403864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403868:	e7a5      	b.n	4037b6 <setvbuf+0x56>
  40386a:	4628      	mov	r0, r5
  40386c:	f003 fb1a 	bl	406ea4 <__sinit>
  403870:	e783      	b.n	40377a <setvbuf+0x1a>
  403872:	60a6      	str	r6, [r4, #8]
  403874:	b003      	add	sp, #12
  403876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40387a:	4628      	mov	r0, r5
  40387c:	f003 fb12 	bl	406ea4 <__sinit>
  403880:	e7af      	b.n	4037e2 <setvbuf+0x82>
  403882:	f04f 30ff 	mov.w	r0, #4294967295
  403886:	e7e2      	b.n	40384e <setvbuf+0xee>
  403888:	f8dd 9000 	ldr.w	r9, [sp]
  40388c:	45b1      	cmp	r9, r6
  40388e:	d006      	beq.n	40389e <setvbuf+0x13e>
  403890:	4648      	mov	r0, r9
  403892:	f7ff fb9f 	bl	402fd4 <malloc>
  403896:	4607      	mov	r7, r0
  403898:	b108      	cbz	r0, 40389e <setvbuf+0x13e>
  40389a:	464e      	mov	r6, r9
  40389c:	e7c6      	b.n	40382c <setvbuf+0xcc>
  40389e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4038a2:	f04f 30ff 	mov.w	r0, #4294967295
  4038a6:	e7c7      	b.n	403838 <setvbuf+0xd8>
  4038a8:	2040000c 	.word	0x2040000c

004038ac <sprintf>:
  4038ac:	b40e      	push	{r1, r2, r3}
  4038ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  4038b0:	b09c      	sub	sp, #112	; 0x70
  4038b2:	ab21      	add	r3, sp, #132	; 0x84
  4038b4:	490f      	ldr	r1, [pc, #60]	; (4038f4 <sprintf+0x48>)
  4038b6:	f853 2b04 	ldr.w	r2, [r3], #4
  4038ba:	9301      	str	r3, [sp, #4]
  4038bc:	4605      	mov	r5, r0
  4038be:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4038c2:	6808      	ldr	r0, [r1, #0]
  4038c4:	9502      	str	r5, [sp, #8]
  4038c6:	f44f 7702 	mov.w	r7, #520	; 0x208
  4038ca:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4038ce:	a902      	add	r1, sp, #8
  4038d0:	9506      	str	r5, [sp, #24]
  4038d2:	f8ad 7014 	strh.w	r7, [sp, #20]
  4038d6:	9404      	str	r4, [sp, #16]
  4038d8:	9407      	str	r4, [sp, #28]
  4038da:	f8ad 6016 	strh.w	r6, [sp, #22]
  4038de:	f000 f8dd 	bl	403a9c <_svfprintf_r>
  4038e2:	9b02      	ldr	r3, [sp, #8]
  4038e4:	2200      	movs	r2, #0
  4038e6:	701a      	strb	r2, [r3, #0]
  4038e8:	b01c      	add	sp, #112	; 0x70
  4038ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4038ee:	b003      	add	sp, #12
  4038f0:	4770      	bx	lr
  4038f2:	bf00      	nop
  4038f4:	2040000c 	.word	0x2040000c

004038f8 <strcpy>:
  4038f8:	ea80 0201 	eor.w	r2, r0, r1
  4038fc:	4684      	mov	ip, r0
  4038fe:	f012 0f03 	tst.w	r2, #3
  403902:	d14f      	bne.n	4039a4 <strcpy+0xac>
  403904:	f011 0f03 	tst.w	r1, #3
  403908:	d132      	bne.n	403970 <strcpy+0x78>
  40390a:	f84d 4d04 	str.w	r4, [sp, #-4]!
  40390e:	f011 0f04 	tst.w	r1, #4
  403912:	f851 3b04 	ldr.w	r3, [r1], #4
  403916:	d00b      	beq.n	403930 <strcpy+0x38>
  403918:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40391c:	439a      	bics	r2, r3
  40391e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  403922:	bf04      	itt	eq
  403924:	f84c 3b04 	streq.w	r3, [ip], #4
  403928:	f851 3b04 	ldreq.w	r3, [r1], #4
  40392c:	d116      	bne.n	40395c <strcpy+0x64>
  40392e:	bf00      	nop
  403930:	f851 4b04 	ldr.w	r4, [r1], #4
  403934:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  403938:	439a      	bics	r2, r3
  40393a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40393e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  403942:	d10b      	bne.n	40395c <strcpy+0x64>
  403944:	f84c 3b04 	str.w	r3, [ip], #4
  403948:	43a2      	bics	r2, r4
  40394a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40394e:	bf04      	itt	eq
  403950:	f851 3b04 	ldreq.w	r3, [r1], #4
  403954:	f84c 4b04 	streq.w	r4, [ip], #4
  403958:	d0ea      	beq.n	403930 <strcpy+0x38>
  40395a:	4623      	mov	r3, r4
  40395c:	f80c 3b01 	strb.w	r3, [ip], #1
  403960:	f013 0fff 	tst.w	r3, #255	; 0xff
  403964:	ea4f 2333 	mov.w	r3, r3, ror #8
  403968:	d1f8      	bne.n	40395c <strcpy+0x64>
  40396a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40396e:	4770      	bx	lr
  403970:	f011 0f01 	tst.w	r1, #1
  403974:	d006      	beq.n	403984 <strcpy+0x8c>
  403976:	f811 2b01 	ldrb.w	r2, [r1], #1
  40397a:	f80c 2b01 	strb.w	r2, [ip], #1
  40397e:	2a00      	cmp	r2, #0
  403980:	bf08      	it	eq
  403982:	4770      	bxeq	lr
  403984:	f011 0f02 	tst.w	r1, #2
  403988:	d0bf      	beq.n	40390a <strcpy+0x12>
  40398a:	f831 2b02 	ldrh.w	r2, [r1], #2
  40398e:	f012 0fff 	tst.w	r2, #255	; 0xff
  403992:	bf16      	itet	ne
  403994:	f82c 2b02 	strhne.w	r2, [ip], #2
  403998:	f88c 2000 	strbeq.w	r2, [ip]
  40399c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  4039a0:	d1b3      	bne.n	40390a <strcpy+0x12>
  4039a2:	4770      	bx	lr
  4039a4:	f811 2b01 	ldrb.w	r2, [r1], #1
  4039a8:	f80c 2b01 	strb.w	r2, [ip], #1
  4039ac:	2a00      	cmp	r2, #0
  4039ae:	d1f9      	bne.n	4039a4 <strcpy+0xac>
  4039b0:	4770      	bx	lr
  4039b2:	bf00      	nop
	...

004039c0 <strlen>:
  4039c0:	f890 f000 	pld	[r0]
  4039c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4039c8:	f020 0107 	bic.w	r1, r0, #7
  4039cc:	f06f 0c00 	mvn.w	ip, #0
  4039d0:	f010 0407 	ands.w	r4, r0, #7
  4039d4:	f891 f020 	pld	[r1, #32]
  4039d8:	f040 8049 	bne.w	403a6e <strlen+0xae>
  4039dc:	f04f 0400 	mov.w	r4, #0
  4039e0:	f06f 0007 	mvn.w	r0, #7
  4039e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4039e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4039ec:	f100 0008 	add.w	r0, r0, #8
  4039f0:	fa82 f24c 	uadd8	r2, r2, ip
  4039f4:	faa4 f28c 	sel	r2, r4, ip
  4039f8:	fa83 f34c 	uadd8	r3, r3, ip
  4039fc:	faa2 f38c 	sel	r3, r2, ip
  403a00:	bb4b      	cbnz	r3, 403a56 <strlen+0x96>
  403a02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403a06:	fa82 f24c 	uadd8	r2, r2, ip
  403a0a:	f100 0008 	add.w	r0, r0, #8
  403a0e:	faa4 f28c 	sel	r2, r4, ip
  403a12:	fa83 f34c 	uadd8	r3, r3, ip
  403a16:	faa2 f38c 	sel	r3, r2, ip
  403a1a:	b9e3      	cbnz	r3, 403a56 <strlen+0x96>
  403a1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403a20:	fa82 f24c 	uadd8	r2, r2, ip
  403a24:	f100 0008 	add.w	r0, r0, #8
  403a28:	faa4 f28c 	sel	r2, r4, ip
  403a2c:	fa83 f34c 	uadd8	r3, r3, ip
  403a30:	faa2 f38c 	sel	r3, r2, ip
  403a34:	b97b      	cbnz	r3, 403a56 <strlen+0x96>
  403a36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  403a3a:	f101 0120 	add.w	r1, r1, #32
  403a3e:	fa82 f24c 	uadd8	r2, r2, ip
  403a42:	f100 0008 	add.w	r0, r0, #8
  403a46:	faa4 f28c 	sel	r2, r4, ip
  403a4a:	fa83 f34c 	uadd8	r3, r3, ip
  403a4e:	faa2 f38c 	sel	r3, r2, ip
  403a52:	2b00      	cmp	r3, #0
  403a54:	d0c6      	beq.n	4039e4 <strlen+0x24>
  403a56:	2a00      	cmp	r2, #0
  403a58:	bf04      	itt	eq
  403a5a:	3004      	addeq	r0, #4
  403a5c:	461a      	moveq	r2, r3
  403a5e:	ba12      	rev	r2, r2
  403a60:	fab2 f282 	clz	r2, r2
  403a64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403a68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403a6c:	4770      	bx	lr
  403a6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403a72:	f004 0503 	and.w	r5, r4, #3
  403a76:	f1c4 0000 	rsb	r0, r4, #0
  403a7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403a7e:	f014 0f04 	tst.w	r4, #4
  403a82:	f891 f040 	pld	[r1, #64]	; 0x40
  403a86:	fa0c f505 	lsl.w	r5, ip, r5
  403a8a:	ea62 0205 	orn	r2, r2, r5
  403a8e:	bf1c      	itt	ne
  403a90:	ea63 0305 	ornne	r3, r3, r5
  403a94:	4662      	movne	r2, ip
  403a96:	f04f 0400 	mov.w	r4, #0
  403a9a:	e7a9      	b.n	4039f0 <strlen+0x30>

00403a9c <_svfprintf_r>:
  403a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403aa0:	b0c3      	sub	sp, #268	; 0x10c
  403aa2:	460c      	mov	r4, r1
  403aa4:	910b      	str	r1, [sp, #44]	; 0x2c
  403aa6:	4692      	mov	sl, r2
  403aa8:	930f      	str	r3, [sp, #60]	; 0x3c
  403aaa:	900c      	str	r0, [sp, #48]	; 0x30
  403aac:	f003 fd66 	bl	40757c <_localeconv_r>
  403ab0:	6803      	ldr	r3, [r0, #0]
  403ab2:	931a      	str	r3, [sp, #104]	; 0x68
  403ab4:	4618      	mov	r0, r3
  403ab6:	f7ff ff83 	bl	4039c0 <strlen>
  403aba:	89a3      	ldrh	r3, [r4, #12]
  403abc:	9019      	str	r0, [sp, #100]	; 0x64
  403abe:	0619      	lsls	r1, r3, #24
  403ac0:	d503      	bpl.n	403aca <_svfprintf_r+0x2e>
  403ac2:	6923      	ldr	r3, [r4, #16]
  403ac4:	2b00      	cmp	r3, #0
  403ac6:	f001 8001 	beq.w	404acc <_svfprintf_r+0x1030>
  403aca:	2300      	movs	r3, #0
  403acc:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403ad0:	9313      	str	r3, [sp, #76]	; 0x4c
  403ad2:	9314      	str	r3, [sp, #80]	; 0x50
  403ad4:	9315      	str	r3, [sp, #84]	; 0x54
  403ad6:	9327      	str	r3, [sp, #156]	; 0x9c
  403ad8:	9326      	str	r3, [sp, #152]	; 0x98
  403ada:	9318      	str	r3, [sp, #96]	; 0x60
  403adc:	931b      	str	r3, [sp, #108]	; 0x6c
  403ade:	9309      	str	r3, [sp, #36]	; 0x24
  403ae0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  403ae4:	46c8      	mov	r8, r9
  403ae6:	9316      	str	r3, [sp, #88]	; 0x58
  403ae8:	9317      	str	r3, [sp, #92]	; 0x5c
  403aea:	f89a 3000 	ldrb.w	r3, [sl]
  403aee:	4654      	mov	r4, sl
  403af0:	b1e3      	cbz	r3, 403b2c <_svfprintf_r+0x90>
  403af2:	2b25      	cmp	r3, #37	; 0x25
  403af4:	d102      	bne.n	403afc <_svfprintf_r+0x60>
  403af6:	e019      	b.n	403b2c <_svfprintf_r+0x90>
  403af8:	2b25      	cmp	r3, #37	; 0x25
  403afa:	d003      	beq.n	403b04 <_svfprintf_r+0x68>
  403afc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403b00:	2b00      	cmp	r3, #0
  403b02:	d1f9      	bne.n	403af8 <_svfprintf_r+0x5c>
  403b04:	eba4 050a 	sub.w	r5, r4, sl
  403b08:	b185      	cbz	r5, 403b2c <_svfprintf_r+0x90>
  403b0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403b0c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403b0e:	f8c8 a000 	str.w	sl, [r8]
  403b12:	3301      	adds	r3, #1
  403b14:	442a      	add	r2, r5
  403b16:	2b07      	cmp	r3, #7
  403b18:	f8c8 5004 	str.w	r5, [r8, #4]
  403b1c:	9227      	str	r2, [sp, #156]	; 0x9c
  403b1e:	9326      	str	r3, [sp, #152]	; 0x98
  403b20:	dc7f      	bgt.n	403c22 <_svfprintf_r+0x186>
  403b22:	f108 0808 	add.w	r8, r8, #8
  403b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403b28:	442b      	add	r3, r5
  403b2a:	9309      	str	r3, [sp, #36]	; 0x24
  403b2c:	7823      	ldrb	r3, [r4, #0]
  403b2e:	2b00      	cmp	r3, #0
  403b30:	d07f      	beq.n	403c32 <_svfprintf_r+0x196>
  403b32:	2300      	movs	r3, #0
  403b34:	461a      	mov	r2, r3
  403b36:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403b3a:	4619      	mov	r1, r3
  403b3c:	930d      	str	r3, [sp, #52]	; 0x34
  403b3e:	469b      	mov	fp, r3
  403b40:	f04f 30ff 	mov.w	r0, #4294967295
  403b44:	7863      	ldrb	r3, [r4, #1]
  403b46:	900a      	str	r0, [sp, #40]	; 0x28
  403b48:	f104 0a01 	add.w	sl, r4, #1
  403b4c:	f10a 0a01 	add.w	sl, sl, #1
  403b50:	f1a3 0020 	sub.w	r0, r3, #32
  403b54:	2858      	cmp	r0, #88	; 0x58
  403b56:	f200 83c0 	bhi.w	4042da <_svfprintf_r+0x83e>
  403b5a:	e8df f010 	tbh	[pc, r0, lsl #1]
  403b5e:	0238      	.short	0x0238
  403b60:	03be03be 	.word	0x03be03be
  403b64:	03be0240 	.word	0x03be0240
  403b68:	03be03be 	.word	0x03be03be
  403b6c:	03be03be 	.word	0x03be03be
  403b70:	024503be 	.word	0x024503be
  403b74:	03be0203 	.word	0x03be0203
  403b78:	026b005d 	.word	0x026b005d
  403b7c:	028603be 	.word	0x028603be
  403b80:	039c039c 	.word	0x039c039c
  403b84:	039c039c 	.word	0x039c039c
  403b88:	039c039c 	.word	0x039c039c
  403b8c:	039c039c 	.word	0x039c039c
  403b90:	03be039c 	.word	0x03be039c
  403b94:	03be03be 	.word	0x03be03be
  403b98:	03be03be 	.word	0x03be03be
  403b9c:	03be03be 	.word	0x03be03be
  403ba0:	03be03be 	.word	0x03be03be
  403ba4:	033703be 	.word	0x033703be
  403ba8:	03be0357 	.word	0x03be0357
  403bac:	03be0357 	.word	0x03be0357
  403bb0:	03be03be 	.word	0x03be03be
  403bb4:	039703be 	.word	0x039703be
  403bb8:	03be03be 	.word	0x03be03be
  403bbc:	03be03ac 	.word	0x03be03ac
  403bc0:	03be03be 	.word	0x03be03be
  403bc4:	03be03be 	.word	0x03be03be
  403bc8:	03be0259 	.word	0x03be0259
  403bcc:	031e03be 	.word	0x031e03be
  403bd0:	03be03be 	.word	0x03be03be
  403bd4:	03be03be 	.word	0x03be03be
  403bd8:	03be03be 	.word	0x03be03be
  403bdc:	03be03be 	.word	0x03be03be
  403be0:	03be03be 	.word	0x03be03be
  403be4:	02db02c6 	.word	0x02db02c6
  403be8:	03570357 	.word	0x03570357
  403bec:	028b0357 	.word	0x028b0357
  403bf0:	03be02db 	.word	0x03be02db
  403bf4:	029003be 	.word	0x029003be
  403bf8:	029d03be 	.word	0x029d03be
  403bfc:	02b401cc 	.word	0x02b401cc
  403c00:	03be0208 	.word	0x03be0208
  403c04:	03be01e1 	.word	0x03be01e1
  403c08:	03be007e 	.word	0x03be007e
  403c0c:	020d03be 	.word	0x020d03be
  403c10:	980d      	ldr	r0, [sp, #52]	; 0x34
  403c12:	930f      	str	r3, [sp, #60]	; 0x3c
  403c14:	4240      	negs	r0, r0
  403c16:	900d      	str	r0, [sp, #52]	; 0x34
  403c18:	f04b 0b04 	orr.w	fp, fp, #4
  403c1c:	f89a 3000 	ldrb.w	r3, [sl]
  403c20:	e794      	b.n	403b4c <_svfprintf_r+0xb0>
  403c22:	aa25      	add	r2, sp, #148	; 0x94
  403c24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403c26:	980c      	ldr	r0, [sp, #48]	; 0x30
  403c28:	f004 fada 	bl	4081e0 <__ssprint_r>
  403c2c:	b940      	cbnz	r0, 403c40 <_svfprintf_r+0x1a4>
  403c2e:	46c8      	mov	r8, r9
  403c30:	e779      	b.n	403b26 <_svfprintf_r+0x8a>
  403c32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403c34:	b123      	cbz	r3, 403c40 <_svfprintf_r+0x1a4>
  403c36:	980c      	ldr	r0, [sp, #48]	; 0x30
  403c38:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403c3a:	aa25      	add	r2, sp, #148	; 0x94
  403c3c:	f004 fad0 	bl	4081e0 <__ssprint_r>
  403c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403c42:	899b      	ldrh	r3, [r3, #12]
  403c44:	f013 0f40 	tst.w	r3, #64	; 0x40
  403c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403c4a:	bf18      	it	ne
  403c4c:	f04f 33ff 	movne.w	r3, #4294967295
  403c50:	9309      	str	r3, [sp, #36]	; 0x24
  403c52:	9809      	ldr	r0, [sp, #36]	; 0x24
  403c54:	b043      	add	sp, #268	; 0x10c
  403c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c5a:	f01b 0f20 	tst.w	fp, #32
  403c5e:	9311      	str	r3, [sp, #68]	; 0x44
  403c60:	f040 81dd 	bne.w	40401e <_svfprintf_r+0x582>
  403c64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403c66:	f01b 0f10 	tst.w	fp, #16
  403c6a:	4613      	mov	r3, r2
  403c6c:	f040 856c 	bne.w	404748 <_svfprintf_r+0xcac>
  403c70:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403c74:	f000 8568 	beq.w	404748 <_svfprintf_r+0xcac>
  403c78:	8814      	ldrh	r4, [r2, #0]
  403c7a:	3204      	adds	r2, #4
  403c7c:	2500      	movs	r5, #0
  403c7e:	2301      	movs	r3, #1
  403c80:	920f      	str	r2, [sp, #60]	; 0x3c
  403c82:	2700      	movs	r7, #0
  403c84:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403c88:	990a      	ldr	r1, [sp, #40]	; 0x28
  403c8a:	1c4a      	adds	r2, r1, #1
  403c8c:	f000 8265 	beq.w	40415a <_svfprintf_r+0x6be>
  403c90:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403c94:	9207      	str	r2, [sp, #28]
  403c96:	ea54 0205 	orrs.w	r2, r4, r5
  403c9a:	f040 8264 	bne.w	404166 <_svfprintf_r+0x6ca>
  403c9e:	2900      	cmp	r1, #0
  403ca0:	f040 8439 	bne.w	404516 <_svfprintf_r+0xa7a>
  403ca4:	2b00      	cmp	r3, #0
  403ca6:	f040 84d4 	bne.w	404652 <_svfprintf_r+0xbb6>
  403caa:	f01b 0301 	ands.w	r3, fp, #1
  403cae:	930e      	str	r3, [sp, #56]	; 0x38
  403cb0:	f000 8602 	beq.w	4048b8 <_svfprintf_r+0xe1c>
  403cb4:	ae42      	add	r6, sp, #264	; 0x108
  403cb6:	2330      	movs	r3, #48	; 0x30
  403cb8:	f806 3d41 	strb.w	r3, [r6, #-65]!
  403cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403cbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403cc0:	4293      	cmp	r3, r2
  403cc2:	bfb8      	it	lt
  403cc4:	4613      	movlt	r3, r2
  403cc6:	9308      	str	r3, [sp, #32]
  403cc8:	2300      	movs	r3, #0
  403cca:	9312      	str	r3, [sp, #72]	; 0x48
  403ccc:	b117      	cbz	r7, 403cd4 <_svfprintf_r+0x238>
  403cce:	9b08      	ldr	r3, [sp, #32]
  403cd0:	3301      	adds	r3, #1
  403cd2:	9308      	str	r3, [sp, #32]
  403cd4:	9b07      	ldr	r3, [sp, #28]
  403cd6:	f013 0302 	ands.w	r3, r3, #2
  403cda:	9310      	str	r3, [sp, #64]	; 0x40
  403cdc:	d002      	beq.n	403ce4 <_svfprintf_r+0x248>
  403cde:	9b08      	ldr	r3, [sp, #32]
  403ce0:	3302      	adds	r3, #2
  403ce2:	9308      	str	r3, [sp, #32]
  403ce4:	9b07      	ldr	r3, [sp, #28]
  403ce6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  403cea:	f040 830d 	bne.w	404308 <_svfprintf_r+0x86c>
  403cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403cf0:	9a08      	ldr	r2, [sp, #32]
  403cf2:	eba3 0b02 	sub.w	fp, r3, r2
  403cf6:	f1bb 0f00 	cmp.w	fp, #0
  403cfa:	f340 8305 	ble.w	404308 <_svfprintf_r+0x86c>
  403cfe:	f1bb 0f10 	cmp.w	fp, #16
  403d02:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403d04:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403d06:	dd29      	ble.n	403d5c <_svfprintf_r+0x2c0>
  403d08:	4643      	mov	r3, r8
  403d0a:	4621      	mov	r1, r4
  403d0c:	46a8      	mov	r8, r5
  403d0e:	2710      	movs	r7, #16
  403d10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403d12:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403d14:	e006      	b.n	403d24 <_svfprintf_r+0x288>
  403d16:	f1ab 0b10 	sub.w	fp, fp, #16
  403d1a:	f1bb 0f10 	cmp.w	fp, #16
  403d1e:	f103 0308 	add.w	r3, r3, #8
  403d22:	dd18      	ble.n	403d56 <_svfprintf_r+0x2ba>
  403d24:	3201      	adds	r2, #1
  403d26:	48b7      	ldr	r0, [pc, #732]	; (404004 <_svfprintf_r+0x568>)
  403d28:	9226      	str	r2, [sp, #152]	; 0x98
  403d2a:	3110      	adds	r1, #16
  403d2c:	2a07      	cmp	r2, #7
  403d2e:	9127      	str	r1, [sp, #156]	; 0x9c
  403d30:	e883 0081 	stmia.w	r3, {r0, r7}
  403d34:	ddef      	ble.n	403d16 <_svfprintf_r+0x27a>
  403d36:	aa25      	add	r2, sp, #148	; 0x94
  403d38:	4629      	mov	r1, r5
  403d3a:	4620      	mov	r0, r4
  403d3c:	f004 fa50 	bl	4081e0 <__ssprint_r>
  403d40:	2800      	cmp	r0, #0
  403d42:	f47f af7d 	bne.w	403c40 <_svfprintf_r+0x1a4>
  403d46:	f1ab 0b10 	sub.w	fp, fp, #16
  403d4a:	f1bb 0f10 	cmp.w	fp, #16
  403d4e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403d50:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403d52:	464b      	mov	r3, r9
  403d54:	dce6      	bgt.n	403d24 <_svfprintf_r+0x288>
  403d56:	4645      	mov	r5, r8
  403d58:	460c      	mov	r4, r1
  403d5a:	4698      	mov	r8, r3
  403d5c:	3201      	adds	r2, #1
  403d5e:	4ba9      	ldr	r3, [pc, #676]	; (404004 <_svfprintf_r+0x568>)
  403d60:	9226      	str	r2, [sp, #152]	; 0x98
  403d62:	445c      	add	r4, fp
  403d64:	2a07      	cmp	r2, #7
  403d66:	9427      	str	r4, [sp, #156]	; 0x9c
  403d68:	e888 0808 	stmia.w	r8, {r3, fp}
  403d6c:	f300 8495 	bgt.w	40469a <_svfprintf_r+0xbfe>
  403d70:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403d74:	f108 0808 	add.w	r8, r8, #8
  403d78:	b177      	cbz	r7, 403d98 <_svfprintf_r+0x2fc>
  403d7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d7c:	3301      	adds	r3, #1
  403d7e:	3401      	adds	r4, #1
  403d80:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  403d84:	2201      	movs	r2, #1
  403d86:	2b07      	cmp	r3, #7
  403d88:	9427      	str	r4, [sp, #156]	; 0x9c
  403d8a:	9326      	str	r3, [sp, #152]	; 0x98
  403d8c:	e888 0006 	stmia.w	r8, {r1, r2}
  403d90:	f300 83d8 	bgt.w	404544 <_svfprintf_r+0xaa8>
  403d94:	f108 0808 	add.w	r8, r8, #8
  403d98:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403d9a:	b16b      	cbz	r3, 403db8 <_svfprintf_r+0x31c>
  403d9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d9e:	3301      	adds	r3, #1
  403da0:	3402      	adds	r4, #2
  403da2:	a91e      	add	r1, sp, #120	; 0x78
  403da4:	2202      	movs	r2, #2
  403da6:	2b07      	cmp	r3, #7
  403da8:	9427      	str	r4, [sp, #156]	; 0x9c
  403daa:	9326      	str	r3, [sp, #152]	; 0x98
  403dac:	e888 0006 	stmia.w	r8, {r1, r2}
  403db0:	f300 83d3 	bgt.w	40455a <_svfprintf_r+0xabe>
  403db4:	f108 0808 	add.w	r8, r8, #8
  403db8:	2d80      	cmp	r5, #128	; 0x80
  403dba:	f000 8313 	beq.w	4043e4 <_svfprintf_r+0x948>
  403dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403dc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403dc2:	1a9f      	subs	r7, r3, r2
  403dc4:	2f00      	cmp	r7, #0
  403dc6:	dd36      	ble.n	403e36 <_svfprintf_r+0x39a>
  403dc8:	2f10      	cmp	r7, #16
  403dca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403dcc:	4d8e      	ldr	r5, [pc, #568]	; (404008 <_svfprintf_r+0x56c>)
  403dce:	dd27      	ble.n	403e20 <_svfprintf_r+0x384>
  403dd0:	4642      	mov	r2, r8
  403dd2:	4621      	mov	r1, r4
  403dd4:	46b0      	mov	r8, r6
  403dd6:	f04f 0b10 	mov.w	fp, #16
  403dda:	462e      	mov	r6, r5
  403ddc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403dde:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403de0:	e004      	b.n	403dec <_svfprintf_r+0x350>
  403de2:	3f10      	subs	r7, #16
  403de4:	2f10      	cmp	r7, #16
  403de6:	f102 0208 	add.w	r2, r2, #8
  403dea:	dd15      	ble.n	403e18 <_svfprintf_r+0x37c>
  403dec:	3301      	adds	r3, #1
  403dee:	3110      	adds	r1, #16
  403df0:	2b07      	cmp	r3, #7
  403df2:	9127      	str	r1, [sp, #156]	; 0x9c
  403df4:	9326      	str	r3, [sp, #152]	; 0x98
  403df6:	e882 0840 	stmia.w	r2, {r6, fp}
  403dfa:	ddf2      	ble.n	403de2 <_svfprintf_r+0x346>
  403dfc:	aa25      	add	r2, sp, #148	; 0x94
  403dfe:	4629      	mov	r1, r5
  403e00:	4620      	mov	r0, r4
  403e02:	f004 f9ed 	bl	4081e0 <__ssprint_r>
  403e06:	2800      	cmp	r0, #0
  403e08:	f47f af1a 	bne.w	403c40 <_svfprintf_r+0x1a4>
  403e0c:	3f10      	subs	r7, #16
  403e0e:	2f10      	cmp	r7, #16
  403e10:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403e12:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e14:	464a      	mov	r2, r9
  403e16:	dce9      	bgt.n	403dec <_svfprintf_r+0x350>
  403e18:	4635      	mov	r5, r6
  403e1a:	460c      	mov	r4, r1
  403e1c:	4646      	mov	r6, r8
  403e1e:	4690      	mov	r8, r2
  403e20:	3301      	adds	r3, #1
  403e22:	443c      	add	r4, r7
  403e24:	2b07      	cmp	r3, #7
  403e26:	9427      	str	r4, [sp, #156]	; 0x9c
  403e28:	9326      	str	r3, [sp, #152]	; 0x98
  403e2a:	e888 00a0 	stmia.w	r8, {r5, r7}
  403e2e:	f300 837e 	bgt.w	40452e <_svfprintf_r+0xa92>
  403e32:	f108 0808 	add.w	r8, r8, #8
  403e36:	9b07      	ldr	r3, [sp, #28]
  403e38:	05df      	lsls	r7, r3, #23
  403e3a:	f100 8267 	bmi.w	40430c <_svfprintf_r+0x870>
  403e3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e40:	990e      	ldr	r1, [sp, #56]	; 0x38
  403e42:	f8c8 6000 	str.w	r6, [r8]
  403e46:	3301      	adds	r3, #1
  403e48:	440c      	add	r4, r1
  403e4a:	2b07      	cmp	r3, #7
  403e4c:	9427      	str	r4, [sp, #156]	; 0x9c
  403e4e:	f8c8 1004 	str.w	r1, [r8, #4]
  403e52:	9326      	str	r3, [sp, #152]	; 0x98
  403e54:	f300 834a 	bgt.w	4044ec <_svfprintf_r+0xa50>
  403e58:	f108 0808 	add.w	r8, r8, #8
  403e5c:	9b07      	ldr	r3, [sp, #28]
  403e5e:	075b      	lsls	r3, r3, #29
  403e60:	d53a      	bpl.n	403ed8 <_svfprintf_r+0x43c>
  403e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403e64:	9a08      	ldr	r2, [sp, #32]
  403e66:	1a9d      	subs	r5, r3, r2
  403e68:	2d00      	cmp	r5, #0
  403e6a:	dd35      	ble.n	403ed8 <_svfprintf_r+0x43c>
  403e6c:	2d10      	cmp	r5, #16
  403e6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e70:	dd20      	ble.n	403eb4 <_svfprintf_r+0x418>
  403e72:	2610      	movs	r6, #16
  403e74:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403e76:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  403e7a:	e004      	b.n	403e86 <_svfprintf_r+0x3ea>
  403e7c:	3d10      	subs	r5, #16
  403e7e:	2d10      	cmp	r5, #16
  403e80:	f108 0808 	add.w	r8, r8, #8
  403e84:	dd16      	ble.n	403eb4 <_svfprintf_r+0x418>
  403e86:	3301      	adds	r3, #1
  403e88:	4a5e      	ldr	r2, [pc, #376]	; (404004 <_svfprintf_r+0x568>)
  403e8a:	9326      	str	r3, [sp, #152]	; 0x98
  403e8c:	3410      	adds	r4, #16
  403e8e:	2b07      	cmp	r3, #7
  403e90:	9427      	str	r4, [sp, #156]	; 0x9c
  403e92:	e888 0044 	stmia.w	r8, {r2, r6}
  403e96:	ddf1      	ble.n	403e7c <_svfprintf_r+0x3e0>
  403e98:	aa25      	add	r2, sp, #148	; 0x94
  403e9a:	4659      	mov	r1, fp
  403e9c:	4638      	mov	r0, r7
  403e9e:	f004 f99f 	bl	4081e0 <__ssprint_r>
  403ea2:	2800      	cmp	r0, #0
  403ea4:	f47f aecc 	bne.w	403c40 <_svfprintf_r+0x1a4>
  403ea8:	3d10      	subs	r5, #16
  403eaa:	2d10      	cmp	r5, #16
  403eac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403eae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403eb0:	46c8      	mov	r8, r9
  403eb2:	dce8      	bgt.n	403e86 <_svfprintf_r+0x3ea>
  403eb4:	3301      	adds	r3, #1
  403eb6:	4a53      	ldr	r2, [pc, #332]	; (404004 <_svfprintf_r+0x568>)
  403eb8:	9326      	str	r3, [sp, #152]	; 0x98
  403eba:	442c      	add	r4, r5
  403ebc:	2b07      	cmp	r3, #7
  403ebe:	9427      	str	r4, [sp, #156]	; 0x9c
  403ec0:	e888 0024 	stmia.w	r8, {r2, r5}
  403ec4:	dd08      	ble.n	403ed8 <_svfprintf_r+0x43c>
  403ec6:	aa25      	add	r2, sp, #148	; 0x94
  403ec8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403eca:	980c      	ldr	r0, [sp, #48]	; 0x30
  403ecc:	f004 f988 	bl	4081e0 <__ssprint_r>
  403ed0:	2800      	cmp	r0, #0
  403ed2:	f47f aeb5 	bne.w	403c40 <_svfprintf_r+0x1a4>
  403ed6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403eda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403edc:	9908      	ldr	r1, [sp, #32]
  403ede:	428a      	cmp	r2, r1
  403ee0:	bfac      	ite	ge
  403ee2:	189b      	addge	r3, r3, r2
  403ee4:	185b      	addlt	r3, r3, r1
  403ee6:	9309      	str	r3, [sp, #36]	; 0x24
  403ee8:	2c00      	cmp	r4, #0
  403eea:	f040 830a 	bne.w	404502 <_svfprintf_r+0xa66>
  403eee:	2300      	movs	r3, #0
  403ef0:	9326      	str	r3, [sp, #152]	; 0x98
  403ef2:	46c8      	mov	r8, r9
  403ef4:	e5f9      	b.n	403aea <_svfprintf_r+0x4e>
  403ef6:	9311      	str	r3, [sp, #68]	; 0x44
  403ef8:	f01b 0320 	ands.w	r3, fp, #32
  403efc:	f040 81e2 	bne.w	4042c4 <_svfprintf_r+0x828>
  403f00:	f01b 0210 	ands.w	r2, fp, #16
  403f04:	f040 842c 	bne.w	404760 <_svfprintf_r+0xcc4>
  403f08:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  403f0c:	f000 8428 	beq.w	404760 <_svfprintf_r+0xcc4>
  403f10:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403f12:	4613      	mov	r3, r2
  403f14:	460a      	mov	r2, r1
  403f16:	3204      	adds	r2, #4
  403f18:	880c      	ldrh	r4, [r1, #0]
  403f1a:	920f      	str	r2, [sp, #60]	; 0x3c
  403f1c:	2500      	movs	r5, #0
  403f1e:	e6b0      	b.n	403c82 <_svfprintf_r+0x1e6>
  403f20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403f22:	9311      	str	r3, [sp, #68]	; 0x44
  403f24:	6816      	ldr	r6, [r2, #0]
  403f26:	2400      	movs	r4, #0
  403f28:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  403f2c:	1d15      	adds	r5, r2, #4
  403f2e:	2e00      	cmp	r6, #0
  403f30:	f000 86a5 	beq.w	404c7e <_svfprintf_r+0x11e2>
  403f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403f36:	1c53      	adds	r3, r2, #1
  403f38:	f000 8607 	beq.w	404b4a <_svfprintf_r+0x10ae>
  403f3c:	4621      	mov	r1, r4
  403f3e:	4630      	mov	r0, r6
  403f40:	f003 fbb6 	bl	4076b0 <memchr>
  403f44:	2800      	cmp	r0, #0
  403f46:	f000 86df 	beq.w	404d08 <_svfprintf_r+0x126c>
  403f4a:	1b83      	subs	r3, r0, r6
  403f4c:	930e      	str	r3, [sp, #56]	; 0x38
  403f4e:	940a      	str	r4, [sp, #40]	; 0x28
  403f50:	950f      	str	r5, [sp, #60]	; 0x3c
  403f52:	f8cd b01c 	str.w	fp, [sp, #28]
  403f56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403f5a:	9308      	str	r3, [sp, #32]
  403f5c:	9412      	str	r4, [sp, #72]	; 0x48
  403f5e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403f62:	e6b3      	b.n	403ccc <_svfprintf_r+0x230>
  403f64:	f89a 3000 	ldrb.w	r3, [sl]
  403f68:	2201      	movs	r2, #1
  403f6a:	212b      	movs	r1, #43	; 0x2b
  403f6c:	e5ee      	b.n	403b4c <_svfprintf_r+0xb0>
  403f6e:	f04b 0b20 	orr.w	fp, fp, #32
  403f72:	f89a 3000 	ldrb.w	r3, [sl]
  403f76:	e5e9      	b.n	403b4c <_svfprintf_r+0xb0>
  403f78:	9311      	str	r3, [sp, #68]	; 0x44
  403f7a:	2a00      	cmp	r2, #0
  403f7c:	f040 878d 	bne.w	404e9a <_svfprintf_r+0x13fe>
  403f80:	4b22      	ldr	r3, [pc, #136]	; (40400c <_svfprintf_r+0x570>)
  403f82:	9318      	str	r3, [sp, #96]	; 0x60
  403f84:	f01b 0f20 	tst.w	fp, #32
  403f88:	f040 8111 	bne.w	4041ae <_svfprintf_r+0x712>
  403f8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403f8e:	f01b 0f10 	tst.w	fp, #16
  403f92:	4613      	mov	r3, r2
  403f94:	f040 83df 	bne.w	404756 <_svfprintf_r+0xcba>
  403f98:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403f9c:	f000 83db 	beq.w	404756 <_svfprintf_r+0xcba>
  403fa0:	3304      	adds	r3, #4
  403fa2:	8814      	ldrh	r4, [r2, #0]
  403fa4:	930f      	str	r3, [sp, #60]	; 0x3c
  403fa6:	2500      	movs	r5, #0
  403fa8:	f01b 0f01 	tst.w	fp, #1
  403fac:	f000 810c 	beq.w	4041c8 <_svfprintf_r+0x72c>
  403fb0:	ea54 0305 	orrs.w	r3, r4, r5
  403fb4:	f000 8108 	beq.w	4041c8 <_svfprintf_r+0x72c>
  403fb8:	2330      	movs	r3, #48	; 0x30
  403fba:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  403fbe:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  403fc2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  403fc6:	f04b 0b02 	orr.w	fp, fp, #2
  403fca:	2302      	movs	r3, #2
  403fcc:	e659      	b.n	403c82 <_svfprintf_r+0x1e6>
  403fce:	f89a 3000 	ldrb.w	r3, [sl]
  403fd2:	2900      	cmp	r1, #0
  403fd4:	f47f adba 	bne.w	403b4c <_svfprintf_r+0xb0>
  403fd8:	2201      	movs	r2, #1
  403fda:	2120      	movs	r1, #32
  403fdc:	e5b6      	b.n	403b4c <_svfprintf_r+0xb0>
  403fde:	f04b 0b01 	orr.w	fp, fp, #1
  403fe2:	f89a 3000 	ldrb.w	r3, [sl]
  403fe6:	e5b1      	b.n	403b4c <_svfprintf_r+0xb0>
  403fe8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403fea:	6823      	ldr	r3, [r4, #0]
  403fec:	930d      	str	r3, [sp, #52]	; 0x34
  403fee:	4618      	mov	r0, r3
  403ff0:	2800      	cmp	r0, #0
  403ff2:	4623      	mov	r3, r4
  403ff4:	f103 0304 	add.w	r3, r3, #4
  403ff8:	f6ff ae0a 	blt.w	403c10 <_svfprintf_r+0x174>
  403ffc:	930f      	str	r3, [sp, #60]	; 0x3c
  403ffe:	f89a 3000 	ldrb.w	r3, [sl]
  404002:	e5a3      	b.n	403b4c <_svfprintf_r+0xb0>
  404004:	004094a0 	.word	0x004094a0
  404008:	004094b0 	.word	0x004094b0
  40400c:	00409480 	.word	0x00409480
  404010:	f04b 0b10 	orr.w	fp, fp, #16
  404014:	f01b 0f20 	tst.w	fp, #32
  404018:	9311      	str	r3, [sp, #68]	; 0x44
  40401a:	f43f ae23 	beq.w	403c64 <_svfprintf_r+0x1c8>
  40401e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404020:	3507      	adds	r5, #7
  404022:	f025 0307 	bic.w	r3, r5, #7
  404026:	f103 0208 	add.w	r2, r3, #8
  40402a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40402e:	920f      	str	r2, [sp, #60]	; 0x3c
  404030:	2301      	movs	r3, #1
  404032:	e626      	b.n	403c82 <_svfprintf_r+0x1e6>
  404034:	f89a 3000 	ldrb.w	r3, [sl]
  404038:	2b2a      	cmp	r3, #42	; 0x2a
  40403a:	f10a 0401 	add.w	r4, sl, #1
  40403e:	f000 871f 	beq.w	404e80 <_svfprintf_r+0x13e4>
  404042:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404046:	2809      	cmp	r0, #9
  404048:	46a2      	mov	sl, r4
  40404a:	f200 86ab 	bhi.w	404da4 <_svfprintf_r+0x1308>
  40404e:	2300      	movs	r3, #0
  404050:	461c      	mov	r4, r3
  404052:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404056:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40405a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40405e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404062:	2809      	cmp	r0, #9
  404064:	d9f5      	bls.n	404052 <_svfprintf_r+0x5b6>
  404066:	940a      	str	r4, [sp, #40]	; 0x28
  404068:	e572      	b.n	403b50 <_svfprintf_r+0xb4>
  40406a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40406e:	f89a 3000 	ldrb.w	r3, [sl]
  404072:	e56b      	b.n	403b4c <_svfprintf_r+0xb0>
  404074:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404078:	f89a 3000 	ldrb.w	r3, [sl]
  40407c:	e566      	b.n	403b4c <_svfprintf_r+0xb0>
  40407e:	f89a 3000 	ldrb.w	r3, [sl]
  404082:	2b6c      	cmp	r3, #108	; 0x6c
  404084:	bf03      	ittte	eq
  404086:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40408a:	f04b 0b20 	orreq.w	fp, fp, #32
  40408e:	f10a 0a01 	addeq.w	sl, sl, #1
  404092:	f04b 0b10 	orrne.w	fp, fp, #16
  404096:	e559      	b.n	403b4c <_svfprintf_r+0xb0>
  404098:	2a00      	cmp	r2, #0
  40409a:	f040 8709 	bne.w	404eb0 <_svfprintf_r+0x1414>
  40409e:	f01b 0f20 	tst.w	fp, #32
  4040a2:	f040 84f7 	bne.w	404a94 <_svfprintf_r+0xff8>
  4040a6:	f01b 0f10 	tst.w	fp, #16
  4040aa:	f040 84aa 	bne.w	404a02 <_svfprintf_r+0xf66>
  4040ae:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4040b2:	f000 84a6 	beq.w	404a02 <_svfprintf_r+0xf66>
  4040b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4040b8:	6813      	ldr	r3, [r2, #0]
  4040ba:	3204      	adds	r2, #4
  4040bc:	920f      	str	r2, [sp, #60]	; 0x3c
  4040be:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  4040c2:	801a      	strh	r2, [r3, #0]
  4040c4:	e511      	b.n	403aea <_svfprintf_r+0x4e>
  4040c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4040c8:	4bb2      	ldr	r3, [pc, #712]	; (404394 <_svfprintf_r+0x8f8>)
  4040ca:	680c      	ldr	r4, [r1, #0]
  4040cc:	9318      	str	r3, [sp, #96]	; 0x60
  4040ce:	2230      	movs	r2, #48	; 0x30
  4040d0:	2378      	movs	r3, #120	; 0x78
  4040d2:	3104      	adds	r1, #4
  4040d4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  4040d8:	9311      	str	r3, [sp, #68]	; 0x44
  4040da:	f04b 0b02 	orr.w	fp, fp, #2
  4040de:	910f      	str	r1, [sp, #60]	; 0x3c
  4040e0:	2500      	movs	r5, #0
  4040e2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4040e6:	2302      	movs	r3, #2
  4040e8:	e5cb      	b.n	403c82 <_svfprintf_r+0x1e6>
  4040ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4040ec:	9311      	str	r3, [sp, #68]	; 0x44
  4040ee:	680a      	ldr	r2, [r1, #0]
  4040f0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4040f4:	2300      	movs	r3, #0
  4040f6:	460a      	mov	r2, r1
  4040f8:	461f      	mov	r7, r3
  4040fa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4040fe:	3204      	adds	r2, #4
  404100:	2301      	movs	r3, #1
  404102:	9308      	str	r3, [sp, #32]
  404104:	f8cd b01c 	str.w	fp, [sp, #28]
  404108:	970a      	str	r7, [sp, #40]	; 0x28
  40410a:	9712      	str	r7, [sp, #72]	; 0x48
  40410c:	920f      	str	r2, [sp, #60]	; 0x3c
  40410e:	930e      	str	r3, [sp, #56]	; 0x38
  404110:	ae28      	add	r6, sp, #160	; 0xa0
  404112:	e5df      	b.n	403cd4 <_svfprintf_r+0x238>
  404114:	9311      	str	r3, [sp, #68]	; 0x44
  404116:	2a00      	cmp	r2, #0
  404118:	f040 86e2 	bne.w	404ee0 <_svfprintf_r+0x1444>
  40411c:	f01b 0f20 	tst.w	fp, #32
  404120:	d15d      	bne.n	4041de <_svfprintf_r+0x742>
  404122:	f01b 0f10 	tst.w	fp, #16
  404126:	f040 8306 	bne.w	404736 <_svfprintf_r+0xc9a>
  40412a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40412e:	f000 8302 	beq.w	404736 <_svfprintf_r+0xc9a>
  404132:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404134:	f9b1 4000 	ldrsh.w	r4, [r1]
  404138:	3104      	adds	r1, #4
  40413a:	17e5      	asrs	r5, r4, #31
  40413c:	4622      	mov	r2, r4
  40413e:	462b      	mov	r3, r5
  404140:	910f      	str	r1, [sp, #60]	; 0x3c
  404142:	2a00      	cmp	r2, #0
  404144:	f173 0300 	sbcs.w	r3, r3, #0
  404148:	db58      	blt.n	4041fc <_svfprintf_r+0x760>
  40414a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40414c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404150:	1c4a      	adds	r2, r1, #1
  404152:	f04f 0301 	mov.w	r3, #1
  404156:	f47f ad9b 	bne.w	403c90 <_svfprintf_r+0x1f4>
  40415a:	ea54 0205 	orrs.w	r2, r4, r5
  40415e:	f000 81dc 	beq.w	40451a <_svfprintf_r+0xa7e>
  404162:	f8cd b01c 	str.w	fp, [sp, #28]
  404166:	2b01      	cmp	r3, #1
  404168:	f000 8278 	beq.w	40465c <_svfprintf_r+0xbc0>
  40416c:	2b02      	cmp	r3, #2
  40416e:	f040 8203 	bne.w	404578 <_svfprintf_r+0xadc>
  404172:	9818      	ldr	r0, [sp, #96]	; 0x60
  404174:	464e      	mov	r6, r9
  404176:	0923      	lsrs	r3, r4, #4
  404178:	f004 010f 	and.w	r1, r4, #15
  40417c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404180:	092a      	lsrs	r2, r5, #4
  404182:	461c      	mov	r4, r3
  404184:	4615      	mov	r5, r2
  404186:	5c43      	ldrb	r3, [r0, r1]
  404188:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40418c:	ea54 0305 	orrs.w	r3, r4, r5
  404190:	d1f1      	bne.n	404176 <_svfprintf_r+0x6da>
  404192:	eba9 0306 	sub.w	r3, r9, r6
  404196:	930e      	str	r3, [sp, #56]	; 0x38
  404198:	e590      	b.n	403cbc <_svfprintf_r+0x220>
  40419a:	9311      	str	r3, [sp, #68]	; 0x44
  40419c:	2a00      	cmp	r2, #0
  40419e:	f040 869b 	bne.w	404ed8 <_svfprintf_r+0x143c>
  4041a2:	4b7d      	ldr	r3, [pc, #500]	; (404398 <_svfprintf_r+0x8fc>)
  4041a4:	9318      	str	r3, [sp, #96]	; 0x60
  4041a6:	f01b 0f20 	tst.w	fp, #32
  4041aa:	f43f aeef 	beq.w	403f8c <_svfprintf_r+0x4f0>
  4041ae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4041b0:	3507      	adds	r5, #7
  4041b2:	f025 0307 	bic.w	r3, r5, #7
  4041b6:	f103 0208 	add.w	r2, r3, #8
  4041ba:	f01b 0f01 	tst.w	fp, #1
  4041be:	920f      	str	r2, [sp, #60]	; 0x3c
  4041c0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4041c4:	f47f aef4 	bne.w	403fb0 <_svfprintf_r+0x514>
  4041c8:	2302      	movs	r3, #2
  4041ca:	e55a      	b.n	403c82 <_svfprintf_r+0x1e6>
  4041cc:	9311      	str	r3, [sp, #68]	; 0x44
  4041ce:	2a00      	cmp	r2, #0
  4041d0:	f040 867e 	bne.w	404ed0 <_svfprintf_r+0x1434>
  4041d4:	f04b 0b10 	orr.w	fp, fp, #16
  4041d8:	f01b 0f20 	tst.w	fp, #32
  4041dc:	d0a1      	beq.n	404122 <_svfprintf_r+0x686>
  4041de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4041e0:	3507      	adds	r5, #7
  4041e2:	f025 0507 	bic.w	r5, r5, #7
  4041e6:	e9d5 2300 	ldrd	r2, r3, [r5]
  4041ea:	2a00      	cmp	r2, #0
  4041ec:	f105 0108 	add.w	r1, r5, #8
  4041f0:	461d      	mov	r5, r3
  4041f2:	f173 0300 	sbcs.w	r3, r3, #0
  4041f6:	910f      	str	r1, [sp, #60]	; 0x3c
  4041f8:	4614      	mov	r4, r2
  4041fa:	daa6      	bge.n	40414a <_svfprintf_r+0x6ae>
  4041fc:	272d      	movs	r7, #45	; 0x2d
  4041fe:	4264      	negs	r4, r4
  404200:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404204:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404208:	2301      	movs	r3, #1
  40420a:	e53d      	b.n	403c88 <_svfprintf_r+0x1ec>
  40420c:	9311      	str	r3, [sp, #68]	; 0x44
  40420e:	2a00      	cmp	r2, #0
  404210:	f040 865a 	bne.w	404ec8 <_svfprintf_r+0x142c>
  404214:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404216:	3507      	adds	r5, #7
  404218:	f025 0307 	bic.w	r3, r5, #7
  40421c:	f103 0208 	add.w	r2, r3, #8
  404220:	920f      	str	r2, [sp, #60]	; 0x3c
  404222:	681a      	ldr	r2, [r3, #0]
  404224:	9214      	str	r2, [sp, #80]	; 0x50
  404226:	685b      	ldr	r3, [r3, #4]
  404228:	9315      	str	r3, [sp, #84]	; 0x54
  40422a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40422c:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40422e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  404232:	4628      	mov	r0, r5
  404234:	4621      	mov	r1, r4
  404236:	f04f 32ff 	mov.w	r2, #4294967295
  40423a:	4b58      	ldr	r3, [pc, #352]	; (40439c <_svfprintf_r+0x900>)
  40423c:	f004 fe6c 	bl	408f18 <__aeabi_dcmpun>
  404240:	2800      	cmp	r0, #0
  404242:	f040 8348 	bne.w	4048d6 <_svfprintf_r+0xe3a>
  404246:	4628      	mov	r0, r5
  404248:	4621      	mov	r1, r4
  40424a:	f04f 32ff 	mov.w	r2, #4294967295
  40424e:	4b53      	ldr	r3, [pc, #332]	; (40439c <_svfprintf_r+0x900>)
  404250:	f004 fe44 	bl	408edc <__aeabi_dcmple>
  404254:	2800      	cmp	r0, #0
  404256:	f040 833e 	bne.w	4048d6 <_svfprintf_r+0xe3a>
  40425a:	a814      	add	r0, sp, #80	; 0x50
  40425c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  40425e:	f004 fe33 	bl	408ec8 <__aeabi_dcmplt>
  404262:	2800      	cmp	r0, #0
  404264:	f040 852f 	bne.w	404cc6 <_svfprintf_r+0x122a>
  404268:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40426c:	4e4c      	ldr	r6, [pc, #304]	; (4043a0 <_svfprintf_r+0x904>)
  40426e:	4b4d      	ldr	r3, [pc, #308]	; (4043a4 <_svfprintf_r+0x908>)
  404270:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  404274:	9007      	str	r0, [sp, #28]
  404276:	9811      	ldr	r0, [sp, #68]	; 0x44
  404278:	2203      	movs	r2, #3
  40427a:	2100      	movs	r1, #0
  40427c:	9208      	str	r2, [sp, #32]
  40427e:	910a      	str	r1, [sp, #40]	; 0x28
  404280:	2847      	cmp	r0, #71	; 0x47
  404282:	bfd8      	it	le
  404284:	461e      	movle	r6, r3
  404286:	920e      	str	r2, [sp, #56]	; 0x38
  404288:	9112      	str	r1, [sp, #72]	; 0x48
  40428a:	e51f      	b.n	403ccc <_svfprintf_r+0x230>
  40428c:	f04b 0b08 	orr.w	fp, fp, #8
  404290:	f89a 3000 	ldrb.w	r3, [sl]
  404294:	e45a      	b.n	403b4c <_svfprintf_r+0xb0>
  404296:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40429a:	2300      	movs	r3, #0
  40429c:	461c      	mov	r4, r3
  40429e:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4042a2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4042a6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4042aa:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4042ae:	2809      	cmp	r0, #9
  4042b0:	d9f5      	bls.n	40429e <_svfprintf_r+0x802>
  4042b2:	940d      	str	r4, [sp, #52]	; 0x34
  4042b4:	e44c      	b.n	403b50 <_svfprintf_r+0xb4>
  4042b6:	f04b 0b10 	orr.w	fp, fp, #16
  4042ba:	9311      	str	r3, [sp, #68]	; 0x44
  4042bc:	f01b 0320 	ands.w	r3, fp, #32
  4042c0:	f43f ae1e 	beq.w	403f00 <_svfprintf_r+0x464>
  4042c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4042c6:	3507      	adds	r5, #7
  4042c8:	f025 0307 	bic.w	r3, r5, #7
  4042cc:	f103 0208 	add.w	r2, r3, #8
  4042d0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4042d4:	920f      	str	r2, [sp, #60]	; 0x3c
  4042d6:	2300      	movs	r3, #0
  4042d8:	e4d3      	b.n	403c82 <_svfprintf_r+0x1e6>
  4042da:	9311      	str	r3, [sp, #68]	; 0x44
  4042dc:	2a00      	cmp	r2, #0
  4042de:	f040 85e0 	bne.w	404ea2 <_svfprintf_r+0x1406>
  4042e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4042e4:	2a00      	cmp	r2, #0
  4042e6:	f43f aca4 	beq.w	403c32 <_svfprintf_r+0x196>
  4042ea:	2300      	movs	r3, #0
  4042ec:	2101      	movs	r1, #1
  4042ee:	461f      	mov	r7, r3
  4042f0:	9108      	str	r1, [sp, #32]
  4042f2:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4042f6:	f8cd b01c 	str.w	fp, [sp, #28]
  4042fa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4042fe:	930a      	str	r3, [sp, #40]	; 0x28
  404300:	9312      	str	r3, [sp, #72]	; 0x48
  404302:	910e      	str	r1, [sp, #56]	; 0x38
  404304:	ae28      	add	r6, sp, #160	; 0xa0
  404306:	e4e5      	b.n	403cd4 <_svfprintf_r+0x238>
  404308:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40430a:	e535      	b.n	403d78 <_svfprintf_r+0x2dc>
  40430c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40430e:	2b65      	cmp	r3, #101	; 0x65
  404310:	f340 80a6 	ble.w	404460 <_svfprintf_r+0x9c4>
  404314:	a814      	add	r0, sp, #80	; 0x50
  404316:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  404318:	f004 fdcc 	bl	408eb4 <__aeabi_dcmpeq>
  40431c:	2800      	cmp	r0, #0
  40431e:	f000 814f 	beq.w	4045c0 <_svfprintf_r+0xb24>
  404322:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404324:	4a20      	ldr	r2, [pc, #128]	; (4043a8 <_svfprintf_r+0x90c>)
  404326:	f8c8 2000 	str.w	r2, [r8]
  40432a:	3301      	adds	r3, #1
  40432c:	3401      	adds	r4, #1
  40432e:	2201      	movs	r2, #1
  404330:	2b07      	cmp	r3, #7
  404332:	9427      	str	r4, [sp, #156]	; 0x9c
  404334:	9326      	str	r3, [sp, #152]	; 0x98
  404336:	f8c8 2004 	str.w	r2, [r8, #4]
  40433a:	f300 836a 	bgt.w	404a12 <_svfprintf_r+0xf76>
  40433e:	f108 0808 	add.w	r8, r8, #8
  404342:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404344:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404346:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404348:	4293      	cmp	r3, r2
  40434a:	db03      	blt.n	404354 <_svfprintf_r+0x8b8>
  40434c:	9b07      	ldr	r3, [sp, #28]
  40434e:	07dd      	lsls	r5, r3, #31
  404350:	f57f ad84 	bpl.w	403e5c <_svfprintf_r+0x3c0>
  404354:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404356:	9919      	ldr	r1, [sp, #100]	; 0x64
  404358:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40435a:	f8c8 2000 	str.w	r2, [r8]
  40435e:	3301      	adds	r3, #1
  404360:	440c      	add	r4, r1
  404362:	2b07      	cmp	r3, #7
  404364:	f8c8 1004 	str.w	r1, [r8, #4]
  404368:	9427      	str	r4, [sp, #156]	; 0x9c
  40436a:	9326      	str	r3, [sp, #152]	; 0x98
  40436c:	f300 839e 	bgt.w	404aac <_svfprintf_r+0x1010>
  404370:	f108 0808 	add.w	r8, r8, #8
  404374:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404376:	1e5e      	subs	r6, r3, #1
  404378:	2e00      	cmp	r6, #0
  40437a:	f77f ad6f 	ble.w	403e5c <_svfprintf_r+0x3c0>
  40437e:	2e10      	cmp	r6, #16
  404380:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404382:	4d0a      	ldr	r5, [pc, #40]	; (4043ac <_svfprintf_r+0x910>)
  404384:	f340 81f5 	ble.w	404772 <_svfprintf_r+0xcd6>
  404388:	4622      	mov	r2, r4
  40438a:	2710      	movs	r7, #16
  40438c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404390:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404392:	e013      	b.n	4043bc <_svfprintf_r+0x920>
  404394:	00409480 	.word	0x00409480
  404398:	0040946c 	.word	0x0040946c
  40439c:	7fefffff 	.word	0x7fefffff
  4043a0:	00409460 	.word	0x00409460
  4043a4:	0040945c 	.word	0x0040945c
  4043a8:	0040949c 	.word	0x0040949c
  4043ac:	004094b0 	.word	0x004094b0
  4043b0:	f108 0808 	add.w	r8, r8, #8
  4043b4:	3e10      	subs	r6, #16
  4043b6:	2e10      	cmp	r6, #16
  4043b8:	f340 81da 	ble.w	404770 <_svfprintf_r+0xcd4>
  4043bc:	3301      	adds	r3, #1
  4043be:	3210      	adds	r2, #16
  4043c0:	2b07      	cmp	r3, #7
  4043c2:	9227      	str	r2, [sp, #156]	; 0x9c
  4043c4:	9326      	str	r3, [sp, #152]	; 0x98
  4043c6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4043ca:	ddf1      	ble.n	4043b0 <_svfprintf_r+0x914>
  4043cc:	aa25      	add	r2, sp, #148	; 0x94
  4043ce:	4621      	mov	r1, r4
  4043d0:	4658      	mov	r0, fp
  4043d2:	f003 ff05 	bl	4081e0 <__ssprint_r>
  4043d6:	2800      	cmp	r0, #0
  4043d8:	f47f ac32 	bne.w	403c40 <_svfprintf_r+0x1a4>
  4043dc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4043de:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4043e0:	46c8      	mov	r8, r9
  4043e2:	e7e7      	b.n	4043b4 <_svfprintf_r+0x918>
  4043e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4043e6:	9a08      	ldr	r2, [sp, #32]
  4043e8:	1a9f      	subs	r7, r3, r2
  4043ea:	2f00      	cmp	r7, #0
  4043ec:	f77f ace7 	ble.w	403dbe <_svfprintf_r+0x322>
  4043f0:	2f10      	cmp	r7, #16
  4043f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4043f4:	4db6      	ldr	r5, [pc, #728]	; (4046d0 <_svfprintf_r+0xc34>)
  4043f6:	dd27      	ble.n	404448 <_svfprintf_r+0x9ac>
  4043f8:	4642      	mov	r2, r8
  4043fa:	4621      	mov	r1, r4
  4043fc:	46b0      	mov	r8, r6
  4043fe:	f04f 0b10 	mov.w	fp, #16
  404402:	462e      	mov	r6, r5
  404404:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404406:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404408:	e004      	b.n	404414 <_svfprintf_r+0x978>
  40440a:	3f10      	subs	r7, #16
  40440c:	2f10      	cmp	r7, #16
  40440e:	f102 0208 	add.w	r2, r2, #8
  404412:	dd15      	ble.n	404440 <_svfprintf_r+0x9a4>
  404414:	3301      	adds	r3, #1
  404416:	3110      	adds	r1, #16
  404418:	2b07      	cmp	r3, #7
  40441a:	9127      	str	r1, [sp, #156]	; 0x9c
  40441c:	9326      	str	r3, [sp, #152]	; 0x98
  40441e:	e882 0840 	stmia.w	r2, {r6, fp}
  404422:	ddf2      	ble.n	40440a <_svfprintf_r+0x96e>
  404424:	aa25      	add	r2, sp, #148	; 0x94
  404426:	4629      	mov	r1, r5
  404428:	4620      	mov	r0, r4
  40442a:	f003 fed9 	bl	4081e0 <__ssprint_r>
  40442e:	2800      	cmp	r0, #0
  404430:	f47f ac06 	bne.w	403c40 <_svfprintf_r+0x1a4>
  404434:	3f10      	subs	r7, #16
  404436:	2f10      	cmp	r7, #16
  404438:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40443a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40443c:	464a      	mov	r2, r9
  40443e:	dce9      	bgt.n	404414 <_svfprintf_r+0x978>
  404440:	4635      	mov	r5, r6
  404442:	460c      	mov	r4, r1
  404444:	4646      	mov	r6, r8
  404446:	4690      	mov	r8, r2
  404448:	3301      	adds	r3, #1
  40444a:	443c      	add	r4, r7
  40444c:	2b07      	cmp	r3, #7
  40444e:	9427      	str	r4, [sp, #156]	; 0x9c
  404450:	9326      	str	r3, [sp, #152]	; 0x98
  404452:	e888 00a0 	stmia.w	r8, {r5, r7}
  404456:	f300 8232 	bgt.w	4048be <_svfprintf_r+0xe22>
  40445a:	f108 0808 	add.w	r8, r8, #8
  40445e:	e4ae      	b.n	403dbe <_svfprintf_r+0x322>
  404460:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404462:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404464:	2b01      	cmp	r3, #1
  404466:	f340 81fe 	ble.w	404866 <_svfprintf_r+0xdca>
  40446a:	3701      	adds	r7, #1
  40446c:	3401      	adds	r4, #1
  40446e:	2301      	movs	r3, #1
  404470:	2f07      	cmp	r7, #7
  404472:	9427      	str	r4, [sp, #156]	; 0x9c
  404474:	9726      	str	r7, [sp, #152]	; 0x98
  404476:	f8c8 6000 	str.w	r6, [r8]
  40447a:	f8c8 3004 	str.w	r3, [r8, #4]
  40447e:	f300 8203 	bgt.w	404888 <_svfprintf_r+0xdec>
  404482:	f108 0808 	add.w	r8, r8, #8
  404486:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404488:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40448a:	f8c8 3000 	str.w	r3, [r8]
  40448e:	3701      	adds	r7, #1
  404490:	4414      	add	r4, r2
  404492:	2f07      	cmp	r7, #7
  404494:	9427      	str	r4, [sp, #156]	; 0x9c
  404496:	9726      	str	r7, [sp, #152]	; 0x98
  404498:	f8c8 2004 	str.w	r2, [r8, #4]
  40449c:	f300 8200 	bgt.w	4048a0 <_svfprintf_r+0xe04>
  4044a0:	f108 0808 	add.w	r8, r8, #8
  4044a4:	a814      	add	r0, sp, #80	; 0x50
  4044a6:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  4044a8:	f004 fd04 	bl	408eb4 <__aeabi_dcmpeq>
  4044ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4044ae:	2800      	cmp	r0, #0
  4044b0:	f040 8101 	bne.w	4046b6 <_svfprintf_r+0xc1a>
  4044b4:	3b01      	subs	r3, #1
  4044b6:	3701      	adds	r7, #1
  4044b8:	3601      	adds	r6, #1
  4044ba:	441c      	add	r4, r3
  4044bc:	2f07      	cmp	r7, #7
  4044be:	9726      	str	r7, [sp, #152]	; 0x98
  4044c0:	9427      	str	r4, [sp, #156]	; 0x9c
  4044c2:	f8c8 6000 	str.w	r6, [r8]
  4044c6:	f8c8 3004 	str.w	r3, [r8, #4]
  4044ca:	f300 8128 	bgt.w	40471e <_svfprintf_r+0xc82>
  4044ce:	f108 0808 	add.w	r8, r8, #8
  4044d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4044d4:	f8c8 2004 	str.w	r2, [r8, #4]
  4044d8:	3701      	adds	r7, #1
  4044da:	4414      	add	r4, r2
  4044dc:	ab21      	add	r3, sp, #132	; 0x84
  4044de:	2f07      	cmp	r7, #7
  4044e0:	9427      	str	r4, [sp, #156]	; 0x9c
  4044e2:	9726      	str	r7, [sp, #152]	; 0x98
  4044e4:	f8c8 3000 	str.w	r3, [r8]
  4044e8:	f77f acb6 	ble.w	403e58 <_svfprintf_r+0x3bc>
  4044ec:	aa25      	add	r2, sp, #148	; 0x94
  4044ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4044f0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4044f2:	f003 fe75 	bl	4081e0 <__ssprint_r>
  4044f6:	2800      	cmp	r0, #0
  4044f8:	f47f aba2 	bne.w	403c40 <_svfprintf_r+0x1a4>
  4044fc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4044fe:	46c8      	mov	r8, r9
  404500:	e4ac      	b.n	403e5c <_svfprintf_r+0x3c0>
  404502:	aa25      	add	r2, sp, #148	; 0x94
  404504:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404506:	980c      	ldr	r0, [sp, #48]	; 0x30
  404508:	f003 fe6a 	bl	4081e0 <__ssprint_r>
  40450c:	2800      	cmp	r0, #0
  40450e:	f43f acee 	beq.w	403eee <_svfprintf_r+0x452>
  404512:	f7ff bb95 	b.w	403c40 <_svfprintf_r+0x1a4>
  404516:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40451a:	2b01      	cmp	r3, #1
  40451c:	f000 8135 	beq.w	40478a <_svfprintf_r+0xcee>
  404520:	2b02      	cmp	r3, #2
  404522:	d125      	bne.n	404570 <_svfprintf_r+0xad4>
  404524:	f8cd b01c 	str.w	fp, [sp, #28]
  404528:	2400      	movs	r4, #0
  40452a:	2500      	movs	r5, #0
  40452c:	e621      	b.n	404172 <_svfprintf_r+0x6d6>
  40452e:	aa25      	add	r2, sp, #148	; 0x94
  404530:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404532:	980c      	ldr	r0, [sp, #48]	; 0x30
  404534:	f003 fe54 	bl	4081e0 <__ssprint_r>
  404538:	2800      	cmp	r0, #0
  40453a:	f47f ab81 	bne.w	403c40 <_svfprintf_r+0x1a4>
  40453e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404540:	46c8      	mov	r8, r9
  404542:	e478      	b.n	403e36 <_svfprintf_r+0x39a>
  404544:	aa25      	add	r2, sp, #148	; 0x94
  404546:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404548:	980c      	ldr	r0, [sp, #48]	; 0x30
  40454a:	f003 fe49 	bl	4081e0 <__ssprint_r>
  40454e:	2800      	cmp	r0, #0
  404550:	f47f ab76 	bne.w	403c40 <_svfprintf_r+0x1a4>
  404554:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404556:	46c8      	mov	r8, r9
  404558:	e41e      	b.n	403d98 <_svfprintf_r+0x2fc>
  40455a:	aa25      	add	r2, sp, #148	; 0x94
  40455c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40455e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404560:	f003 fe3e 	bl	4081e0 <__ssprint_r>
  404564:	2800      	cmp	r0, #0
  404566:	f47f ab6b 	bne.w	403c40 <_svfprintf_r+0x1a4>
  40456a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40456c:	46c8      	mov	r8, r9
  40456e:	e423      	b.n	403db8 <_svfprintf_r+0x31c>
  404570:	f8cd b01c 	str.w	fp, [sp, #28]
  404574:	2400      	movs	r4, #0
  404576:	2500      	movs	r5, #0
  404578:	4649      	mov	r1, r9
  40457a:	e000      	b.n	40457e <_svfprintf_r+0xae2>
  40457c:	4631      	mov	r1, r6
  40457e:	08e2      	lsrs	r2, r4, #3
  404580:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404584:	08e8      	lsrs	r0, r5, #3
  404586:	f004 0307 	and.w	r3, r4, #7
  40458a:	4605      	mov	r5, r0
  40458c:	4614      	mov	r4, r2
  40458e:	3330      	adds	r3, #48	; 0x30
  404590:	ea54 0205 	orrs.w	r2, r4, r5
  404594:	f801 3c01 	strb.w	r3, [r1, #-1]
  404598:	f101 36ff 	add.w	r6, r1, #4294967295
  40459c:	d1ee      	bne.n	40457c <_svfprintf_r+0xae0>
  40459e:	9a07      	ldr	r2, [sp, #28]
  4045a0:	07d2      	lsls	r2, r2, #31
  4045a2:	f57f adf6 	bpl.w	404192 <_svfprintf_r+0x6f6>
  4045a6:	2b30      	cmp	r3, #48	; 0x30
  4045a8:	f43f adf3 	beq.w	404192 <_svfprintf_r+0x6f6>
  4045ac:	3902      	subs	r1, #2
  4045ae:	2330      	movs	r3, #48	; 0x30
  4045b0:	f806 3c01 	strb.w	r3, [r6, #-1]
  4045b4:	eba9 0301 	sub.w	r3, r9, r1
  4045b8:	930e      	str	r3, [sp, #56]	; 0x38
  4045ba:	460e      	mov	r6, r1
  4045bc:	f7ff bb7e 	b.w	403cbc <_svfprintf_r+0x220>
  4045c0:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4045c2:	2900      	cmp	r1, #0
  4045c4:	f340 822f 	ble.w	404a26 <_svfprintf_r+0xf8a>
  4045c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4045ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4045cc:	4293      	cmp	r3, r2
  4045ce:	bfa8      	it	ge
  4045d0:	4613      	movge	r3, r2
  4045d2:	2b00      	cmp	r3, #0
  4045d4:	461f      	mov	r7, r3
  4045d6:	dd0d      	ble.n	4045f4 <_svfprintf_r+0xb58>
  4045d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4045da:	f8c8 6000 	str.w	r6, [r8]
  4045de:	3301      	adds	r3, #1
  4045e0:	443c      	add	r4, r7
  4045e2:	2b07      	cmp	r3, #7
  4045e4:	9427      	str	r4, [sp, #156]	; 0x9c
  4045e6:	f8c8 7004 	str.w	r7, [r8, #4]
  4045ea:	9326      	str	r3, [sp, #152]	; 0x98
  4045ec:	f300 8320 	bgt.w	404c30 <_svfprintf_r+0x1194>
  4045f0:	f108 0808 	add.w	r8, r8, #8
  4045f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4045f6:	2f00      	cmp	r7, #0
  4045f8:	bfa8      	it	ge
  4045fa:	1bdb      	subge	r3, r3, r7
  4045fc:	2b00      	cmp	r3, #0
  4045fe:	461f      	mov	r7, r3
  404600:	f340 80d7 	ble.w	4047b2 <_svfprintf_r+0xd16>
  404604:	2f10      	cmp	r7, #16
  404606:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404608:	4d31      	ldr	r5, [pc, #196]	; (4046d0 <_svfprintf_r+0xc34>)
  40460a:	f340 81ee 	ble.w	4049ea <_svfprintf_r+0xf4e>
  40460e:	4642      	mov	r2, r8
  404610:	4621      	mov	r1, r4
  404612:	46b0      	mov	r8, r6
  404614:	f04f 0b10 	mov.w	fp, #16
  404618:	462e      	mov	r6, r5
  40461a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40461c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40461e:	e004      	b.n	40462a <_svfprintf_r+0xb8e>
  404620:	3208      	adds	r2, #8
  404622:	3f10      	subs	r7, #16
  404624:	2f10      	cmp	r7, #16
  404626:	f340 81dc 	ble.w	4049e2 <_svfprintf_r+0xf46>
  40462a:	3301      	adds	r3, #1
  40462c:	3110      	adds	r1, #16
  40462e:	2b07      	cmp	r3, #7
  404630:	9127      	str	r1, [sp, #156]	; 0x9c
  404632:	9326      	str	r3, [sp, #152]	; 0x98
  404634:	e882 0840 	stmia.w	r2, {r6, fp}
  404638:	ddf2      	ble.n	404620 <_svfprintf_r+0xb84>
  40463a:	aa25      	add	r2, sp, #148	; 0x94
  40463c:	4629      	mov	r1, r5
  40463e:	4620      	mov	r0, r4
  404640:	f003 fdce 	bl	4081e0 <__ssprint_r>
  404644:	2800      	cmp	r0, #0
  404646:	f47f aafb 	bne.w	403c40 <_svfprintf_r+0x1a4>
  40464a:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40464c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40464e:	464a      	mov	r2, r9
  404650:	e7e7      	b.n	404622 <_svfprintf_r+0xb86>
  404652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404654:	930e      	str	r3, [sp, #56]	; 0x38
  404656:	464e      	mov	r6, r9
  404658:	f7ff bb30 	b.w	403cbc <_svfprintf_r+0x220>
  40465c:	2d00      	cmp	r5, #0
  40465e:	bf08      	it	eq
  404660:	2c0a      	cmpeq	r4, #10
  404662:	f0c0 8090 	bcc.w	404786 <_svfprintf_r+0xcea>
  404666:	464e      	mov	r6, r9
  404668:	4620      	mov	r0, r4
  40466a:	4629      	mov	r1, r5
  40466c:	220a      	movs	r2, #10
  40466e:	2300      	movs	r3, #0
  404670:	f004 fc90 	bl	408f94 <__aeabi_uldivmod>
  404674:	3230      	adds	r2, #48	; 0x30
  404676:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40467a:	4620      	mov	r0, r4
  40467c:	4629      	mov	r1, r5
  40467e:	2300      	movs	r3, #0
  404680:	220a      	movs	r2, #10
  404682:	f004 fc87 	bl	408f94 <__aeabi_uldivmod>
  404686:	4604      	mov	r4, r0
  404688:	460d      	mov	r5, r1
  40468a:	ea54 0305 	orrs.w	r3, r4, r5
  40468e:	d1eb      	bne.n	404668 <_svfprintf_r+0xbcc>
  404690:	eba9 0306 	sub.w	r3, r9, r6
  404694:	930e      	str	r3, [sp, #56]	; 0x38
  404696:	f7ff bb11 	b.w	403cbc <_svfprintf_r+0x220>
  40469a:	aa25      	add	r2, sp, #148	; 0x94
  40469c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40469e:	980c      	ldr	r0, [sp, #48]	; 0x30
  4046a0:	f003 fd9e 	bl	4081e0 <__ssprint_r>
  4046a4:	2800      	cmp	r0, #0
  4046a6:	f47f aacb 	bne.w	403c40 <_svfprintf_r+0x1a4>
  4046aa:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4046ae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4046b0:	46c8      	mov	r8, r9
  4046b2:	f7ff bb61 	b.w	403d78 <_svfprintf_r+0x2dc>
  4046b6:	1e5e      	subs	r6, r3, #1
  4046b8:	2e00      	cmp	r6, #0
  4046ba:	f77f af0a 	ble.w	4044d2 <_svfprintf_r+0xa36>
  4046be:	2e10      	cmp	r6, #16
  4046c0:	4d03      	ldr	r5, [pc, #12]	; (4046d0 <_svfprintf_r+0xc34>)
  4046c2:	dd23      	ble.n	40470c <_svfprintf_r+0xc70>
  4046c4:	4622      	mov	r2, r4
  4046c6:	f04f 0b10 	mov.w	fp, #16
  4046ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4046cc:	e007      	b.n	4046de <_svfprintf_r+0xc42>
  4046ce:	bf00      	nop
  4046d0:	004094b0 	.word	0x004094b0
  4046d4:	3e10      	subs	r6, #16
  4046d6:	2e10      	cmp	r6, #16
  4046d8:	f108 0808 	add.w	r8, r8, #8
  4046dc:	dd15      	ble.n	40470a <_svfprintf_r+0xc6e>
  4046de:	3701      	adds	r7, #1
  4046e0:	3210      	adds	r2, #16
  4046e2:	2f07      	cmp	r7, #7
  4046e4:	9227      	str	r2, [sp, #156]	; 0x9c
  4046e6:	9726      	str	r7, [sp, #152]	; 0x98
  4046e8:	e888 0820 	stmia.w	r8, {r5, fp}
  4046ec:	ddf2      	ble.n	4046d4 <_svfprintf_r+0xc38>
  4046ee:	aa25      	add	r2, sp, #148	; 0x94
  4046f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4046f2:	4620      	mov	r0, r4
  4046f4:	f003 fd74 	bl	4081e0 <__ssprint_r>
  4046f8:	2800      	cmp	r0, #0
  4046fa:	f47f aaa1 	bne.w	403c40 <_svfprintf_r+0x1a4>
  4046fe:	3e10      	subs	r6, #16
  404700:	2e10      	cmp	r6, #16
  404702:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404704:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404706:	46c8      	mov	r8, r9
  404708:	dce9      	bgt.n	4046de <_svfprintf_r+0xc42>
  40470a:	4614      	mov	r4, r2
  40470c:	3701      	adds	r7, #1
  40470e:	4434      	add	r4, r6
  404710:	2f07      	cmp	r7, #7
  404712:	9427      	str	r4, [sp, #156]	; 0x9c
  404714:	9726      	str	r7, [sp, #152]	; 0x98
  404716:	e888 0060 	stmia.w	r8, {r5, r6}
  40471a:	f77f aed8 	ble.w	4044ce <_svfprintf_r+0xa32>
  40471e:	aa25      	add	r2, sp, #148	; 0x94
  404720:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404722:	980c      	ldr	r0, [sp, #48]	; 0x30
  404724:	f003 fd5c 	bl	4081e0 <__ssprint_r>
  404728:	2800      	cmp	r0, #0
  40472a:	f47f aa89 	bne.w	403c40 <_svfprintf_r+0x1a4>
  40472e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404730:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404732:	46c8      	mov	r8, r9
  404734:	e6cd      	b.n	4044d2 <_svfprintf_r+0xa36>
  404736:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404738:	6814      	ldr	r4, [r2, #0]
  40473a:	4613      	mov	r3, r2
  40473c:	3304      	adds	r3, #4
  40473e:	17e5      	asrs	r5, r4, #31
  404740:	930f      	str	r3, [sp, #60]	; 0x3c
  404742:	4622      	mov	r2, r4
  404744:	462b      	mov	r3, r5
  404746:	e4fc      	b.n	404142 <_svfprintf_r+0x6a6>
  404748:	3204      	adds	r2, #4
  40474a:	681c      	ldr	r4, [r3, #0]
  40474c:	920f      	str	r2, [sp, #60]	; 0x3c
  40474e:	2301      	movs	r3, #1
  404750:	2500      	movs	r5, #0
  404752:	f7ff ba96 	b.w	403c82 <_svfprintf_r+0x1e6>
  404756:	681c      	ldr	r4, [r3, #0]
  404758:	3304      	adds	r3, #4
  40475a:	930f      	str	r3, [sp, #60]	; 0x3c
  40475c:	2500      	movs	r5, #0
  40475e:	e423      	b.n	403fa8 <_svfprintf_r+0x50c>
  404760:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404762:	460a      	mov	r2, r1
  404764:	3204      	adds	r2, #4
  404766:	680c      	ldr	r4, [r1, #0]
  404768:	920f      	str	r2, [sp, #60]	; 0x3c
  40476a:	2500      	movs	r5, #0
  40476c:	f7ff ba89 	b.w	403c82 <_svfprintf_r+0x1e6>
  404770:	4614      	mov	r4, r2
  404772:	3301      	adds	r3, #1
  404774:	4434      	add	r4, r6
  404776:	2b07      	cmp	r3, #7
  404778:	9427      	str	r4, [sp, #156]	; 0x9c
  40477a:	9326      	str	r3, [sp, #152]	; 0x98
  40477c:	e888 0060 	stmia.w	r8, {r5, r6}
  404780:	f77f ab6a 	ble.w	403e58 <_svfprintf_r+0x3bc>
  404784:	e6b2      	b.n	4044ec <_svfprintf_r+0xa50>
  404786:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40478a:	f8cd b01c 	str.w	fp, [sp, #28]
  40478e:	ae42      	add	r6, sp, #264	; 0x108
  404790:	3430      	adds	r4, #48	; 0x30
  404792:	2301      	movs	r3, #1
  404794:	f806 4d41 	strb.w	r4, [r6, #-65]!
  404798:	930e      	str	r3, [sp, #56]	; 0x38
  40479a:	f7ff ba8f 	b.w	403cbc <_svfprintf_r+0x220>
  40479e:	aa25      	add	r2, sp, #148	; 0x94
  4047a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4047a2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4047a4:	f003 fd1c 	bl	4081e0 <__ssprint_r>
  4047a8:	2800      	cmp	r0, #0
  4047aa:	f47f aa49 	bne.w	403c40 <_svfprintf_r+0x1a4>
  4047ae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4047b0:	46c8      	mov	r8, r9
  4047b2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4047b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4047b6:	429a      	cmp	r2, r3
  4047b8:	db44      	blt.n	404844 <_svfprintf_r+0xda8>
  4047ba:	9b07      	ldr	r3, [sp, #28]
  4047bc:	07d9      	lsls	r1, r3, #31
  4047be:	d441      	bmi.n	404844 <_svfprintf_r+0xda8>
  4047c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4047c2:	9812      	ldr	r0, [sp, #72]	; 0x48
  4047c4:	1a9a      	subs	r2, r3, r2
  4047c6:	1a1d      	subs	r5, r3, r0
  4047c8:	4295      	cmp	r5, r2
  4047ca:	bfa8      	it	ge
  4047cc:	4615      	movge	r5, r2
  4047ce:	2d00      	cmp	r5, #0
  4047d0:	dd0e      	ble.n	4047f0 <_svfprintf_r+0xd54>
  4047d2:	9926      	ldr	r1, [sp, #152]	; 0x98
  4047d4:	f8c8 5004 	str.w	r5, [r8, #4]
  4047d8:	3101      	adds	r1, #1
  4047da:	4406      	add	r6, r0
  4047dc:	442c      	add	r4, r5
  4047de:	2907      	cmp	r1, #7
  4047e0:	f8c8 6000 	str.w	r6, [r8]
  4047e4:	9427      	str	r4, [sp, #156]	; 0x9c
  4047e6:	9126      	str	r1, [sp, #152]	; 0x98
  4047e8:	f300 823b 	bgt.w	404c62 <_svfprintf_r+0x11c6>
  4047ec:	f108 0808 	add.w	r8, r8, #8
  4047f0:	2d00      	cmp	r5, #0
  4047f2:	bfac      	ite	ge
  4047f4:	1b56      	subge	r6, r2, r5
  4047f6:	4616      	movlt	r6, r2
  4047f8:	2e00      	cmp	r6, #0
  4047fa:	f77f ab2f 	ble.w	403e5c <_svfprintf_r+0x3c0>
  4047fe:	2e10      	cmp	r6, #16
  404800:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404802:	4db0      	ldr	r5, [pc, #704]	; (404ac4 <_svfprintf_r+0x1028>)
  404804:	ddb5      	ble.n	404772 <_svfprintf_r+0xcd6>
  404806:	4622      	mov	r2, r4
  404808:	2710      	movs	r7, #16
  40480a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40480e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404810:	e004      	b.n	40481c <_svfprintf_r+0xd80>
  404812:	f108 0808 	add.w	r8, r8, #8
  404816:	3e10      	subs	r6, #16
  404818:	2e10      	cmp	r6, #16
  40481a:	dda9      	ble.n	404770 <_svfprintf_r+0xcd4>
  40481c:	3301      	adds	r3, #1
  40481e:	3210      	adds	r2, #16
  404820:	2b07      	cmp	r3, #7
  404822:	9227      	str	r2, [sp, #156]	; 0x9c
  404824:	9326      	str	r3, [sp, #152]	; 0x98
  404826:	e888 00a0 	stmia.w	r8, {r5, r7}
  40482a:	ddf2      	ble.n	404812 <_svfprintf_r+0xd76>
  40482c:	aa25      	add	r2, sp, #148	; 0x94
  40482e:	4621      	mov	r1, r4
  404830:	4658      	mov	r0, fp
  404832:	f003 fcd5 	bl	4081e0 <__ssprint_r>
  404836:	2800      	cmp	r0, #0
  404838:	f47f aa02 	bne.w	403c40 <_svfprintf_r+0x1a4>
  40483c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40483e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404840:	46c8      	mov	r8, r9
  404842:	e7e8      	b.n	404816 <_svfprintf_r+0xd7a>
  404844:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404846:	9819      	ldr	r0, [sp, #100]	; 0x64
  404848:	991a      	ldr	r1, [sp, #104]	; 0x68
  40484a:	f8c8 1000 	str.w	r1, [r8]
  40484e:	3301      	adds	r3, #1
  404850:	4404      	add	r4, r0
  404852:	2b07      	cmp	r3, #7
  404854:	9427      	str	r4, [sp, #156]	; 0x9c
  404856:	f8c8 0004 	str.w	r0, [r8, #4]
  40485a:	9326      	str	r3, [sp, #152]	; 0x98
  40485c:	f300 81f5 	bgt.w	404c4a <_svfprintf_r+0x11ae>
  404860:	f108 0808 	add.w	r8, r8, #8
  404864:	e7ac      	b.n	4047c0 <_svfprintf_r+0xd24>
  404866:	9b07      	ldr	r3, [sp, #28]
  404868:	07da      	lsls	r2, r3, #31
  40486a:	f53f adfe 	bmi.w	40446a <_svfprintf_r+0x9ce>
  40486e:	3701      	adds	r7, #1
  404870:	3401      	adds	r4, #1
  404872:	2301      	movs	r3, #1
  404874:	2f07      	cmp	r7, #7
  404876:	9427      	str	r4, [sp, #156]	; 0x9c
  404878:	9726      	str	r7, [sp, #152]	; 0x98
  40487a:	f8c8 6000 	str.w	r6, [r8]
  40487e:	f8c8 3004 	str.w	r3, [r8, #4]
  404882:	f77f ae24 	ble.w	4044ce <_svfprintf_r+0xa32>
  404886:	e74a      	b.n	40471e <_svfprintf_r+0xc82>
  404888:	aa25      	add	r2, sp, #148	; 0x94
  40488a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40488c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40488e:	f003 fca7 	bl	4081e0 <__ssprint_r>
  404892:	2800      	cmp	r0, #0
  404894:	f47f a9d4 	bne.w	403c40 <_svfprintf_r+0x1a4>
  404898:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40489a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40489c:	46c8      	mov	r8, r9
  40489e:	e5f2      	b.n	404486 <_svfprintf_r+0x9ea>
  4048a0:	aa25      	add	r2, sp, #148	; 0x94
  4048a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048a6:	f003 fc9b 	bl	4081e0 <__ssprint_r>
  4048aa:	2800      	cmp	r0, #0
  4048ac:	f47f a9c8 	bne.w	403c40 <_svfprintf_r+0x1a4>
  4048b0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4048b2:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4048b4:	46c8      	mov	r8, r9
  4048b6:	e5f5      	b.n	4044a4 <_svfprintf_r+0xa08>
  4048b8:	464e      	mov	r6, r9
  4048ba:	f7ff b9ff 	b.w	403cbc <_svfprintf_r+0x220>
  4048be:	aa25      	add	r2, sp, #148	; 0x94
  4048c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048c2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048c4:	f003 fc8c 	bl	4081e0 <__ssprint_r>
  4048c8:	2800      	cmp	r0, #0
  4048ca:	f47f a9b9 	bne.w	403c40 <_svfprintf_r+0x1a4>
  4048ce:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4048d0:	46c8      	mov	r8, r9
  4048d2:	f7ff ba74 	b.w	403dbe <_svfprintf_r+0x322>
  4048d6:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4048d8:	4622      	mov	r2, r4
  4048da:	4620      	mov	r0, r4
  4048dc:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4048de:	4623      	mov	r3, r4
  4048e0:	4621      	mov	r1, r4
  4048e2:	f004 fb19 	bl	408f18 <__aeabi_dcmpun>
  4048e6:	2800      	cmp	r0, #0
  4048e8:	f040 8286 	bne.w	404df8 <_svfprintf_r+0x135c>
  4048ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4048ee:	3301      	adds	r3, #1
  4048f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4048f2:	f023 0320 	bic.w	r3, r3, #32
  4048f6:	930e      	str	r3, [sp, #56]	; 0x38
  4048f8:	f000 81e2 	beq.w	404cc0 <_svfprintf_r+0x1224>
  4048fc:	2b47      	cmp	r3, #71	; 0x47
  4048fe:	f000 811e 	beq.w	404b3e <_svfprintf_r+0x10a2>
  404902:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  404906:	9307      	str	r3, [sp, #28]
  404908:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40490a:	1e1f      	subs	r7, r3, #0
  40490c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40490e:	9308      	str	r3, [sp, #32]
  404910:	bfbb      	ittet	lt
  404912:	463b      	movlt	r3, r7
  404914:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404918:	2300      	movge	r3, #0
  40491a:	232d      	movlt	r3, #45	; 0x2d
  40491c:	9310      	str	r3, [sp, #64]	; 0x40
  40491e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404920:	2b66      	cmp	r3, #102	; 0x66
  404922:	f000 81bb 	beq.w	404c9c <_svfprintf_r+0x1200>
  404926:	2b46      	cmp	r3, #70	; 0x46
  404928:	f000 80df 	beq.w	404aea <_svfprintf_r+0x104e>
  40492c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40492e:	9a08      	ldr	r2, [sp, #32]
  404930:	2b45      	cmp	r3, #69	; 0x45
  404932:	bf0c      	ite	eq
  404934:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  404936:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  404938:	a823      	add	r0, sp, #140	; 0x8c
  40493a:	a920      	add	r1, sp, #128	; 0x80
  40493c:	bf08      	it	eq
  40493e:	1c5d      	addeq	r5, r3, #1
  404940:	9004      	str	r0, [sp, #16]
  404942:	9103      	str	r1, [sp, #12]
  404944:	a81f      	add	r0, sp, #124	; 0x7c
  404946:	2102      	movs	r1, #2
  404948:	463b      	mov	r3, r7
  40494a:	9002      	str	r0, [sp, #8]
  40494c:	9501      	str	r5, [sp, #4]
  40494e:	9100      	str	r1, [sp, #0]
  404950:	980c      	ldr	r0, [sp, #48]	; 0x30
  404952:	f001 fa49 	bl	405de8 <_dtoa_r>
  404956:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404958:	2b67      	cmp	r3, #103	; 0x67
  40495a:	4606      	mov	r6, r0
  40495c:	f040 81e0 	bne.w	404d20 <_svfprintf_r+0x1284>
  404960:	f01b 0f01 	tst.w	fp, #1
  404964:	f000 8246 	beq.w	404df4 <_svfprintf_r+0x1358>
  404968:	1974      	adds	r4, r6, r5
  40496a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40496c:	9808      	ldr	r0, [sp, #32]
  40496e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404970:	4639      	mov	r1, r7
  404972:	f004 fa9f 	bl	408eb4 <__aeabi_dcmpeq>
  404976:	2800      	cmp	r0, #0
  404978:	f040 8165 	bne.w	404c46 <_svfprintf_r+0x11aa>
  40497c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40497e:	42a3      	cmp	r3, r4
  404980:	d206      	bcs.n	404990 <_svfprintf_r+0xef4>
  404982:	2130      	movs	r1, #48	; 0x30
  404984:	1c5a      	adds	r2, r3, #1
  404986:	9223      	str	r2, [sp, #140]	; 0x8c
  404988:	7019      	strb	r1, [r3, #0]
  40498a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40498c:	429c      	cmp	r4, r3
  40498e:	d8f9      	bhi.n	404984 <_svfprintf_r+0xee8>
  404990:	1b9b      	subs	r3, r3, r6
  404992:	9313      	str	r3, [sp, #76]	; 0x4c
  404994:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404996:	2b47      	cmp	r3, #71	; 0x47
  404998:	f000 80e9 	beq.w	404b6e <_svfprintf_r+0x10d2>
  40499c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40499e:	2b65      	cmp	r3, #101	; 0x65
  4049a0:	f340 81cd 	ble.w	404d3e <_svfprintf_r+0x12a2>
  4049a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4049a6:	2b66      	cmp	r3, #102	; 0x66
  4049a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4049aa:	9312      	str	r3, [sp, #72]	; 0x48
  4049ac:	f000 819e 	beq.w	404cec <_svfprintf_r+0x1250>
  4049b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4049b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4049b4:	4619      	mov	r1, r3
  4049b6:	4291      	cmp	r1, r2
  4049b8:	f300 818a 	bgt.w	404cd0 <_svfprintf_r+0x1234>
  4049bc:	f01b 0f01 	tst.w	fp, #1
  4049c0:	f040 8213 	bne.w	404dea <_svfprintf_r+0x134e>
  4049c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4049c8:	9308      	str	r3, [sp, #32]
  4049ca:	2367      	movs	r3, #103	; 0x67
  4049cc:	920e      	str	r2, [sp, #56]	; 0x38
  4049ce:	9311      	str	r3, [sp, #68]	; 0x44
  4049d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4049d2:	2b00      	cmp	r3, #0
  4049d4:	f040 80c4 	bne.w	404b60 <_svfprintf_r+0x10c4>
  4049d8:	930a      	str	r3, [sp, #40]	; 0x28
  4049da:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4049de:	f7ff b975 	b.w	403ccc <_svfprintf_r+0x230>
  4049e2:	4635      	mov	r5, r6
  4049e4:	460c      	mov	r4, r1
  4049e6:	4646      	mov	r6, r8
  4049e8:	4690      	mov	r8, r2
  4049ea:	3301      	adds	r3, #1
  4049ec:	443c      	add	r4, r7
  4049ee:	2b07      	cmp	r3, #7
  4049f0:	9427      	str	r4, [sp, #156]	; 0x9c
  4049f2:	9326      	str	r3, [sp, #152]	; 0x98
  4049f4:	e888 00a0 	stmia.w	r8, {r5, r7}
  4049f8:	f73f aed1 	bgt.w	40479e <_svfprintf_r+0xd02>
  4049fc:	f108 0808 	add.w	r8, r8, #8
  404a00:	e6d7      	b.n	4047b2 <_svfprintf_r+0xd16>
  404a02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404a04:	6813      	ldr	r3, [r2, #0]
  404a06:	3204      	adds	r2, #4
  404a08:	920f      	str	r2, [sp, #60]	; 0x3c
  404a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404a0c:	601a      	str	r2, [r3, #0]
  404a0e:	f7ff b86c 	b.w	403aea <_svfprintf_r+0x4e>
  404a12:	aa25      	add	r2, sp, #148	; 0x94
  404a14:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a16:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a18:	f003 fbe2 	bl	4081e0 <__ssprint_r>
  404a1c:	2800      	cmp	r0, #0
  404a1e:	f47f a90f 	bne.w	403c40 <_svfprintf_r+0x1a4>
  404a22:	46c8      	mov	r8, r9
  404a24:	e48d      	b.n	404342 <_svfprintf_r+0x8a6>
  404a26:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a28:	4a27      	ldr	r2, [pc, #156]	; (404ac8 <_svfprintf_r+0x102c>)
  404a2a:	f8c8 2000 	str.w	r2, [r8]
  404a2e:	3301      	adds	r3, #1
  404a30:	3401      	adds	r4, #1
  404a32:	2201      	movs	r2, #1
  404a34:	2b07      	cmp	r3, #7
  404a36:	9427      	str	r4, [sp, #156]	; 0x9c
  404a38:	9326      	str	r3, [sp, #152]	; 0x98
  404a3a:	f8c8 2004 	str.w	r2, [r8, #4]
  404a3e:	dc72      	bgt.n	404b26 <_svfprintf_r+0x108a>
  404a40:	f108 0808 	add.w	r8, r8, #8
  404a44:	b929      	cbnz	r1, 404a52 <_svfprintf_r+0xfb6>
  404a46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404a48:	b91b      	cbnz	r3, 404a52 <_svfprintf_r+0xfb6>
  404a4a:	9b07      	ldr	r3, [sp, #28]
  404a4c:	07d8      	lsls	r0, r3, #31
  404a4e:	f57f aa05 	bpl.w	403e5c <_svfprintf_r+0x3c0>
  404a52:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a54:	9819      	ldr	r0, [sp, #100]	; 0x64
  404a56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404a58:	f8c8 2000 	str.w	r2, [r8]
  404a5c:	3301      	adds	r3, #1
  404a5e:	4602      	mov	r2, r0
  404a60:	4422      	add	r2, r4
  404a62:	2b07      	cmp	r3, #7
  404a64:	9227      	str	r2, [sp, #156]	; 0x9c
  404a66:	f8c8 0004 	str.w	r0, [r8, #4]
  404a6a:	9326      	str	r3, [sp, #152]	; 0x98
  404a6c:	f300 818d 	bgt.w	404d8a <_svfprintf_r+0x12ee>
  404a70:	f108 0808 	add.w	r8, r8, #8
  404a74:	2900      	cmp	r1, #0
  404a76:	f2c0 8165 	blt.w	404d44 <_svfprintf_r+0x12a8>
  404a7a:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404a7c:	f8c8 6000 	str.w	r6, [r8]
  404a80:	3301      	adds	r3, #1
  404a82:	188c      	adds	r4, r1, r2
  404a84:	2b07      	cmp	r3, #7
  404a86:	9427      	str	r4, [sp, #156]	; 0x9c
  404a88:	9326      	str	r3, [sp, #152]	; 0x98
  404a8a:	f8c8 1004 	str.w	r1, [r8, #4]
  404a8e:	f77f a9e3 	ble.w	403e58 <_svfprintf_r+0x3bc>
  404a92:	e52b      	b.n	4044ec <_svfprintf_r+0xa50>
  404a94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404a96:	9909      	ldr	r1, [sp, #36]	; 0x24
  404a98:	6813      	ldr	r3, [r2, #0]
  404a9a:	17cd      	asrs	r5, r1, #31
  404a9c:	4608      	mov	r0, r1
  404a9e:	3204      	adds	r2, #4
  404aa0:	4629      	mov	r1, r5
  404aa2:	920f      	str	r2, [sp, #60]	; 0x3c
  404aa4:	e9c3 0100 	strd	r0, r1, [r3]
  404aa8:	f7ff b81f 	b.w	403aea <_svfprintf_r+0x4e>
  404aac:	aa25      	add	r2, sp, #148	; 0x94
  404aae:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404ab0:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ab2:	f003 fb95 	bl	4081e0 <__ssprint_r>
  404ab6:	2800      	cmp	r0, #0
  404ab8:	f47f a8c2 	bne.w	403c40 <_svfprintf_r+0x1a4>
  404abc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404abe:	46c8      	mov	r8, r9
  404ac0:	e458      	b.n	404374 <_svfprintf_r+0x8d8>
  404ac2:	bf00      	nop
  404ac4:	004094b0 	.word	0x004094b0
  404ac8:	0040949c 	.word	0x0040949c
  404acc:	2140      	movs	r1, #64	; 0x40
  404ace:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ad0:	f7fe fa90 	bl	402ff4 <_malloc_r>
  404ad4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404ad6:	6010      	str	r0, [r2, #0]
  404ad8:	6110      	str	r0, [r2, #16]
  404ada:	2800      	cmp	r0, #0
  404adc:	f000 81ec 	beq.w	404eb8 <_svfprintf_r+0x141c>
  404ae0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404ae2:	2340      	movs	r3, #64	; 0x40
  404ae4:	6153      	str	r3, [r2, #20]
  404ae6:	f7fe bff0 	b.w	403aca <_svfprintf_r+0x2e>
  404aea:	a823      	add	r0, sp, #140	; 0x8c
  404aec:	a920      	add	r1, sp, #128	; 0x80
  404aee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404af0:	9004      	str	r0, [sp, #16]
  404af2:	9103      	str	r1, [sp, #12]
  404af4:	a81f      	add	r0, sp, #124	; 0x7c
  404af6:	2103      	movs	r1, #3
  404af8:	9002      	str	r0, [sp, #8]
  404afa:	9a08      	ldr	r2, [sp, #32]
  404afc:	9401      	str	r4, [sp, #4]
  404afe:	463b      	mov	r3, r7
  404b00:	9100      	str	r1, [sp, #0]
  404b02:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b04:	f001 f970 	bl	405de8 <_dtoa_r>
  404b08:	4625      	mov	r5, r4
  404b0a:	4606      	mov	r6, r0
  404b0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404b0e:	2b46      	cmp	r3, #70	; 0x46
  404b10:	eb06 0405 	add.w	r4, r6, r5
  404b14:	f47f af29 	bne.w	40496a <_svfprintf_r+0xece>
  404b18:	7833      	ldrb	r3, [r6, #0]
  404b1a:	2b30      	cmp	r3, #48	; 0x30
  404b1c:	f000 8172 	beq.w	404e04 <_svfprintf_r+0x1368>
  404b20:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  404b22:	442c      	add	r4, r5
  404b24:	e721      	b.n	40496a <_svfprintf_r+0xece>
  404b26:	aa25      	add	r2, sp, #148	; 0x94
  404b28:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b2a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b2c:	f003 fb58 	bl	4081e0 <__ssprint_r>
  404b30:	2800      	cmp	r0, #0
  404b32:	f47f a885 	bne.w	403c40 <_svfprintf_r+0x1a4>
  404b36:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404b38:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b3a:	46c8      	mov	r8, r9
  404b3c:	e782      	b.n	404a44 <_svfprintf_r+0xfa8>
  404b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404b40:	2b00      	cmp	r3, #0
  404b42:	bf08      	it	eq
  404b44:	2301      	moveq	r3, #1
  404b46:	930a      	str	r3, [sp, #40]	; 0x28
  404b48:	e6db      	b.n	404902 <_svfprintf_r+0xe66>
  404b4a:	4630      	mov	r0, r6
  404b4c:	940a      	str	r4, [sp, #40]	; 0x28
  404b4e:	f7fe ff37 	bl	4039c0 <strlen>
  404b52:	950f      	str	r5, [sp, #60]	; 0x3c
  404b54:	900e      	str	r0, [sp, #56]	; 0x38
  404b56:	f8cd b01c 	str.w	fp, [sp, #28]
  404b5a:	4603      	mov	r3, r0
  404b5c:	f7ff b9fb 	b.w	403f56 <_svfprintf_r+0x4ba>
  404b60:	272d      	movs	r7, #45	; 0x2d
  404b62:	2300      	movs	r3, #0
  404b64:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404b68:	930a      	str	r3, [sp, #40]	; 0x28
  404b6a:	f7ff b8b0 	b.w	403cce <_svfprintf_r+0x232>
  404b6e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404b70:	9312      	str	r3, [sp, #72]	; 0x48
  404b72:	461a      	mov	r2, r3
  404b74:	3303      	adds	r3, #3
  404b76:	db04      	blt.n	404b82 <_svfprintf_r+0x10e6>
  404b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404b7a:	4619      	mov	r1, r3
  404b7c:	4291      	cmp	r1, r2
  404b7e:	f6bf af17 	bge.w	4049b0 <_svfprintf_r+0xf14>
  404b82:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404b84:	3b02      	subs	r3, #2
  404b86:	9311      	str	r3, [sp, #68]	; 0x44
  404b88:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404b8c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404b90:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404b92:	3b01      	subs	r3, #1
  404b94:	2b00      	cmp	r3, #0
  404b96:	931f      	str	r3, [sp, #124]	; 0x7c
  404b98:	bfbd      	ittte	lt
  404b9a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  404b9c:	f1c3 0301 	rsblt	r3, r3, #1
  404ba0:	222d      	movlt	r2, #45	; 0x2d
  404ba2:	222b      	movge	r2, #43	; 0x2b
  404ba4:	2b09      	cmp	r3, #9
  404ba6:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  404baa:	f340 8116 	ble.w	404dda <_svfprintf_r+0x133e>
  404bae:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  404bb2:	4620      	mov	r0, r4
  404bb4:	4dad      	ldr	r5, [pc, #692]	; (404e6c <_svfprintf_r+0x13d0>)
  404bb6:	e000      	b.n	404bba <_svfprintf_r+0x111e>
  404bb8:	4610      	mov	r0, r2
  404bba:	fb85 1203 	smull	r1, r2, r5, r3
  404bbe:	17d9      	asrs	r1, r3, #31
  404bc0:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  404bc4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404bc8:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404bcc:	3230      	adds	r2, #48	; 0x30
  404bce:	2909      	cmp	r1, #9
  404bd0:	f800 2c01 	strb.w	r2, [r0, #-1]
  404bd4:	460b      	mov	r3, r1
  404bd6:	f100 32ff 	add.w	r2, r0, #4294967295
  404bda:	dced      	bgt.n	404bb8 <_svfprintf_r+0x111c>
  404bdc:	3330      	adds	r3, #48	; 0x30
  404bde:	3802      	subs	r0, #2
  404be0:	b2d9      	uxtb	r1, r3
  404be2:	4284      	cmp	r4, r0
  404be4:	f802 1c01 	strb.w	r1, [r2, #-1]
  404be8:	f240 815f 	bls.w	404eaa <_svfprintf_r+0x140e>
  404bec:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  404bf0:	4613      	mov	r3, r2
  404bf2:	e001      	b.n	404bf8 <_svfprintf_r+0x115c>
  404bf4:	f813 1b01 	ldrb.w	r1, [r3], #1
  404bf8:	f800 1b01 	strb.w	r1, [r0], #1
  404bfc:	42a3      	cmp	r3, r4
  404bfe:	d1f9      	bne.n	404bf4 <_svfprintf_r+0x1158>
  404c00:	3301      	adds	r3, #1
  404c02:	1a9b      	subs	r3, r3, r2
  404c04:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  404c08:	4413      	add	r3, r2
  404c0a:	aa21      	add	r2, sp, #132	; 0x84
  404c0c:	1a9b      	subs	r3, r3, r2
  404c0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404c10:	931b      	str	r3, [sp, #108]	; 0x6c
  404c12:	2a01      	cmp	r2, #1
  404c14:	4413      	add	r3, r2
  404c16:	930e      	str	r3, [sp, #56]	; 0x38
  404c18:	f340 8113 	ble.w	404e42 <_svfprintf_r+0x13a6>
  404c1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404c1e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404c20:	4413      	add	r3, r2
  404c22:	930e      	str	r3, [sp, #56]	; 0x38
  404c24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404c28:	9308      	str	r3, [sp, #32]
  404c2a:	2300      	movs	r3, #0
  404c2c:	9312      	str	r3, [sp, #72]	; 0x48
  404c2e:	e6cf      	b.n	4049d0 <_svfprintf_r+0xf34>
  404c30:	aa25      	add	r2, sp, #148	; 0x94
  404c32:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c34:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c36:	f003 fad3 	bl	4081e0 <__ssprint_r>
  404c3a:	2800      	cmp	r0, #0
  404c3c:	f47f a800 	bne.w	403c40 <_svfprintf_r+0x1a4>
  404c40:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404c42:	46c8      	mov	r8, r9
  404c44:	e4d6      	b.n	4045f4 <_svfprintf_r+0xb58>
  404c46:	4623      	mov	r3, r4
  404c48:	e6a2      	b.n	404990 <_svfprintf_r+0xef4>
  404c4a:	aa25      	add	r2, sp, #148	; 0x94
  404c4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c4e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c50:	f003 fac6 	bl	4081e0 <__ssprint_r>
  404c54:	2800      	cmp	r0, #0
  404c56:	f47e aff3 	bne.w	403c40 <_svfprintf_r+0x1a4>
  404c5a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404c5c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404c5e:	46c8      	mov	r8, r9
  404c60:	e5ae      	b.n	4047c0 <_svfprintf_r+0xd24>
  404c62:	aa25      	add	r2, sp, #148	; 0x94
  404c64:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c66:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c68:	f003 faba 	bl	4081e0 <__ssprint_r>
  404c6c:	2800      	cmp	r0, #0
  404c6e:	f47e afe7 	bne.w	403c40 <_svfprintf_r+0x1a4>
  404c72:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404c74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404c76:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404c78:	1a9a      	subs	r2, r3, r2
  404c7a:	46c8      	mov	r8, r9
  404c7c:	e5b8      	b.n	4047f0 <_svfprintf_r+0xd54>
  404c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404c80:	9612      	str	r6, [sp, #72]	; 0x48
  404c82:	2b06      	cmp	r3, #6
  404c84:	bf28      	it	cs
  404c86:	2306      	movcs	r3, #6
  404c88:	960a      	str	r6, [sp, #40]	; 0x28
  404c8a:	4637      	mov	r7, r6
  404c8c:	9308      	str	r3, [sp, #32]
  404c8e:	950f      	str	r5, [sp, #60]	; 0x3c
  404c90:	f8cd b01c 	str.w	fp, [sp, #28]
  404c94:	930e      	str	r3, [sp, #56]	; 0x38
  404c96:	4e76      	ldr	r6, [pc, #472]	; (404e70 <_svfprintf_r+0x13d4>)
  404c98:	f7ff b818 	b.w	403ccc <_svfprintf_r+0x230>
  404c9c:	a823      	add	r0, sp, #140	; 0x8c
  404c9e:	a920      	add	r1, sp, #128	; 0x80
  404ca0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404ca2:	9004      	str	r0, [sp, #16]
  404ca4:	9103      	str	r1, [sp, #12]
  404ca6:	a81f      	add	r0, sp, #124	; 0x7c
  404ca8:	2103      	movs	r1, #3
  404caa:	9002      	str	r0, [sp, #8]
  404cac:	9a08      	ldr	r2, [sp, #32]
  404cae:	9501      	str	r5, [sp, #4]
  404cb0:	463b      	mov	r3, r7
  404cb2:	9100      	str	r1, [sp, #0]
  404cb4:	980c      	ldr	r0, [sp, #48]	; 0x30
  404cb6:	f001 f897 	bl	405de8 <_dtoa_r>
  404cba:	4606      	mov	r6, r0
  404cbc:	1944      	adds	r4, r0, r5
  404cbe:	e72b      	b.n	404b18 <_svfprintf_r+0x107c>
  404cc0:	2306      	movs	r3, #6
  404cc2:	930a      	str	r3, [sp, #40]	; 0x28
  404cc4:	e61d      	b.n	404902 <_svfprintf_r+0xe66>
  404cc6:	272d      	movs	r7, #45	; 0x2d
  404cc8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404ccc:	f7ff bace 	b.w	40426c <_svfprintf_r+0x7d0>
  404cd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404cd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404cd4:	4413      	add	r3, r2
  404cd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404cd8:	930e      	str	r3, [sp, #56]	; 0x38
  404cda:	2a00      	cmp	r2, #0
  404cdc:	f340 80aa 	ble.w	404e34 <_svfprintf_r+0x1398>
  404ce0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404ce4:	9308      	str	r3, [sp, #32]
  404ce6:	2367      	movs	r3, #103	; 0x67
  404ce8:	9311      	str	r3, [sp, #68]	; 0x44
  404cea:	e671      	b.n	4049d0 <_svfprintf_r+0xf34>
  404cec:	2b00      	cmp	r3, #0
  404cee:	f340 80b2 	ble.w	404e56 <_svfprintf_r+0x13ba>
  404cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404cf4:	2a00      	cmp	r2, #0
  404cf6:	f040 8093 	bne.w	404e20 <_svfprintf_r+0x1384>
  404cfa:	f01b 0f01 	tst.w	fp, #1
  404cfe:	f040 808f 	bne.w	404e20 <_svfprintf_r+0x1384>
  404d02:	9308      	str	r3, [sp, #32]
  404d04:	930e      	str	r3, [sp, #56]	; 0x38
  404d06:	e663      	b.n	4049d0 <_svfprintf_r+0xf34>
  404d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d0a:	9308      	str	r3, [sp, #32]
  404d0c:	930e      	str	r3, [sp, #56]	; 0x38
  404d0e:	900a      	str	r0, [sp, #40]	; 0x28
  404d10:	950f      	str	r5, [sp, #60]	; 0x3c
  404d12:	f8cd b01c 	str.w	fp, [sp, #28]
  404d16:	9012      	str	r0, [sp, #72]	; 0x48
  404d18:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404d1c:	f7fe bfd6 	b.w	403ccc <_svfprintf_r+0x230>
  404d20:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d22:	2b47      	cmp	r3, #71	; 0x47
  404d24:	f47f ae20 	bne.w	404968 <_svfprintf_r+0xecc>
  404d28:	f01b 0f01 	tst.w	fp, #1
  404d2c:	f47f aeee 	bne.w	404b0c <_svfprintf_r+0x1070>
  404d30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404d32:	1b9b      	subs	r3, r3, r6
  404d34:	9313      	str	r3, [sp, #76]	; 0x4c
  404d36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404d38:	2b47      	cmp	r3, #71	; 0x47
  404d3a:	f43f af18 	beq.w	404b6e <_svfprintf_r+0x10d2>
  404d3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404d40:	9312      	str	r3, [sp, #72]	; 0x48
  404d42:	e721      	b.n	404b88 <_svfprintf_r+0x10ec>
  404d44:	424f      	negs	r7, r1
  404d46:	3110      	adds	r1, #16
  404d48:	4d4a      	ldr	r5, [pc, #296]	; (404e74 <_svfprintf_r+0x13d8>)
  404d4a:	da2f      	bge.n	404dac <_svfprintf_r+0x1310>
  404d4c:	2410      	movs	r4, #16
  404d4e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404d52:	e004      	b.n	404d5e <_svfprintf_r+0x12c2>
  404d54:	f108 0808 	add.w	r8, r8, #8
  404d58:	3f10      	subs	r7, #16
  404d5a:	2f10      	cmp	r7, #16
  404d5c:	dd26      	ble.n	404dac <_svfprintf_r+0x1310>
  404d5e:	3301      	adds	r3, #1
  404d60:	3210      	adds	r2, #16
  404d62:	2b07      	cmp	r3, #7
  404d64:	9227      	str	r2, [sp, #156]	; 0x9c
  404d66:	9326      	str	r3, [sp, #152]	; 0x98
  404d68:	f8c8 5000 	str.w	r5, [r8]
  404d6c:	f8c8 4004 	str.w	r4, [r8, #4]
  404d70:	ddf0      	ble.n	404d54 <_svfprintf_r+0x12b8>
  404d72:	aa25      	add	r2, sp, #148	; 0x94
  404d74:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d76:	4658      	mov	r0, fp
  404d78:	f003 fa32 	bl	4081e0 <__ssprint_r>
  404d7c:	2800      	cmp	r0, #0
  404d7e:	f47e af5f 	bne.w	403c40 <_svfprintf_r+0x1a4>
  404d82:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404d84:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404d86:	46c8      	mov	r8, r9
  404d88:	e7e6      	b.n	404d58 <_svfprintf_r+0x12bc>
  404d8a:	aa25      	add	r2, sp, #148	; 0x94
  404d8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d8e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d90:	f003 fa26 	bl	4081e0 <__ssprint_r>
  404d94:	2800      	cmp	r0, #0
  404d96:	f47e af53 	bne.w	403c40 <_svfprintf_r+0x1a4>
  404d9a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404d9c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404d9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404da0:	46c8      	mov	r8, r9
  404da2:	e667      	b.n	404a74 <_svfprintf_r+0xfd8>
  404da4:	2000      	movs	r0, #0
  404da6:	900a      	str	r0, [sp, #40]	; 0x28
  404da8:	f7fe bed2 	b.w	403b50 <_svfprintf_r+0xb4>
  404dac:	3301      	adds	r3, #1
  404dae:	443a      	add	r2, r7
  404db0:	2b07      	cmp	r3, #7
  404db2:	e888 00a0 	stmia.w	r8, {r5, r7}
  404db6:	9227      	str	r2, [sp, #156]	; 0x9c
  404db8:	9326      	str	r3, [sp, #152]	; 0x98
  404dba:	f108 0808 	add.w	r8, r8, #8
  404dbe:	f77f ae5c 	ble.w	404a7a <_svfprintf_r+0xfde>
  404dc2:	aa25      	add	r2, sp, #148	; 0x94
  404dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404dc6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404dc8:	f003 fa0a 	bl	4081e0 <__ssprint_r>
  404dcc:	2800      	cmp	r0, #0
  404dce:	f47e af37 	bne.w	403c40 <_svfprintf_r+0x1a4>
  404dd2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404dd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404dd6:	46c8      	mov	r8, r9
  404dd8:	e64f      	b.n	404a7a <_svfprintf_r+0xfde>
  404dda:	3330      	adds	r3, #48	; 0x30
  404ddc:	2230      	movs	r2, #48	; 0x30
  404dde:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  404de2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  404de6:	ab22      	add	r3, sp, #136	; 0x88
  404de8:	e70f      	b.n	404c0a <_svfprintf_r+0x116e>
  404dea:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404dec:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404dee:	4413      	add	r3, r2
  404df0:	930e      	str	r3, [sp, #56]	; 0x38
  404df2:	e775      	b.n	404ce0 <_svfprintf_r+0x1244>
  404df4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404df6:	e5cb      	b.n	404990 <_svfprintf_r+0xef4>
  404df8:	4e1f      	ldr	r6, [pc, #124]	; (404e78 <_svfprintf_r+0x13dc>)
  404dfa:	4b20      	ldr	r3, [pc, #128]	; (404e7c <_svfprintf_r+0x13e0>)
  404dfc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404e00:	f7ff ba36 	b.w	404270 <_svfprintf_r+0x7d4>
  404e04:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404e06:	9808      	ldr	r0, [sp, #32]
  404e08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404e0a:	4639      	mov	r1, r7
  404e0c:	f004 f852 	bl	408eb4 <__aeabi_dcmpeq>
  404e10:	2800      	cmp	r0, #0
  404e12:	f47f ae85 	bne.w	404b20 <_svfprintf_r+0x1084>
  404e16:	f1c5 0501 	rsb	r5, r5, #1
  404e1a:	951f      	str	r5, [sp, #124]	; 0x7c
  404e1c:	442c      	add	r4, r5
  404e1e:	e5a4      	b.n	40496a <_svfprintf_r+0xece>
  404e20:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404e22:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404e24:	4413      	add	r3, r2
  404e26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404e28:	441a      	add	r2, r3
  404e2a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404e2e:	920e      	str	r2, [sp, #56]	; 0x38
  404e30:	9308      	str	r3, [sp, #32]
  404e32:	e5cd      	b.n	4049d0 <_svfprintf_r+0xf34>
  404e34:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404e36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404e38:	f1c3 0301 	rsb	r3, r3, #1
  404e3c:	441a      	add	r2, r3
  404e3e:	4613      	mov	r3, r2
  404e40:	e7d6      	b.n	404df0 <_svfprintf_r+0x1354>
  404e42:	f01b 0301 	ands.w	r3, fp, #1
  404e46:	9312      	str	r3, [sp, #72]	; 0x48
  404e48:	f47f aee8 	bne.w	404c1c <_svfprintf_r+0x1180>
  404e4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404e4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404e52:	9308      	str	r3, [sp, #32]
  404e54:	e5bc      	b.n	4049d0 <_svfprintf_r+0xf34>
  404e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404e58:	b913      	cbnz	r3, 404e60 <_svfprintf_r+0x13c4>
  404e5a:	f01b 0f01 	tst.w	fp, #1
  404e5e:	d002      	beq.n	404e66 <_svfprintf_r+0x13ca>
  404e60:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404e62:	3301      	adds	r3, #1
  404e64:	e7df      	b.n	404e26 <_svfprintf_r+0x138a>
  404e66:	2301      	movs	r3, #1
  404e68:	e74b      	b.n	404d02 <_svfprintf_r+0x1266>
  404e6a:	bf00      	nop
  404e6c:	66666667 	.word	0x66666667
  404e70:	00409494 	.word	0x00409494
  404e74:	004094b0 	.word	0x004094b0
  404e78:	00409468 	.word	0x00409468
  404e7c:	00409464 	.word	0x00409464
  404e80:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404e82:	f89a 3001 	ldrb.w	r3, [sl, #1]
  404e86:	6828      	ldr	r0, [r5, #0]
  404e88:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  404e8c:	900a      	str	r0, [sp, #40]	; 0x28
  404e8e:	4628      	mov	r0, r5
  404e90:	3004      	adds	r0, #4
  404e92:	46a2      	mov	sl, r4
  404e94:	900f      	str	r0, [sp, #60]	; 0x3c
  404e96:	f7fe be59 	b.w	403b4c <_svfprintf_r+0xb0>
  404e9a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404e9e:	f7ff b86f 	b.w	403f80 <_svfprintf_r+0x4e4>
  404ea2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404ea6:	f7ff ba1c 	b.w	4042e2 <_svfprintf_r+0x846>
  404eaa:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  404eae:	e6ac      	b.n	404c0a <_svfprintf_r+0x116e>
  404eb0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404eb4:	f7ff b8f3 	b.w	40409e <_svfprintf_r+0x602>
  404eb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404eba:	230c      	movs	r3, #12
  404ebc:	6013      	str	r3, [r2, #0]
  404ebe:	f04f 33ff 	mov.w	r3, #4294967295
  404ec2:	9309      	str	r3, [sp, #36]	; 0x24
  404ec4:	f7fe bec5 	b.w	403c52 <_svfprintf_r+0x1b6>
  404ec8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404ecc:	f7ff b9a2 	b.w	404214 <_svfprintf_r+0x778>
  404ed0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404ed4:	f7ff b97e 	b.w	4041d4 <_svfprintf_r+0x738>
  404ed8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404edc:	f7ff b961 	b.w	4041a2 <_svfprintf_r+0x706>
  404ee0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404ee4:	f7ff b91a 	b.w	40411c <_svfprintf_r+0x680>

00404ee8 <__sprint_r.part.0>:
  404ee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404eec:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404eee:	049c      	lsls	r4, r3, #18
  404ef0:	4693      	mov	fp, r2
  404ef2:	d52f      	bpl.n	404f54 <__sprint_r.part.0+0x6c>
  404ef4:	6893      	ldr	r3, [r2, #8]
  404ef6:	6812      	ldr	r2, [r2, #0]
  404ef8:	b353      	cbz	r3, 404f50 <__sprint_r.part.0+0x68>
  404efa:	460e      	mov	r6, r1
  404efc:	4607      	mov	r7, r0
  404efe:	f102 0908 	add.w	r9, r2, #8
  404f02:	e919 0420 	ldmdb	r9, {r5, sl}
  404f06:	ea5f 089a 	movs.w	r8, sl, lsr #2
  404f0a:	d017      	beq.n	404f3c <__sprint_r.part.0+0x54>
  404f0c:	3d04      	subs	r5, #4
  404f0e:	2400      	movs	r4, #0
  404f10:	e001      	b.n	404f16 <__sprint_r.part.0+0x2e>
  404f12:	45a0      	cmp	r8, r4
  404f14:	d010      	beq.n	404f38 <__sprint_r.part.0+0x50>
  404f16:	4632      	mov	r2, r6
  404f18:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404f1c:	4638      	mov	r0, r7
  404f1e:	f002 f835 	bl	406f8c <_fputwc_r>
  404f22:	1c43      	adds	r3, r0, #1
  404f24:	f104 0401 	add.w	r4, r4, #1
  404f28:	d1f3      	bne.n	404f12 <__sprint_r.part.0+0x2a>
  404f2a:	2300      	movs	r3, #0
  404f2c:	f8cb 3008 	str.w	r3, [fp, #8]
  404f30:	f8cb 3004 	str.w	r3, [fp, #4]
  404f34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f38:	f8db 3008 	ldr.w	r3, [fp, #8]
  404f3c:	f02a 0a03 	bic.w	sl, sl, #3
  404f40:	eba3 030a 	sub.w	r3, r3, sl
  404f44:	f8cb 3008 	str.w	r3, [fp, #8]
  404f48:	f109 0908 	add.w	r9, r9, #8
  404f4c:	2b00      	cmp	r3, #0
  404f4e:	d1d8      	bne.n	404f02 <__sprint_r.part.0+0x1a>
  404f50:	2000      	movs	r0, #0
  404f52:	e7ea      	b.n	404f2a <__sprint_r.part.0+0x42>
  404f54:	f002 f962 	bl	40721c <__sfvwrite_r>
  404f58:	2300      	movs	r3, #0
  404f5a:	f8cb 3008 	str.w	r3, [fp, #8]
  404f5e:	f8cb 3004 	str.w	r3, [fp, #4]
  404f62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f66:	bf00      	nop

00404f68 <_vfiprintf_r>:
  404f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404f6c:	b0ad      	sub	sp, #180	; 0xb4
  404f6e:	461d      	mov	r5, r3
  404f70:	9101      	str	r1, [sp, #4]
  404f72:	4691      	mov	r9, r2
  404f74:	9308      	str	r3, [sp, #32]
  404f76:	9006      	str	r0, [sp, #24]
  404f78:	b118      	cbz	r0, 404f82 <_vfiprintf_r+0x1a>
  404f7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404f7c:	2b00      	cmp	r3, #0
  404f7e:	f000 80e0 	beq.w	405142 <_vfiprintf_r+0x1da>
  404f82:	9c01      	ldr	r4, [sp, #4]
  404f84:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  404f88:	b281      	uxth	r1, r0
  404f8a:	048b      	lsls	r3, r1, #18
  404f8c:	d407      	bmi.n	404f9e <_vfiprintf_r+0x36>
  404f8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404f90:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  404f94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404f98:	81a1      	strh	r1, [r4, #12]
  404f9a:	6663      	str	r3, [r4, #100]	; 0x64
  404f9c:	b289      	uxth	r1, r1
  404f9e:	070f      	lsls	r7, r1, #28
  404fa0:	f140 80b1 	bpl.w	405106 <_vfiprintf_r+0x19e>
  404fa4:	9b01      	ldr	r3, [sp, #4]
  404fa6:	691b      	ldr	r3, [r3, #16]
  404fa8:	2b00      	cmp	r3, #0
  404faa:	f000 80ac 	beq.w	405106 <_vfiprintf_r+0x19e>
  404fae:	f001 011a 	and.w	r1, r1, #26
  404fb2:	290a      	cmp	r1, #10
  404fb4:	f000 80b5 	beq.w	405122 <_vfiprintf_r+0x1ba>
  404fb8:	2300      	movs	r3, #0
  404fba:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
  404fbe:	930b      	str	r3, [sp, #44]	; 0x2c
  404fc0:	9311      	str	r3, [sp, #68]	; 0x44
  404fc2:	9310      	str	r3, [sp, #64]	; 0x40
  404fc4:	9304      	str	r3, [sp, #16]
  404fc6:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  404fca:	46da      	mov	sl, fp
  404fcc:	f899 3000 	ldrb.w	r3, [r9]
  404fd0:	464c      	mov	r4, r9
  404fd2:	b1fb      	cbz	r3, 405014 <_vfiprintf_r+0xac>
  404fd4:	2b25      	cmp	r3, #37	; 0x25
  404fd6:	d102      	bne.n	404fde <_vfiprintf_r+0x76>
  404fd8:	e01c      	b.n	405014 <_vfiprintf_r+0xac>
  404fda:	2b25      	cmp	r3, #37	; 0x25
  404fdc:	d003      	beq.n	404fe6 <_vfiprintf_r+0x7e>
  404fde:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404fe2:	2b00      	cmp	r3, #0
  404fe4:	d1f9      	bne.n	404fda <_vfiprintf_r+0x72>
  404fe6:	eba4 0509 	sub.w	r5, r4, r9
  404fea:	b19d      	cbz	r5, 405014 <_vfiprintf_r+0xac>
  404fec:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404fee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ff0:	f8ca 9000 	str.w	r9, [sl]
  404ff4:	3301      	adds	r3, #1
  404ff6:	442a      	add	r2, r5
  404ff8:	2b07      	cmp	r3, #7
  404ffa:	f8ca 5004 	str.w	r5, [sl, #4]
  404ffe:	9211      	str	r2, [sp, #68]	; 0x44
  405000:	9310      	str	r3, [sp, #64]	; 0x40
  405002:	dd7a      	ble.n	4050fa <_vfiprintf_r+0x192>
  405004:	2a00      	cmp	r2, #0
  405006:	f040 848f 	bne.w	405928 <_vfiprintf_r+0x9c0>
  40500a:	9b04      	ldr	r3, [sp, #16]
  40500c:	9210      	str	r2, [sp, #64]	; 0x40
  40500e:	442b      	add	r3, r5
  405010:	46da      	mov	sl, fp
  405012:	9304      	str	r3, [sp, #16]
  405014:	7823      	ldrb	r3, [r4, #0]
  405016:	2b00      	cmp	r3, #0
  405018:	f000 83b1 	beq.w	40577e <_vfiprintf_r+0x816>
  40501c:	2000      	movs	r0, #0
  40501e:	f04f 0300 	mov.w	r3, #0
  405022:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  405026:	f104 0901 	add.w	r9, r4, #1
  40502a:	7862      	ldrb	r2, [r4, #1]
  40502c:	4605      	mov	r5, r0
  40502e:	4606      	mov	r6, r0
  405030:	4603      	mov	r3, r0
  405032:	f04f 34ff 	mov.w	r4, #4294967295
  405036:	f109 0901 	add.w	r9, r9, #1
  40503a:	f1a2 0120 	sub.w	r1, r2, #32
  40503e:	2958      	cmp	r1, #88	; 0x58
  405040:	f200 830e 	bhi.w	405660 <_vfiprintf_r+0x6f8>
  405044:	e8df f011 	tbh	[pc, r1, lsl #1]
  405048:	030c0237 	.word	0x030c0237
  40504c:	02eb030c 	.word	0x02eb030c
  405050:	030c030c 	.word	0x030c030c
  405054:	030c030c 	.word	0x030c030c
  405058:	030c030c 	.word	0x030c030c
  40505c:	02f0029e 	.word	0x02f0029e
  405060:	0082030c 	.word	0x0082030c
  405064:	030c0277 	.word	0x030c0277
  405068:	01d401cf 	.word	0x01d401cf
  40506c:	01d401d4 	.word	0x01d401d4
  405070:	01d401d4 	.word	0x01d401d4
  405074:	01d401d4 	.word	0x01d401d4
  405078:	01d401d4 	.word	0x01d401d4
  40507c:	030c030c 	.word	0x030c030c
  405080:	030c030c 	.word	0x030c030c
  405084:	030c030c 	.word	0x030c030c
  405088:	030c030c 	.word	0x030c030c
  40508c:	030c030c 	.word	0x030c030c
  405090:	030c023f 	.word	0x030c023f
  405094:	030c030c 	.word	0x030c030c
  405098:	030c030c 	.word	0x030c030c
  40509c:	030c030c 	.word	0x030c030c
  4050a0:	030c030c 	.word	0x030c030c
  4050a4:	0246030c 	.word	0x0246030c
  4050a8:	030c030c 	.word	0x030c030c
  4050ac:	030c030c 	.word	0x030c030c
  4050b0:	024a030c 	.word	0x024a030c
  4050b4:	030c030c 	.word	0x030c030c
  4050b8:	030c0252 	.word	0x030c0252
  4050bc:	030c030c 	.word	0x030c030c
  4050c0:	030c030c 	.word	0x030c030c
  4050c4:	030c030c 	.word	0x030c030c
  4050c8:	030c030c 	.word	0x030c030c
  4050cc:	01e2030c 	.word	0x01e2030c
  4050d0:	030c01f6 	.word	0x030c01f6
  4050d4:	030c030c 	.word	0x030c030c
  4050d8:	01f60307 	.word	0x01f60307
  4050dc:	030c030c 	.word	0x030c030c
  4050e0:	030c0291 	.word	0x030c0291
  4050e4:	008702f5 	.word	0x008702f5
  4050e8:	02c302b1 	.word	0x02c302b1
  4050ec:	02c8030c 	.word	0x02c8030c
  4050f0:	01bd030c 	.word	0x01bd030c
  4050f4:	030c030c 	.word	0x030c030c
  4050f8:	02aa      	.short	0x02aa
  4050fa:	f10a 0a08 	add.w	sl, sl, #8
  4050fe:	9b04      	ldr	r3, [sp, #16]
  405100:	442b      	add	r3, r5
  405102:	9304      	str	r3, [sp, #16]
  405104:	e786      	b.n	405014 <_vfiprintf_r+0xac>
  405106:	9c01      	ldr	r4, [sp, #4]
  405108:	9806      	ldr	r0, [sp, #24]
  40510a:	4621      	mov	r1, r4
  40510c:	f000 fd62 	bl	405bd4 <__swsetup_r>
  405110:	2800      	cmp	r0, #0
  405112:	f040 8340 	bne.w	405796 <_vfiprintf_r+0x82e>
  405116:	89a1      	ldrh	r1, [r4, #12]
  405118:	f001 011a 	and.w	r1, r1, #26
  40511c:	290a      	cmp	r1, #10
  40511e:	f47f af4b 	bne.w	404fb8 <_vfiprintf_r+0x50>
  405122:	9901      	ldr	r1, [sp, #4]
  405124:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  405128:	2b00      	cmp	r3, #0
  40512a:	f6ff af45 	blt.w	404fb8 <_vfiprintf_r+0x50>
  40512e:	462b      	mov	r3, r5
  405130:	464a      	mov	r2, r9
  405132:	9806      	ldr	r0, [sp, #24]
  405134:	f000 fd18 	bl	405b68 <__sbprintf>
  405138:	9004      	str	r0, [sp, #16]
  40513a:	9804      	ldr	r0, [sp, #16]
  40513c:	b02d      	add	sp, #180	; 0xb4
  40513e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405142:	f001 feaf 	bl	406ea4 <__sinit>
  405146:	e71c      	b.n	404f82 <_vfiprintf_r+0x1a>
  405148:	4276      	negs	r6, r6
  40514a:	9208      	str	r2, [sp, #32]
  40514c:	f043 0304 	orr.w	r3, r3, #4
  405150:	f899 2000 	ldrb.w	r2, [r9]
  405154:	e76f      	b.n	405036 <_vfiprintf_r+0xce>
  405156:	9607      	str	r6, [sp, #28]
  405158:	f013 0220 	ands.w	r2, r3, #32
  40515c:	f040 845a 	bne.w	405a14 <_vfiprintf_r+0xaac>
  405160:	f013 0110 	ands.w	r1, r3, #16
  405164:	f040 83f1 	bne.w	40594a <_vfiprintf_r+0x9e2>
  405168:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40516c:	f000 83ed 	beq.w	40594a <_vfiprintf_r+0x9e2>
  405170:	9808      	ldr	r0, [sp, #32]
  405172:	460a      	mov	r2, r1
  405174:	4601      	mov	r1, r0
  405176:	3104      	adds	r1, #4
  405178:	8806      	ldrh	r6, [r0, #0]
  40517a:	9108      	str	r1, [sp, #32]
  40517c:	2700      	movs	r7, #0
  40517e:	f04f 0100 	mov.w	r1, #0
  405182:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  405186:	2500      	movs	r5, #0
  405188:	1c61      	adds	r1, r4, #1
  40518a:	f000 8175 	beq.w	405478 <_vfiprintf_r+0x510>
  40518e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  405192:	9103      	str	r1, [sp, #12]
  405194:	ea56 0107 	orrs.w	r1, r6, r7
  405198:	f040 8173 	bne.w	405482 <_vfiprintf_r+0x51a>
  40519c:	2c00      	cmp	r4, #0
  40519e:	f040 8356 	bne.w	40584e <_vfiprintf_r+0x8e6>
  4051a2:	2a00      	cmp	r2, #0
  4051a4:	f040 83b2 	bne.w	40590c <_vfiprintf_r+0x9a4>
  4051a8:	f013 0301 	ands.w	r3, r3, #1
  4051ac:	9305      	str	r3, [sp, #20]
  4051ae:	f000 8447 	beq.w	405a40 <_vfiprintf_r+0xad8>
  4051b2:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  4051b6:	2330      	movs	r3, #48	; 0x30
  4051b8:	f808 3d41 	strb.w	r3, [r8, #-65]!
  4051bc:	9b05      	ldr	r3, [sp, #20]
  4051be:	42a3      	cmp	r3, r4
  4051c0:	bfb8      	it	lt
  4051c2:	4623      	movlt	r3, r4
  4051c4:	9302      	str	r3, [sp, #8]
  4051c6:	b10d      	cbz	r5, 4051cc <_vfiprintf_r+0x264>
  4051c8:	3301      	adds	r3, #1
  4051ca:	9302      	str	r3, [sp, #8]
  4051cc:	9b03      	ldr	r3, [sp, #12]
  4051ce:	f013 0302 	ands.w	r3, r3, #2
  4051d2:	9309      	str	r3, [sp, #36]	; 0x24
  4051d4:	d002      	beq.n	4051dc <_vfiprintf_r+0x274>
  4051d6:	9b02      	ldr	r3, [sp, #8]
  4051d8:	3302      	adds	r3, #2
  4051da:	9302      	str	r3, [sp, #8]
  4051dc:	9b03      	ldr	r3, [sp, #12]
  4051de:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4051e2:	930a      	str	r3, [sp, #40]	; 0x28
  4051e4:	f040 8263 	bne.w	4056ae <_vfiprintf_r+0x746>
  4051e8:	9b07      	ldr	r3, [sp, #28]
  4051ea:	9a02      	ldr	r2, [sp, #8]
  4051ec:	1a9d      	subs	r5, r3, r2
  4051ee:	2d00      	cmp	r5, #0
  4051f0:	f340 825d 	ble.w	4056ae <_vfiprintf_r+0x746>
  4051f4:	2d10      	cmp	r5, #16
  4051f6:	f340 8477 	ble.w	405ae8 <_vfiprintf_r+0xb80>
  4051fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4051fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4051fe:	4eb9      	ldr	r6, [pc, #740]	; (4054e4 <_vfiprintf_r+0x57c>)
  405200:	46d6      	mov	lr, sl
  405202:	2710      	movs	r7, #16
  405204:	46a2      	mov	sl, r4
  405206:	4619      	mov	r1, r3
  405208:	9c06      	ldr	r4, [sp, #24]
  40520a:	e007      	b.n	40521c <_vfiprintf_r+0x2b4>
  40520c:	f101 0c02 	add.w	ip, r1, #2
  405210:	f10e 0e08 	add.w	lr, lr, #8
  405214:	4601      	mov	r1, r0
  405216:	3d10      	subs	r5, #16
  405218:	2d10      	cmp	r5, #16
  40521a:	dd11      	ble.n	405240 <_vfiprintf_r+0x2d8>
  40521c:	1c48      	adds	r0, r1, #1
  40521e:	3210      	adds	r2, #16
  405220:	2807      	cmp	r0, #7
  405222:	9211      	str	r2, [sp, #68]	; 0x44
  405224:	e88e 00c0 	stmia.w	lr, {r6, r7}
  405228:	9010      	str	r0, [sp, #64]	; 0x40
  40522a:	ddef      	ble.n	40520c <_vfiprintf_r+0x2a4>
  40522c:	2a00      	cmp	r2, #0
  40522e:	f040 8231 	bne.w	405694 <_vfiprintf_r+0x72c>
  405232:	3d10      	subs	r5, #16
  405234:	2d10      	cmp	r5, #16
  405236:	4611      	mov	r1, r2
  405238:	f04f 0c01 	mov.w	ip, #1
  40523c:	46de      	mov	lr, fp
  40523e:	dced      	bgt.n	40521c <_vfiprintf_r+0x2b4>
  405240:	4654      	mov	r4, sl
  405242:	4661      	mov	r1, ip
  405244:	46f2      	mov	sl, lr
  405246:	442a      	add	r2, r5
  405248:	2907      	cmp	r1, #7
  40524a:	9211      	str	r2, [sp, #68]	; 0x44
  40524c:	f8ca 6000 	str.w	r6, [sl]
  405250:	f8ca 5004 	str.w	r5, [sl, #4]
  405254:	9110      	str	r1, [sp, #64]	; 0x40
  405256:	f300 82e6 	bgt.w	405826 <_vfiprintf_r+0x8be>
  40525a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40525e:	f10a 0a08 	add.w	sl, sl, #8
  405262:	1c48      	adds	r0, r1, #1
  405264:	2d00      	cmp	r5, #0
  405266:	f040 822a 	bne.w	4056be <_vfiprintf_r+0x756>
  40526a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40526c:	2b00      	cmp	r3, #0
  40526e:	f000 8244 	beq.w	4056fa <_vfiprintf_r+0x792>
  405272:	3202      	adds	r2, #2
  405274:	a90e      	add	r1, sp, #56	; 0x38
  405276:	2302      	movs	r3, #2
  405278:	2807      	cmp	r0, #7
  40527a:	9211      	str	r2, [sp, #68]	; 0x44
  40527c:	9010      	str	r0, [sp, #64]	; 0x40
  40527e:	e88a 000a 	stmia.w	sl, {r1, r3}
  405282:	f340 8236 	ble.w	4056f2 <_vfiprintf_r+0x78a>
  405286:	2a00      	cmp	r2, #0
  405288:	f040 838b 	bne.w	4059a2 <_vfiprintf_r+0xa3a>
  40528c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40528e:	2b80      	cmp	r3, #128	; 0x80
  405290:	f04f 0001 	mov.w	r0, #1
  405294:	4611      	mov	r1, r2
  405296:	46da      	mov	sl, fp
  405298:	f040 8233 	bne.w	405702 <_vfiprintf_r+0x79a>
  40529c:	9b07      	ldr	r3, [sp, #28]
  40529e:	9d02      	ldr	r5, [sp, #8]
  4052a0:	1b5e      	subs	r6, r3, r5
  4052a2:	2e00      	cmp	r6, #0
  4052a4:	f340 822d 	ble.w	405702 <_vfiprintf_r+0x79a>
  4052a8:	2e10      	cmp	r6, #16
  4052aa:	4d8f      	ldr	r5, [pc, #572]	; (4054e8 <_vfiprintf_r+0x580>)
  4052ac:	f340 842f 	ble.w	405b0e <_vfiprintf_r+0xba6>
  4052b0:	46d4      	mov	ip, sl
  4052b2:	2710      	movs	r7, #16
  4052b4:	46a2      	mov	sl, r4
  4052b6:	9c06      	ldr	r4, [sp, #24]
  4052b8:	e007      	b.n	4052ca <_vfiprintf_r+0x362>
  4052ba:	f101 0e02 	add.w	lr, r1, #2
  4052be:	f10c 0c08 	add.w	ip, ip, #8
  4052c2:	4601      	mov	r1, r0
  4052c4:	3e10      	subs	r6, #16
  4052c6:	2e10      	cmp	r6, #16
  4052c8:	dd11      	ble.n	4052ee <_vfiprintf_r+0x386>
  4052ca:	1c48      	adds	r0, r1, #1
  4052cc:	3210      	adds	r2, #16
  4052ce:	2807      	cmp	r0, #7
  4052d0:	9211      	str	r2, [sp, #68]	; 0x44
  4052d2:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4052d6:	9010      	str	r0, [sp, #64]	; 0x40
  4052d8:	ddef      	ble.n	4052ba <_vfiprintf_r+0x352>
  4052da:	2a00      	cmp	r2, #0
  4052dc:	f040 8296 	bne.w	40580c <_vfiprintf_r+0x8a4>
  4052e0:	3e10      	subs	r6, #16
  4052e2:	2e10      	cmp	r6, #16
  4052e4:	f04f 0e01 	mov.w	lr, #1
  4052e8:	4611      	mov	r1, r2
  4052ea:	46dc      	mov	ip, fp
  4052ec:	dced      	bgt.n	4052ca <_vfiprintf_r+0x362>
  4052ee:	4654      	mov	r4, sl
  4052f0:	46e2      	mov	sl, ip
  4052f2:	4432      	add	r2, r6
  4052f4:	f1be 0f07 	cmp.w	lr, #7
  4052f8:	9211      	str	r2, [sp, #68]	; 0x44
  4052fa:	e88a 0060 	stmia.w	sl, {r5, r6}
  4052fe:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  405302:	f300 835b 	bgt.w	4059bc <_vfiprintf_r+0xa54>
  405306:	9b05      	ldr	r3, [sp, #20]
  405308:	1ae4      	subs	r4, r4, r3
  40530a:	2c00      	cmp	r4, #0
  40530c:	f10a 0a08 	add.w	sl, sl, #8
  405310:	f10e 0001 	add.w	r0, lr, #1
  405314:	4671      	mov	r1, lr
  405316:	f300 81f9 	bgt.w	40570c <_vfiprintf_r+0x7a4>
  40531a:	9905      	ldr	r1, [sp, #20]
  40531c:	f8ca 8000 	str.w	r8, [sl]
  405320:	440a      	add	r2, r1
  405322:	2807      	cmp	r0, #7
  405324:	9211      	str	r2, [sp, #68]	; 0x44
  405326:	f8ca 1004 	str.w	r1, [sl, #4]
  40532a:	9010      	str	r0, [sp, #64]	; 0x40
  40532c:	f340 8255 	ble.w	4057da <_vfiprintf_r+0x872>
  405330:	2a00      	cmp	r2, #0
  405332:	f040 82ee 	bne.w	405912 <_vfiprintf_r+0x9aa>
  405336:	9b03      	ldr	r3, [sp, #12]
  405338:	9210      	str	r2, [sp, #64]	; 0x40
  40533a:	0758      	lsls	r0, r3, #29
  40533c:	d538      	bpl.n	4053b0 <_vfiprintf_r+0x448>
  40533e:	9b07      	ldr	r3, [sp, #28]
  405340:	9902      	ldr	r1, [sp, #8]
  405342:	1a5c      	subs	r4, r3, r1
  405344:	2c00      	cmp	r4, #0
  405346:	f340 82ba 	ble.w	4058be <_vfiprintf_r+0x956>
  40534a:	46da      	mov	sl, fp
  40534c:	2c10      	cmp	r4, #16
  40534e:	f340 83da 	ble.w	405b06 <_vfiprintf_r+0xb9e>
  405352:	9910      	ldr	r1, [sp, #64]	; 0x40
  405354:	4e63      	ldr	r6, [pc, #396]	; (4054e4 <_vfiprintf_r+0x57c>)
  405356:	9f06      	ldr	r7, [sp, #24]
  405358:	f8dd 8004 	ldr.w	r8, [sp, #4]
  40535c:	2510      	movs	r5, #16
  40535e:	e006      	b.n	40536e <_vfiprintf_r+0x406>
  405360:	1c88      	adds	r0, r1, #2
  405362:	f10a 0a08 	add.w	sl, sl, #8
  405366:	4619      	mov	r1, r3
  405368:	3c10      	subs	r4, #16
  40536a:	2c10      	cmp	r4, #16
  40536c:	dd13      	ble.n	405396 <_vfiprintf_r+0x42e>
  40536e:	1c4b      	adds	r3, r1, #1
  405370:	3210      	adds	r2, #16
  405372:	2b07      	cmp	r3, #7
  405374:	9211      	str	r2, [sp, #68]	; 0x44
  405376:	f8ca 6000 	str.w	r6, [sl]
  40537a:	f8ca 5004 	str.w	r5, [sl, #4]
  40537e:	9310      	str	r3, [sp, #64]	; 0x40
  405380:	ddee      	ble.n	405360 <_vfiprintf_r+0x3f8>
  405382:	2a00      	cmp	r2, #0
  405384:	f040 820b 	bne.w	40579e <_vfiprintf_r+0x836>
  405388:	3c10      	subs	r4, #16
  40538a:	2c10      	cmp	r4, #16
  40538c:	f04f 0001 	mov.w	r0, #1
  405390:	4611      	mov	r1, r2
  405392:	46da      	mov	sl, fp
  405394:	dceb      	bgt.n	40536e <_vfiprintf_r+0x406>
  405396:	4422      	add	r2, r4
  405398:	2807      	cmp	r0, #7
  40539a:	9211      	str	r2, [sp, #68]	; 0x44
  40539c:	f8ca 6000 	str.w	r6, [sl]
  4053a0:	f8ca 4004 	str.w	r4, [sl, #4]
  4053a4:	9010      	str	r0, [sp, #64]	; 0x40
  4053a6:	f340 8223 	ble.w	4057f0 <_vfiprintf_r+0x888>
  4053aa:	2a00      	cmp	r2, #0
  4053ac:	f040 8367 	bne.w	405a7e <_vfiprintf_r+0xb16>
  4053b0:	9b04      	ldr	r3, [sp, #16]
  4053b2:	9a07      	ldr	r2, [sp, #28]
  4053b4:	9902      	ldr	r1, [sp, #8]
  4053b6:	428a      	cmp	r2, r1
  4053b8:	bfac      	ite	ge
  4053ba:	189b      	addge	r3, r3, r2
  4053bc:	185b      	addlt	r3, r3, r1
  4053be:	9304      	str	r3, [sp, #16]
  4053c0:	e21f      	b.n	405802 <_vfiprintf_r+0x89a>
  4053c2:	9607      	str	r6, [sp, #28]
  4053c4:	069e      	lsls	r6, r3, #26
  4053c6:	f100 8319 	bmi.w	4059fc <_vfiprintf_r+0xa94>
  4053ca:	9908      	ldr	r1, [sp, #32]
  4053cc:	06dd      	lsls	r5, r3, #27
  4053ce:	460a      	mov	r2, r1
  4053d0:	f100 82b5 	bmi.w	40593e <_vfiprintf_r+0x9d6>
  4053d4:	0658      	lsls	r0, r3, #25
  4053d6:	f140 82b2 	bpl.w	40593e <_vfiprintf_r+0x9d6>
  4053da:	880e      	ldrh	r6, [r1, #0]
  4053dc:	3104      	adds	r1, #4
  4053de:	2700      	movs	r7, #0
  4053e0:	2201      	movs	r2, #1
  4053e2:	9108      	str	r1, [sp, #32]
  4053e4:	e6cb      	b.n	40517e <_vfiprintf_r+0x216>
  4053e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4053ea:	f899 2000 	ldrb.w	r2, [r9]
  4053ee:	e622      	b.n	405036 <_vfiprintf_r+0xce>
  4053f0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4053f4:	2600      	movs	r6, #0
  4053f6:	f819 2b01 	ldrb.w	r2, [r9], #1
  4053fa:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4053fe:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  405402:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405406:	2909      	cmp	r1, #9
  405408:	d9f5      	bls.n	4053f6 <_vfiprintf_r+0x48e>
  40540a:	e616      	b.n	40503a <_vfiprintf_r+0xd2>
  40540c:	9908      	ldr	r1, [sp, #32]
  40540e:	9607      	str	r6, [sp, #28]
  405410:	680a      	ldr	r2, [r1, #0]
  405412:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405416:	f04f 0000 	mov.w	r0, #0
  40541a:	460a      	mov	r2, r1
  40541c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  405420:	3204      	adds	r2, #4
  405422:	2001      	movs	r0, #1
  405424:	9002      	str	r0, [sp, #8]
  405426:	9208      	str	r2, [sp, #32]
  405428:	9005      	str	r0, [sp, #20]
  40542a:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  40542e:	9303      	str	r3, [sp, #12]
  405430:	2400      	movs	r4, #0
  405432:	e6cb      	b.n	4051cc <_vfiprintf_r+0x264>
  405434:	9607      	str	r6, [sp, #28]
  405436:	2800      	cmp	r0, #0
  405438:	f040 8382 	bne.w	405b40 <_vfiprintf_r+0xbd8>
  40543c:	069e      	lsls	r6, r3, #26
  40543e:	f100 82d1 	bmi.w	4059e4 <_vfiprintf_r+0xa7c>
  405442:	06dd      	lsls	r5, r3, #27
  405444:	f100 828d 	bmi.w	405962 <_vfiprintf_r+0x9fa>
  405448:	0658      	lsls	r0, r3, #25
  40544a:	f140 828a 	bpl.w	405962 <_vfiprintf_r+0x9fa>
  40544e:	9d08      	ldr	r5, [sp, #32]
  405450:	f9b5 6000 	ldrsh.w	r6, [r5]
  405454:	462a      	mov	r2, r5
  405456:	17f7      	asrs	r7, r6, #31
  405458:	3204      	adds	r2, #4
  40545a:	4630      	mov	r0, r6
  40545c:	4639      	mov	r1, r7
  40545e:	9208      	str	r2, [sp, #32]
  405460:	2800      	cmp	r0, #0
  405462:	f171 0200 	sbcs.w	r2, r1, #0
  405466:	f2c0 82ee 	blt.w	405a46 <_vfiprintf_r+0xade>
  40546a:	1c61      	adds	r1, r4, #1
  40546c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405470:	f04f 0201 	mov.w	r2, #1
  405474:	f47f ae8b 	bne.w	40518e <_vfiprintf_r+0x226>
  405478:	ea56 0107 	orrs.w	r1, r6, r7
  40547c:	f000 81e8 	beq.w	405850 <_vfiprintf_r+0x8e8>
  405480:	9303      	str	r3, [sp, #12]
  405482:	2a01      	cmp	r2, #1
  405484:	f000 8225 	beq.w	4058d2 <_vfiprintf_r+0x96a>
  405488:	2a02      	cmp	r2, #2
  40548a:	f040 81f5 	bne.w	405878 <_vfiprintf_r+0x910>
  40548e:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405490:	46d8      	mov	r8, fp
  405492:	0933      	lsrs	r3, r6, #4
  405494:	f006 010f 	and.w	r1, r6, #15
  405498:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40549c:	093a      	lsrs	r2, r7, #4
  40549e:	461e      	mov	r6, r3
  4054a0:	4617      	mov	r7, r2
  4054a2:	5c43      	ldrb	r3, [r0, r1]
  4054a4:	f808 3d01 	strb.w	r3, [r8, #-1]!
  4054a8:	ea56 0307 	orrs.w	r3, r6, r7
  4054ac:	d1f1      	bne.n	405492 <_vfiprintf_r+0x52a>
  4054ae:	ebab 0308 	sub.w	r3, fp, r8
  4054b2:	9305      	str	r3, [sp, #20]
  4054b4:	e682      	b.n	4051bc <_vfiprintf_r+0x254>
  4054b6:	f899 2000 	ldrb.w	r2, [r9]
  4054ba:	2d00      	cmp	r5, #0
  4054bc:	f47f adbb 	bne.w	405036 <_vfiprintf_r+0xce>
  4054c0:	2001      	movs	r0, #1
  4054c2:	2520      	movs	r5, #32
  4054c4:	e5b7      	b.n	405036 <_vfiprintf_r+0xce>
  4054c6:	9607      	str	r6, [sp, #28]
  4054c8:	2800      	cmp	r0, #0
  4054ca:	f040 8336 	bne.w	405b3a <_vfiprintf_r+0xbd2>
  4054ce:	f043 0310 	orr.w	r3, r3, #16
  4054d2:	e7b3      	b.n	40543c <_vfiprintf_r+0x4d4>
  4054d4:	9607      	str	r6, [sp, #28]
  4054d6:	f043 0310 	orr.w	r3, r3, #16
  4054da:	e63d      	b.n	405158 <_vfiprintf_r+0x1f0>
  4054dc:	9607      	str	r6, [sp, #28]
  4054de:	f043 0310 	orr.w	r3, r3, #16
  4054e2:	e76f      	b.n	4053c4 <_vfiprintf_r+0x45c>
  4054e4:	004094c0 	.word	0x004094c0
  4054e8:	004094d0 	.word	0x004094d0
  4054ec:	9607      	str	r6, [sp, #28]
  4054ee:	2800      	cmp	r0, #0
  4054f0:	f040 832c 	bne.w	405b4c <_vfiprintf_r+0xbe4>
  4054f4:	49b0      	ldr	r1, [pc, #704]	; (4057b8 <_vfiprintf_r+0x850>)
  4054f6:	910b      	str	r1, [sp, #44]	; 0x2c
  4054f8:	069f      	lsls	r7, r3, #26
  4054fa:	f100 8297 	bmi.w	405a2c <_vfiprintf_r+0xac4>
  4054fe:	9808      	ldr	r0, [sp, #32]
  405500:	06de      	lsls	r6, r3, #27
  405502:	4601      	mov	r1, r0
  405504:	f100 8228 	bmi.w	405958 <_vfiprintf_r+0x9f0>
  405508:	065d      	lsls	r5, r3, #25
  40550a:	f140 8225 	bpl.w	405958 <_vfiprintf_r+0x9f0>
  40550e:	3104      	adds	r1, #4
  405510:	8806      	ldrh	r6, [r0, #0]
  405512:	9108      	str	r1, [sp, #32]
  405514:	2700      	movs	r7, #0
  405516:	07d8      	lsls	r0, r3, #31
  405518:	f140 81d9 	bpl.w	4058ce <_vfiprintf_r+0x966>
  40551c:	ea56 0107 	orrs.w	r1, r6, r7
  405520:	f000 81d5 	beq.w	4058ce <_vfiprintf_r+0x966>
  405524:	2130      	movs	r1, #48	; 0x30
  405526:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40552a:	f043 0302 	orr.w	r3, r3, #2
  40552e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405532:	2202      	movs	r2, #2
  405534:	e623      	b.n	40517e <_vfiprintf_r+0x216>
  405536:	f899 2000 	ldrb.w	r2, [r9]
  40553a:	2a2a      	cmp	r2, #42	; 0x2a
  40553c:	f109 0701 	add.w	r7, r9, #1
  405540:	f000 82f0 	beq.w	405b24 <_vfiprintf_r+0xbbc>
  405544:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405548:	2909      	cmp	r1, #9
  40554a:	46b9      	mov	r9, r7
  40554c:	f04f 0400 	mov.w	r4, #0
  405550:	f63f ad73 	bhi.w	40503a <_vfiprintf_r+0xd2>
  405554:	f819 2b01 	ldrb.w	r2, [r9], #1
  405558:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40555c:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  405560:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405564:	2909      	cmp	r1, #9
  405566:	d9f5      	bls.n	405554 <_vfiprintf_r+0x5ec>
  405568:	e567      	b.n	40503a <_vfiprintf_r+0xd2>
  40556a:	f899 2000 	ldrb.w	r2, [r9]
  40556e:	2a6c      	cmp	r2, #108	; 0x6c
  405570:	bf03      	ittte	eq
  405572:	f899 2001 	ldrbeq.w	r2, [r9, #1]
  405576:	f043 0320 	orreq.w	r3, r3, #32
  40557a:	f109 0901 	addeq.w	r9, r9, #1
  40557e:	f043 0310 	orrne.w	r3, r3, #16
  405582:	e558      	b.n	405036 <_vfiprintf_r+0xce>
  405584:	9908      	ldr	r1, [sp, #32]
  405586:	680e      	ldr	r6, [r1, #0]
  405588:	460a      	mov	r2, r1
  40558a:	2e00      	cmp	r6, #0
  40558c:	f102 0204 	add.w	r2, r2, #4
  405590:	f6ff adda 	blt.w	405148 <_vfiprintf_r+0x1e0>
  405594:	9208      	str	r2, [sp, #32]
  405596:	f899 2000 	ldrb.w	r2, [r9]
  40559a:	e54c      	b.n	405036 <_vfiprintf_r+0xce>
  40559c:	9607      	str	r6, [sp, #28]
  40559e:	2800      	cmp	r0, #0
  4055a0:	f040 82da 	bne.w	405b58 <_vfiprintf_r+0xbf0>
  4055a4:	4985      	ldr	r1, [pc, #532]	; (4057bc <_vfiprintf_r+0x854>)
  4055a6:	910b      	str	r1, [sp, #44]	; 0x2c
  4055a8:	e7a6      	b.n	4054f8 <_vfiprintf_r+0x590>
  4055aa:	9808      	ldr	r0, [sp, #32]
  4055ac:	4a83      	ldr	r2, [pc, #524]	; (4057bc <_vfiprintf_r+0x854>)
  4055ae:	9607      	str	r6, [sp, #28]
  4055b0:	920b      	str	r2, [sp, #44]	; 0x2c
  4055b2:	6806      	ldr	r6, [r0, #0]
  4055b4:	2278      	movs	r2, #120	; 0x78
  4055b6:	2130      	movs	r1, #48	; 0x30
  4055b8:	3004      	adds	r0, #4
  4055ba:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4055be:	f043 0302 	orr.w	r3, r3, #2
  4055c2:	9008      	str	r0, [sp, #32]
  4055c4:	2700      	movs	r7, #0
  4055c6:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4055ca:	2202      	movs	r2, #2
  4055cc:	e5d7      	b.n	40517e <_vfiprintf_r+0x216>
  4055ce:	f043 0320 	orr.w	r3, r3, #32
  4055d2:	f899 2000 	ldrb.w	r2, [r9]
  4055d6:	e52e      	b.n	405036 <_vfiprintf_r+0xce>
  4055d8:	9908      	ldr	r1, [sp, #32]
  4055da:	9607      	str	r6, [sp, #28]
  4055dc:	f8d1 8000 	ldr.w	r8, [r1]
  4055e0:	f04f 0200 	mov.w	r2, #0
  4055e4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4055e8:	1d0e      	adds	r6, r1, #4
  4055ea:	f1b8 0f00 	cmp.w	r8, #0
  4055ee:	f000 8281 	beq.w	405af4 <_vfiprintf_r+0xb8c>
  4055f2:	1c67      	adds	r7, r4, #1
  4055f4:	f000 8260 	beq.w	405ab8 <_vfiprintf_r+0xb50>
  4055f8:	4622      	mov	r2, r4
  4055fa:	2100      	movs	r1, #0
  4055fc:	4640      	mov	r0, r8
  4055fe:	9302      	str	r3, [sp, #8]
  405600:	f002 f856 	bl	4076b0 <memchr>
  405604:	9b02      	ldr	r3, [sp, #8]
  405606:	2800      	cmp	r0, #0
  405608:	f000 8284 	beq.w	405b14 <_vfiprintf_r+0xbac>
  40560c:	eba0 0208 	sub.w	r2, r0, r8
  405610:	9205      	str	r2, [sp, #20]
  405612:	9608      	str	r6, [sp, #32]
  405614:	9303      	str	r3, [sp, #12]
  405616:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40561a:	2400      	movs	r4, #0
  40561c:	e5ce      	b.n	4051bc <_vfiprintf_r+0x254>
  40561e:	f043 0301 	orr.w	r3, r3, #1
  405622:	f899 2000 	ldrb.w	r2, [r9]
  405626:	e506      	b.n	405036 <_vfiprintf_r+0xce>
  405628:	f899 2000 	ldrb.w	r2, [r9]
  40562c:	2001      	movs	r0, #1
  40562e:	252b      	movs	r5, #43	; 0x2b
  405630:	e501      	b.n	405036 <_vfiprintf_r+0xce>
  405632:	2800      	cmp	r0, #0
  405634:	f040 8287 	bne.w	405b46 <_vfiprintf_r+0xbde>
  405638:	0699      	lsls	r1, r3, #26
  40563a:	f100 8231 	bmi.w	405aa0 <_vfiprintf_r+0xb38>
  40563e:	06da      	lsls	r2, r3, #27
  405640:	d421      	bmi.n	405686 <_vfiprintf_r+0x71e>
  405642:	065b      	lsls	r3, r3, #25
  405644:	d51f      	bpl.n	405686 <_vfiprintf_r+0x71e>
  405646:	9a08      	ldr	r2, [sp, #32]
  405648:	6813      	ldr	r3, [r2, #0]
  40564a:	3204      	adds	r2, #4
  40564c:	9208      	str	r2, [sp, #32]
  40564e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  405652:	801a      	strh	r2, [r3, #0]
  405654:	e4ba      	b.n	404fcc <_vfiprintf_r+0x64>
  405656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40565a:	f899 2000 	ldrb.w	r2, [r9]
  40565e:	e4ea      	b.n	405036 <_vfiprintf_r+0xce>
  405660:	9607      	str	r6, [sp, #28]
  405662:	2800      	cmp	r0, #0
  405664:	f040 8275 	bne.w	405b52 <_vfiprintf_r+0xbea>
  405668:	2a00      	cmp	r2, #0
  40566a:	f000 8088 	beq.w	40577e <_vfiprintf_r+0x816>
  40566e:	2101      	movs	r1, #1
  405670:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405674:	f04f 0200 	mov.w	r2, #0
  405678:	9102      	str	r1, [sp, #8]
  40567a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40567e:	9105      	str	r1, [sp, #20]
  405680:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  405684:	e6d3      	b.n	40542e <_vfiprintf_r+0x4c6>
  405686:	9a08      	ldr	r2, [sp, #32]
  405688:	6813      	ldr	r3, [r2, #0]
  40568a:	3204      	adds	r2, #4
  40568c:	9208      	str	r2, [sp, #32]
  40568e:	9a04      	ldr	r2, [sp, #16]
  405690:	601a      	str	r2, [r3, #0]
  405692:	e49b      	b.n	404fcc <_vfiprintf_r+0x64>
  405694:	aa0f      	add	r2, sp, #60	; 0x3c
  405696:	9901      	ldr	r1, [sp, #4]
  405698:	4620      	mov	r0, r4
  40569a:	f7ff fc25 	bl	404ee8 <__sprint_r.part.0>
  40569e:	2800      	cmp	r0, #0
  4056a0:	d174      	bne.n	40578c <_vfiprintf_r+0x824>
  4056a2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4056a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4056a6:	f101 0c01 	add.w	ip, r1, #1
  4056aa:	46de      	mov	lr, fp
  4056ac:	e5b3      	b.n	405216 <_vfiprintf_r+0x2ae>
  4056ae:	9910      	ldr	r1, [sp, #64]	; 0x40
  4056b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4056b2:	1c48      	adds	r0, r1, #1
  4056b4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4056b8:	2d00      	cmp	r5, #0
  4056ba:	f43f add6 	beq.w	40526a <_vfiprintf_r+0x302>
  4056be:	3201      	adds	r2, #1
  4056c0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4056c4:	2101      	movs	r1, #1
  4056c6:	2807      	cmp	r0, #7
  4056c8:	9211      	str	r2, [sp, #68]	; 0x44
  4056ca:	9010      	str	r0, [sp, #64]	; 0x40
  4056cc:	f8ca 5000 	str.w	r5, [sl]
  4056d0:	f8ca 1004 	str.w	r1, [sl, #4]
  4056d4:	f340 80b6 	ble.w	405844 <_vfiprintf_r+0x8dc>
  4056d8:	2a00      	cmp	r2, #0
  4056da:	f040 8155 	bne.w	405988 <_vfiprintf_r+0xa20>
  4056de:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4056e0:	2b00      	cmp	r3, #0
  4056e2:	f43f add3 	beq.w	40528c <_vfiprintf_r+0x324>
  4056e6:	ab0e      	add	r3, sp, #56	; 0x38
  4056e8:	2202      	movs	r2, #2
  4056ea:	4608      	mov	r0, r1
  4056ec:	931c      	str	r3, [sp, #112]	; 0x70
  4056ee:	921d      	str	r2, [sp, #116]	; 0x74
  4056f0:	46da      	mov	sl, fp
  4056f2:	4601      	mov	r1, r0
  4056f4:	f10a 0a08 	add.w	sl, sl, #8
  4056f8:	3001      	adds	r0, #1
  4056fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4056fc:	2b80      	cmp	r3, #128	; 0x80
  4056fe:	f43f adcd 	beq.w	40529c <_vfiprintf_r+0x334>
  405702:	9b05      	ldr	r3, [sp, #20]
  405704:	1ae4      	subs	r4, r4, r3
  405706:	2c00      	cmp	r4, #0
  405708:	f77f ae07 	ble.w	40531a <_vfiprintf_r+0x3b2>
  40570c:	2c10      	cmp	r4, #16
  40570e:	4d2c      	ldr	r5, [pc, #176]	; (4057c0 <_vfiprintf_r+0x858>)
  405710:	dd1d      	ble.n	40574e <_vfiprintf_r+0x7e6>
  405712:	46d6      	mov	lr, sl
  405714:	2610      	movs	r6, #16
  405716:	9f06      	ldr	r7, [sp, #24]
  405718:	f8dd a004 	ldr.w	sl, [sp, #4]
  40571c:	e006      	b.n	40572c <_vfiprintf_r+0x7c4>
  40571e:	1c88      	adds	r0, r1, #2
  405720:	f10e 0e08 	add.w	lr, lr, #8
  405724:	4619      	mov	r1, r3
  405726:	3c10      	subs	r4, #16
  405728:	2c10      	cmp	r4, #16
  40572a:	dd0f      	ble.n	40574c <_vfiprintf_r+0x7e4>
  40572c:	1c4b      	adds	r3, r1, #1
  40572e:	3210      	adds	r2, #16
  405730:	2b07      	cmp	r3, #7
  405732:	9211      	str	r2, [sp, #68]	; 0x44
  405734:	e88e 0060 	stmia.w	lr, {r5, r6}
  405738:	9310      	str	r3, [sp, #64]	; 0x40
  40573a:	ddf0      	ble.n	40571e <_vfiprintf_r+0x7b6>
  40573c:	b9a2      	cbnz	r2, 405768 <_vfiprintf_r+0x800>
  40573e:	3c10      	subs	r4, #16
  405740:	2c10      	cmp	r4, #16
  405742:	f04f 0001 	mov.w	r0, #1
  405746:	4611      	mov	r1, r2
  405748:	46de      	mov	lr, fp
  40574a:	dcef      	bgt.n	40572c <_vfiprintf_r+0x7c4>
  40574c:	46f2      	mov	sl, lr
  40574e:	4422      	add	r2, r4
  405750:	2807      	cmp	r0, #7
  405752:	9211      	str	r2, [sp, #68]	; 0x44
  405754:	f8ca 5000 	str.w	r5, [sl]
  405758:	f8ca 4004 	str.w	r4, [sl, #4]
  40575c:	9010      	str	r0, [sp, #64]	; 0x40
  40575e:	dc31      	bgt.n	4057c4 <_vfiprintf_r+0x85c>
  405760:	f10a 0a08 	add.w	sl, sl, #8
  405764:	3001      	adds	r0, #1
  405766:	e5d8      	b.n	40531a <_vfiprintf_r+0x3b2>
  405768:	aa0f      	add	r2, sp, #60	; 0x3c
  40576a:	4651      	mov	r1, sl
  40576c:	4638      	mov	r0, r7
  40576e:	f7ff fbbb 	bl	404ee8 <__sprint_r.part.0>
  405772:	b958      	cbnz	r0, 40578c <_vfiprintf_r+0x824>
  405774:	9910      	ldr	r1, [sp, #64]	; 0x40
  405776:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405778:	1c48      	adds	r0, r1, #1
  40577a:	46de      	mov	lr, fp
  40577c:	e7d3      	b.n	405726 <_vfiprintf_r+0x7be>
  40577e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405780:	b123      	cbz	r3, 40578c <_vfiprintf_r+0x824>
  405782:	9806      	ldr	r0, [sp, #24]
  405784:	9901      	ldr	r1, [sp, #4]
  405786:	aa0f      	add	r2, sp, #60	; 0x3c
  405788:	f7ff fbae 	bl	404ee8 <__sprint_r.part.0>
  40578c:	9b01      	ldr	r3, [sp, #4]
  40578e:	899b      	ldrh	r3, [r3, #12]
  405790:	065b      	lsls	r3, r3, #25
  405792:	f57f acd2 	bpl.w	40513a <_vfiprintf_r+0x1d2>
  405796:	f04f 33ff 	mov.w	r3, #4294967295
  40579a:	9304      	str	r3, [sp, #16]
  40579c:	e4cd      	b.n	40513a <_vfiprintf_r+0x1d2>
  40579e:	aa0f      	add	r2, sp, #60	; 0x3c
  4057a0:	4641      	mov	r1, r8
  4057a2:	4638      	mov	r0, r7
  4057a4:	f7ff fba0 	bl	404ee8 <__sprint_r.part.0>
  4057a8:	2800      	cmp	r0, #0
  4057aa:	d1ef      	bne.n	40578c <_vfiprintf_r+0x824>
  4057ac:	9910      	ldr	r1, [sp, #64]	; 0x40
  4057ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057b0:	1c48      	adds	r0, r1, #1
  4057b2:	46da      	mov	sl, fp
  4057b4:	e5d8      	b.n	405368 <_vfiprintf_r+0x400>
  4057b6:	bf00      	nop
  4057b8:	0040946c 	.word	0x0040946c
  4057bc:	00409480 	.word	0x00409480
  4057c0:	004094d0 	.word	0x004094d0
  4057c4:	2a00      	cmp	r2, #0
  4057c6:	f040 8100 	bne.w	4059ca <_vfiprintf_r+0xa62>
  4057ca:	9a05      	ldr	r2, [sp, #20]
  4057cc:	921d      	str	r2, [sp, #116]	; 0x74
  4057ce:	2301      	movs	r3, #1
  4057d0:	9211      	str	r2, [sp, #68]	; 0x44
  4057d2:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
  4057d6:	9310      	str	r3, [sp, #64]	; 0x40
  4057d8:	46da      	mov	sl, fp
  4057da:	f10a 0a08 	add.w	sl, sl, #8
  4057de:	9b03      	ldr	r3, [sp, #12]
  4057e0:	0759      	lsls	r1, r3, #29
  4057e2:	d505      	bpl.n	4057f0 <_vfiprintf_r+0x888>
  4057e4:	9b07      	ldr	r3, [sp, #28]
  4057e6:	9902      	ldr	r1, [sp, #8]
  4057e8:	1a5c      	subs	r4, r3, r1
  4057ea:	2c00      	cmp	r4, #0
  4057ec:	f73f adae 	bgt.w	40534c <_vfiprintf_r+0x3e4>
  4057f0:	9b04      	ldr	r3, [sp, #16]
  4057f2:	9907      	ldr	r1, [sp, #28]
  4057f4:	9802      	ldr	r0, [sp, #8]
  4057f6:	4281      	cmp	r1, r0
  4057f8:	bfac      	ite	ge
  4057fa:	185b      	addge	r3, r3, r1
  4057fc:	181b      	addlt	r3, r3, r0
  4057fe:	9304      	str	r3, [sp, #16]
  405800:	bb7a      	cbnz	r2, 405862 <_vfiprintf_r+0x8fa>
  405802:	2300      	movs	r3, #0
  405804:	9310      	str	r3, [sp, #64]	; 0x40
  405806:	46da      	mov	sl, fp
  405808:	f7ff bbe0 	b.w	404fcc <_vfiprintf_r+0x64>
  40580c:	aa0f      	add	r2, sp, #60	; 0x3c
  40580e:	9901      	ldr	r1, [sp, #4]
  405810:	4620      	mov	r0, r4
  405812:	f7ff fb69 	bl	404ee8 <__sprint_r.part.0>
  405816:	2800      	cmp	r0, #0
  405818:	d1b8      	bne.n	40578c <_vfiprintf_r+0x824>
  40581a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40581c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40581e:	f101 0e01 	add.w	lr, r1, #1
  405822:	46dc      	mov	ip, fp
  405824:	e54e      	b.n	4052c4 <_vfiprintf_r+0x35c>
  405826:	2a00      	cmp	r2, #0
  405828:	f040 811c 	bne.w	405a64 <_vfiprintf_r+0xafc>
  40582c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  405830:	2900      	cmp	r1, #0
  405832:	f000 8111 	beq.w	405a58 <_vfiprintf_r+0xaf0>
  405836:	2201      	movs	r2, #1
  405838:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40583c:	4610      	mov	r0, r2
  40583e:	921d      	str	r2, [sp, #116]	; 0x74
  405840:	911c      	str	r1, [sp, #112]	; 0x70
  405842:	46da      	mov	sl, fp
  405844:	4601      	mov	r1, r0
  405846:	f10a 0a08 	add.w	sl, sl, #8
  40584a:	3001      	adds	r0, #1
  40584c:	e50d      	b.n	40526a <_vfiprintf_r+0x302>
  40584e:	9b03      	ldr	r3, [sp, #12]
  405850:	2a01      	cmp	r2, #1
  405852:	f000 8090 	beq.w	405976 <_vfiprintf_r+0xa0e>
  405856:	2a02      	cmp	r2, #2
  405858:	d10b      	bne.n	405872 <_vfiprintf_r+0x90a>
  40585a:	9303      	str	r3, [sp, #12]
  40585c:	2600      	movs	r6, #0
  40585e:	2700      	movs	r7, #0
  405860:	e615      	b.n	40548e <_vfiprintf_r+0x526>
  405862:	aa0f      	add	r2, sp, #60	; 0x3c
  405864:	9901      	ldr	r1, [sp, #4]
  405866:	9806      	ldr	r0, [sp, #24]
  405868:	f7ff fb3e 	bl	404ee8 <__sprint_r.part.0>
  40586c:	2800      	cmp	r0, #0
  40586e:	d0c8      	beq.n	405802 <_vfiprintf_r+0x89a>
  405870:	e78c      	b.n	40578c <_vfiprintf_r+0x824>
  405872:	9303      	str	r3, [sp, #12]
  405874:	2600      	movs	r6, #0
  405876:	2700      	movs	r7, #0
  405878:	4659      	mov	r1, fp
  40587a:	e000      	b.n	40587e <_vfiprintf_r+0x916>
  40587c:	4641      	mov	r1, r8
  40587e:	08f2      	lsrs	r2, r6, #3
  405880:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405884:	08f8      	lsrs	r0, r7, #3
  405886:	f006 0307 	and.w	r3, r6, #7
  40588a:	4607      	mov	r7, r0
  40588c:	4616      	mov	r6, r2
  40588e:	3330      	adds	r3, #48	; 0x30
  405890:	ea56 0207 	orrs.w	r2, r6, r7
  405894:	f801 3c01 	strb.w	r3, [r1, #-1]
  405898:	f101 38ff 	add.w	r8, r1, #4294967295
  40589c:	d1ee      	bne.n	40587c <_vfiprintf_r+0x914>
  40589e:	9a03      	ldr	r2, [sp, #12]
  4058a0:	07d6      	lsls	r6, r2, #31
  4058a2:	f57f ae04 	bpl.w	4054ae <_vfiprintf_r+0x546>
  4058a6:	2b30      	cmp	r3, #48	; 0x30
  4058a8:	f43f ae01 	beq.w	4054ae <_vfiprintf_r+0x546>
  4058ac:	3902      	subs	r1, #2
  4058ae:	2330      	movs	r3, #48	; 0x30
  4058b0:	f808 3c01 	strb.w	r3, [r8, #-1]
  4058b4:	ebab 0301 	sub.w	r3, fp, r1
  4058b8:	9305      	str	r3, [sp, #20]
  4058ba:	4688      	mov	r8, r1
  4058bc:	e47e      	b.n	4051bc <_vfiprintf_r+0x254>
  4058be:	9b04      	ldr	r3, [sp, #16]
  4058c0:	9a07      	ldr	r2, [sp, #28]
  4058c2:	428a      	cmp	r2, r1
  4058c4:	bfac      	ite	ge
  4058c6:	189b      	addge	r3, r3, r2
  4058c8:	185b      	addlt	r3, r3, r1
  4058ca:	9304      	str	r3, [sp, #16]
  4058cc:	e799      	b.n	405802 <_vfiprintf_r+0x89a>
  4058ce:	2202      	movs	r2, #2
  4058d0:	e455      	b.n	40517e <_vfiprintf_r+0x216>
  4058d2:	2f00      	cmp	r7, #0
  4058d4:	bf08      	it	eq
  4058d6:	2e0a      	cmpeq	r6, #10
  4058d8:	d34c      	bcc.n	405974 <_vfiprintf_r+0xa0c>
  4058da:	46d8      	mov	r8, fp
  4058dc:	4630      	mov	r0, r6
  4058de:	4639      	mov	r1, r7
  4058e0:	220a      	movs	r2, #10
  4058e2:	2300      	movs	r3, #0
  4058e4:	f003 fb56 	bl	408f94 <__aeabi_uldivmod>
  4058e8:	3230      	adds	r2, #48	; 0x30
  4058ea:	f808 2d01 	strb.w	r2, [r8, #-1]!
  4058ee:	4630      	mov	r0, r6
  4058f0:	4639      	mov	r1, r7
  4058f2:	2300      	movs	r3, #0
  4058f4:	220a      	movs	r2, #10
  4058f6:	f003 fb4d 	bl	408f94 <__aeabi_uldivmod>
  4058fa:	4606      	mov	r6, r0
  4058fc:	460f      	mov	r7, r1
  4058fe:	ea56 0307 	orrs.w	r3, r6, r7
  405902:	d1eb      	bne.n	4058dc <_vfiprintf_r+0x974>
  405904:	ebab 0308 	sub.w	r3, fp, r8
  405908:	9305      	str	r3, [sp, #20]
  40590a:	e457      	b.n	4051bc <_vfiprintf_r+0x254>
  40590c:	9405      	str	r4, [sp, #20]
  40590e:	46d8      	mov	r8, fp
  405910:	e454      	b.n	4051bc <_vfiprintf_r+0x254>
  405912:	aa0f      	add	r2, sp, #60	; 0x3c
  405914:	9901      	ldr	r1, [sp, #4]
  405916:	9806      	ldr	r0, [sp, #24]
  405918:	f7ff fae6 	bl	404ee8 <__sprint_r.part.0>
  40591c:	2800      	cmp	r0, #0
  40591e:	f47f af35 	bne.w	40578c <_vfiprintf_r+0x824>
  405922:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405924:	46da      	mov	sl, fp
  405926:	e75a      	b.n	4057de <_vfiprintf_r+0x876>
  405928:	aa0f      	add	r2, sp, #60	; 0x3c
  40592a:	9901      	ldr	r1, [sp, #4]
  40592c:	9806      	ldr	r0, [sp, #24]
  40592e:	f7ff fadb 	bl	404ee8 <__sprint_r.part.0>
  405932:	2800      	cmp	r0, #0
  405934:	f47f af2a 	bne.w	40578c <_vfiprintf_r+0x824>
  405938:	46da      	mov	sl, fp
  40593a:	f7ff bbe0 	b.w	4050fe <_vfiprintf_r+0x196>
  40593e:	3104      	adds	r1, #4
  405940:	6816      	ldr	r6, [r2, #0]
  405942:	9108      	str	r1, [sp, #32]
  405944:	2201      	movs	r2, #1
  405946:	2700      	movs	r7, #0
  405948:	e419      	b.n	40517e <_vfiprintf_r+0x216>
  40594a:	9808      	ldr	r0, [sp, #32]
  40594c:	4601      	mov	r1, r0
  40594e:	3104      	adds	r1, #4
  405950:	6806      	ldr	r6, [r0, #0]
  405952:	9108      	str	r1, [sp, #32]
  405954:	2700      	movs	r7, #0
  405956:	e412      	b.n	40517e <_vfiprintf_r+0x216>
  405958:	680e      	ldr	r6, [r1, #0]
  40595a:	3104      	adds	r1, #4
  40595c:	9108      	str	r1, [sp, #32]
  40595e:	2700      	movs	r7, #0
  405960:	e5d9      	b.n	405516 <_vfiprintf_r+0x5ae>
  405962:	9908      	ldr	r1, [sp, #32]
  405964:	680e      	ldr	r6, [r1, #0]
  405966:	460a      	mov	r2, r1
  405968:	17f7      	asrs	r7, r6, #31
  40596a:	3204      	adds	r2, #4
  40596c:	9208      	str	r2, [sp, #32]
  40596e:	4630      	mov	r0, r6
  405970:	4639      	mov	r1, r7
  405972:	e575      	b.n	405460 <_vfiprintf_r+0x4f8>
  405974:	9b03      	ldr	r3, [sp, #12]
  405976:	9303      	str	r3, [sp, #12]
  405978:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  40597c:	3630      	adds	r6, #48	; 0x30
  40597e:	2301      	movs	r3, #1
  405980:	f808 6d41 	strb.w	r6, [r8, #-65]!
  405984:	9305      	str	r3, [sp, #20]
  405986:	e419      	b.n	4051bc <_vfiprintf_r+0x254>
  405988:	aa0f      	add	r2, sp, #60	; 0x3c
  40598a:	9901      	ldr	r1, [sp, #4]
  40598c:	9806      	ldr	r0, [sp, #24]
  40598e:	f7ff faab 	bl	404ee8 <__sprint_r.part.0>
  405992:	2800      	cmp	r0, #0
  405994:	f47f aefa 	bne.w	40578c <_vfiprintf_r+0x824>
  405998:	9910      	ldr	r1, [sp, #64]	; 0x40
  40599a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40599c:	1c48      	adds	r0, r1, #1
  40599e:	46da      	mov	sl, fp
  4059a0:	e463      	b.n	40526a <_vfiprintf_r+0x302>
  4059a2:	aa0f      	add	r2, sp, #60	; 0x3c
  4059a4:	9901      	ldr	r1, [sp, #4]
  4059a6:	9806      	ldr	r0, [sp, #24]
  4059a8:	f7ff fa9e 	bl	404ee8 <__sprint_r.part.0>
  4059ac:	2800      	cmp	r0, #0
  4059ae:	f47f aeed 	bne.w	40578c <_vfiprintf_r+0x824>
  4059b2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4059b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4059b6:	1c48      	adds	r0, r1, #1
  4059b8:	46da      	mov	sl, fp
  4059ba:	e69e      	b.n	4056fa <_vfiprintf_r+0x792>
  4059bc:	2a00      	cmp	r2, #0
  4059be:	f040 8086 	bne.w	405ace <_vfiprintf_r+0xb66>
  4059c2:	2001      	movs	r0, #1
  4059c4:	4611      	mov	r1, r2
  4059c6:	46da      	mov	sl, fp
  4059c8:	e69b      	b.n	405702 <_vfiprintf_r+0x79a>
  4059ca:	aa0f      	add	r2, sp, #60	; 0x3c
  4059cc:	9901      	ldr	r1, [sp, #4]
  4059ce:	9806      	ldr	r0, [sp, #24]
  4059d0:	f7ff fa8a 	bl	404ee8 <__sprint_r.part.0>
  4059d4:	2800      	cmp	r0, #0
  4059d6:	f47f aed9 	bne.w	40578c <_vfiprintf_r+0x824>
  4059da:	9810      	ldr	r0, [sp, #64]	; 0x40
  4059dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4059de:	3001      	adds	r0, #1
  4059e0:	46da      	mov	sl, fp
  4059e2:	e49a      	b.n	40531a <_vfiprintf_r+0x3b2>
  4059e4:	9e08      	ldr	r6, [sp, #32]
  4059e6:	3607      	adds	r6, #7
  4059e8:	f026 0607 	bic.w	r6, r6, #7
  4059ec:	e9d6 0100 	ldrd	r0, r1, [r6]
  4059f0:	f106 0208 	add.w	r2, r6, #8
  4059f4:	9208      	str	r2, [sp, #32]
  4059f6:	4606      	mov	r6, r0
  4059f8:	460f      	mov	r7, r1
  4059fa:	e531      	b.n	405460 <_vfiprintf_r+0x4f8>
  4059fc:	9e08      	ldr	r6, [sp, #32]
  4059fe:	3607      	adds	r6, #7
  405a00:	f026 0207 	bic.w	r2, r6, #7
  405a04:	f102 0108 	add.w	r1, r2, #8
  405a08:	e9d2 6700 	ldrd	r6, r7, [r2]
  405a0c:	9108      	str	r1, [sp, #32]
  405a0e:	2201      	movs	r2, #1
  405a10:	f7ff bbb5 	b.w	40517e <_vfiprintf_r+0x216>
  405a14:	9e08      	ldr	r6, [sp, #32]
  405a16:	3607      	adds	r6, #7
  405a18:	f026 0207 	bic.w	r2, r6, #7
  405a1c:	f102 0108 	add.w	r1, r2, #8
  405a20:	e9d2 6700 	ldrd	r6, r7, [r2]
  405a24:	9108      	str	r1, [sp, #32]
  405a26:	2200      	movs	r2, #0
  405a28:	f7ff bba9 	b.w	40517e <_vfiprintf_r+0x216>
  405a2c:	9e08      	ldr	r6, [sp, #32]
  405a2e:	3607      	adds	r6, #7
  405a30:	f026 0107 	bic.w	r1, r6, #7
  405a34:	f101 0008 	add.w	r0, r1, #8
  405a38:	9008      	str	r0, [sp, #32]
  405a3a:	e9d1 6700 	ldrd	r6, r7, [r1]
  405a3e:	e56a      	b.n	405516 <_vfiprintf_r+0x5ae>
  405a40:	46d8      	mov	r8, fp
  405a42:	f7ff bbbb 	b.w	4051bc <_vfiprintf_r+0x254>
  405a46:	252d      	movs	r5, #45	; 0x2d
  405a48:	4276      	negs	r6, r6
  405a4a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  405a4e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405a52:	2201      	movs	r2, #1
  405a54:	f7ff bb98 	b.w	405188 <_vfiprintf_r+0x220>
  405a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405a5a:	b9d3      	cbnz	r3, 405a92 <_vfiprintf_r+0xb2a>
  405a5c:	4611      	mov	r1, r2
  405a5e:	2001      	movs	r0, #1
  405a60:	46da      	mov	sl, fp
  405a62:	e64e      	b.n	405702 <_vfiprintf_r+0x79a>
  405a64:	aa0f      	add	r2, sp, #60	; 0x3c
  405a66:	9901      	ldr	r1, [sp, #4]
  405a68:	9806      	ldr	r0, [sp, #24]
  405a6a:	f7ff fa3d 	bl	404ee8 <__sprint_r.part.0>
  405a6e:	2800      	cmp	r0, #0
  405a70:	f47f ae8c 	bne.w	40578c <_vfiprintf_r+0x824>
  405a74:	9910      	ldr	r1, [sp, #64]	; 0x40
  405a76:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a78:	1c48      	adds	r0, r1, #1
  405a7a:	46da      	mov	sl, fp
  405a7c:	e61a      	b.n	4056b4 <_vfiprintf_r+0x74c>
  405a7e:	aa0f      	add	r2, sp, #60	; 0x3c
  405a80:	9901      	ldr	r1, [sp, #4]
  405a82:	9806      	ldr	r0, [sp, #24]
  405a84:	f7ff fa30 	bl	404ee8 <__sprint_r.part.0>
  405a88:	2800      	cmp	r0, #0
  405a8a:	f47f ae7f 	bne.w	40578c <_vfiprintf_r+0x824>
  405a8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a90:	e6ae      	b.n	4057f0 <_vfiprintf_r+0x888>
  405a92:	ab0e      	add	r3, sp, #56	; 0x38
  405a94:	2202      	movs	r2, #2
  405a96:	931c      	str	r3, [sp, #112]	; 0x70
  405a98:	921d      	str	r2, [sp, #116]	; 0x74
  405a9a:	2001      	movs	r0, #1
  405a9c:	46da      	mov	sl, fp
  405a9e:	e628      	b.n	4056f2 <_vfiprintf_r+0x78a>
  405aa0:	9a08      	ldr	r2, [sp, #32]
  405aa2:	9904      	ldr	r1, [sp, #16]
  405aa4:	6813      	ldr	r3, [r2, #0]
  405aa6:	17cd      	asrs	r5, r1, #31
  405aa8:	4608      	mov	r0, r1
  405aaa:	3204      	adds	r2, #4
  405aac:	4629      	mov	r1, r5
  405aae:	9208      	str	r2, [sp, #32]
  405ab0:	e9c3 0100 	strd	r0, r1, [r3]
  405ab4:	f7ff ba8a 	b.w	404fcc <_vfiprintf_r+0x64>
  405ab8:	4640      	mov	r0, r8
  405aba:	9608      	str	r6, [sp, #32]
  405abc:	9303      	str	r3, [sp, #12]
  405abe:	f7fd ff7f 	bl	4039c0 <strlen>
  405ac2:	2400      	movs	r4, #0
  405ac4:	9005      	str	r0, [sp, #20]
  405ac6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405aca:	f7ff bb77 	b.w	4051bc <_vfiprintf_r+0x254>
  405ace:	aa0f      	add	r2, sp, #60	; 0x3c
  405ad0:	9901      	ldr	r1, [sp, #4]
  405ad2:	9806      	ldr	r0, [sp, #24]
  405ad4:	f7ff fa08 	bl	404ee8 <__sprint_r.part.0>
  405ad8:	2800      	cmp	r0, #0
  405ada:	f47f ae57 	bne.w	40578c <_vfiprintf_r+0x824>
  405ade:	9910      	ldr	r1, [sp, #64]	; 0x40
  405ae0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405ae2:	1c48      	adds	r0, r1, #1
  405ae4:	46da      	mov	sl, fp
  405ae6:	e60c      	b.n	405702 <_vfiprintf_r+0x79a>
  405ae8:	9910      	ldr	r1, [sp, #64]	; 0x40
  405aea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405aec:	4e1c      	ldr	r6, [pc, #112]	; (405b60 <_vfiprintf_r+0xbf8>)
  405aee:	3101      	adds	r1, #1
  405af0:	f7ff bba9 	b.w	405246 <_vfiprintf_r+0x2de>
  405af4:	2c06      	cmp	r4, #6
  405af6:	bf28      	it	cs
  405af8:	2406      	movcs	r4, #6
  405afa:	9405      	str	r4, [sp, #20]
  405afc:	9608      	str	r6, [sp, #32]
  405afe:	9402      	str	r4, [sp, #8]
  405b00:	f8df 8060 	ldr.w	r8, [pc, #96]	; 405b64 <_vfiprintf_r+0xbfc>
  405b04:	e493      	b.n	40542e <_vfiprintf_r+0x4c6>
  405b06:	9810      	ldr	r0, [sp, #64]	; 0x40
  405b08:	4e15      	ldr	r6, [pc, #84]	; (405b60 <_vfiprintf_r+0xbf8>)
  405b0a:	3001      	adds	r0, #1
  405b0c:	e443      	b.n	405396 <_vfiprintf_r+0x42e>
  405b0e:	4686      	mov	lr, r0
  405b10:	f7ff bbef 	b.w	4052f2 <_vfiprintf_r+0x38a>
  405b14:	9405      	str	r4, [sp, #20]
  405b16:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405b1a:	9608      	str	r6, [sp, #32]
  405b1c:	9303      	str	r3, [sp, #12]
  405b1e:	4604      	mov	r4, r0
  405b20:	f7ff bb4c 	b.w	4051bc <_vfiprintf_r+0x254>
  405b24:	9908      	ldr	r1, [sp, #32]
  405b26:	f899 2001 	ldrb.w	r2, [r9, #1]
  405b2a:	680c      	ldr	r4, [r1, #0]
  405b2c:	3104      	adds	r1, #4
  405b2e:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  405b32:	46b9      	mov	r9, r7
  405b34:	9108      	str	r1, [sp, #32]
  405b36:	f7ff ba7e 	b.w	405036 <_vfiprintf_r+0xce>
  405b3a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405b3e:	e4c6      	b.n	4054ce <_vfiprintf_r+0x566>
  405b40:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405b44:	e47a      	b.n	40543c <_vfiprintf_r+0x4d4>
  405b46:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405b4a:	e575      	b.n	405638 <_vfiprintf_r+0x6d0>
  405b4c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405b50:	e4d0      	b.n	4054f4 <_vfiprintf_r+0x58c>
  405b52:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405b56:	e587      	b.n	405668 <_vfiprintf_r+0x700>
  405b58:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405b5c:	e522      	b.n	4055a4 <_vfiprintf_r+0x63c>
  405b5e:	bf00      	nop
  405b60:	004094c0 	.word	0x004094c0
  405b64:	00409494 	.word	0x00409494

00405b68 <__sbprintf>:
  405b68:	b5f0      	push	{r4, r5, r6, r7, lr}
  405b6a:	460c      	mov	r4, r1
  405b6c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  405b70:	8989      	ldrh	r1, [r1, #12]
  405b72:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405b74:	89e5      	ldrh	r5, [r4, #14]
  405b76:	9619      	str	r6, [sp, #100]	; 0x64
  405b78:	f021 0102 	bic.w	r1, r1, #2
  405b7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405b7e:	f8ad 500e 	strh.w	r5, [sp, #14]
  405b82:	2500      	movs	r5, #0
  405b84:	69e7      	ldr	r7, [r4, #28]
  405b86:	f8ad 100c 	strh.w	r1, [sp, #12]
  405b8a:	9609      	str	r6, [sp, #36]	; 0x24
  405b8c:	9506      	str	r5, [sp, #24]
  405b8e:	ae1a      	add	r6, sp, #104	; 0x68
  405b90:	f44f 6580 	mov.w	r5, #1024	; 0x400
  405b94:	4669      	mov	r1, sp
  405b96:	9600      	str	r6, [sp, #0]
  405b98:	9604      	str	r6, [sp, #16]
  405b9a:	9502      	str	r5, [sp, #8]
  405b9c:	9505      	str	r5, [sp, #20]
  405b9e:	9707      	str	r7, [sp, #28]
  405ba0:	4606      	mov	r6, r0
  405ba2:	f7ff f9e1 	bl	404f68 <_vfiprintf_r>
  405ba6:	1e05      	subs	r5, r0, #0
  405ba8:	db07      	blt.n	405bba <__sbprintf+0x52>
  405baa:	4630      	mov	r0, r6
  405bac:	4669      	mov	r1, sp
  405bae:	f001 f8e5 	bl	406d7c <_fflush_r>
  405bb2:	2800      	cmp	r0, #0
  405bb4:	bf18      	it	ne
  405bb6:	f04f 35ff 	movne.w	r5, #4294967295
  405bba:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405bbe:	065b      	lsls	r3, r3, #25
  405bc0:	d503      	bpl.n	405bca <__sbprintf+0x62>
  405bc2:	89a3      	ldrh	r3, [r4, #12]
  405bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405bc8:	81a3      	strh	r3, [r4, #12]
  405bca:	4628      	mov	r0, r5
  405bcc:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  405bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405bd2:	bf00      	nop

00405bd4 <__swsetup_r>:
  405bd4:	b538      	push	{r3, r4, r5, lr}
  405bd6:	4b30      	ldr	r3, [pc, #192]	; (405c98 <__swsetup_r+0xc4>)
  405bd8:	681b      	ldr	r3, [r3, #0]
  405bda:	4605      	mov	r5, r0
  405bdc:	460c      	mov	r4, r1
  405bde:	b113      	cbz	r3, 405be6 <__swsetup_r+0x12>
  405be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405be2:	2a00      	cmp	r2, #0
  405be4:	d038      	beq.n	405c58 <__swsetup_r+0x84>
  405be6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405bea:	b293      	uxth	r3, r2
  405bec:	0718      	lsls	r0, r3, #28
  405bee:	d50c      	bpl.n	405c0a <__swsetup_r+0x36>
  405bf0:	6920      	ldr	r0, [r4, #16]
  405bf2:	b1a8      	cbz	r0, 405c20 <__swsetup_r+0x4c>
  405bf4:	f013 0201 	ands.w	r2, r3, #1
  405bf8:	d01e      	beq.n	405c38 <__swsetup_r+0x64>
  405bfa:	6963      	ldr	r3, [r4, #20]
  405bfc:	2200      	movs	r2, #0
  405bfe:	425b      	negs	r3, r3
  405c00:	61a3      	str	r3, [r4, #24]
  405c02:	60a2      	str	r2, [r4, #8]
  405c04:	b1f0      	cbz	r0, 405c44 <__swsetup_r+0x70>
  405c06:	2000      	movs	r0, #0
  405c08:	bd38      	pop	{r3, r4, r5, pc}
  405c0a:	06d9      	lsls	r1, r3, #27
  405c0c:	d53c      	bpl.n	405c88 <__swsetup_r+0xb4>
  405c0e:	0758      	lsls	r0, r3, #29
  405c10:	d426      	bmi.n	405c60 <__swsetup_r+0x8c>
  405c12:	6920      	ldr	r0, [r4, #16]
  405c14:	f042 0308 	orr.w	r3, r2, #8
  405c18:	81a3      	strh	r3, [r4, #12]
  405c1a:	b29b      	uxth	r3, r3
  405c1c:	2800      	cmp	r0, #0
  405c1e:	d1e9      	bne.n	405bf4 <__swsetup_r+0x20>
  405c20:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405c24:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405c28:	d0e4      	beq.n	405bf4 <__swsetup_r+0x20>
  405c2a:	4628      	mov	r0, r5
  405c2c:	4621      	mov	r1, r4
  405c2e:	f001 fce1 	bl	4075f4 <__smakebuf_r>
  405c32:	89a3      	ldrh	r3, [r4, #12]
  405c34:	6920      	ldr	r0, [r4, #16]
  405c36:	e7dd      	b.n	405bf4 <__swsetup_r+0x20>
  405c38:	0799      	lsls	r1, r3, #30
  405c3a:	bf58      	it	pl
  405c3c:	6962      	ldrpl	r2, [r4, #20]
  405c3e:	60a2      	str	r2, [r4, #8]
  405c40:	2800      	cmp	r0, #0
  405c42:	d1e0      	bne.n	405c06 <__swsetup_r+0x32>
  405c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405c48:	061a      	lsls	r2, r3, #24
  405c4a:	d5dd      	bpl.n	405c08 <__swsetup_r+0x34>
  405c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405c50:	81a3      	strh	r3, [r4, #12]
  405c52:	f04f 30ff 	mov.w	r0, #4294967295
  405c56:	bd38      	pop	{r3, r4, r5, pc}
  405c58:	4618      	mov	r0, r3
  405c5a:	f001 f923 	bl	406ea4 <__sinit>
  405c5e:	e7c2      	b.n	405be6 <__swsetup_r+0x12>
  405c60:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405c62:	b151      	cbz	r1, 405c7a <__swsetup_r+0xa6>
  405c64:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405c68:	4299      	cmp	r1, r3
  405c6a:	d004      	beq.n	405c76 <__swsetup_r+0xa2>
  405c6c:	4628      	mov	r0, r5
  405c6e:	f001 f9ef 	bl	407050 <_free_r>
  405c72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405c76:	2300      	movs	r3, #0
  405c78:	6323      	str	r3, [r4, #48]	; 0x30
  405c7a:	2300      	movs	r3, #0
  405c7c:	6920      	ldr	r0, [r4, #16]
  405c7e:	6063      	str	r3, [r4, #4]
  405c80:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405c84:	6020      	str	r0, [r4, #0]
  405c86:	e7c5      	b.n	405c14 <__swsetup_r+0x40>
  405c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405c8c:	2309      	movs	r3, #9
  405c8e:	602b      	str	r3, [r5, #0]
  405c90:	f04f 30ff 	mov.w	r0, #4294967295
  405c94:	81a2      	strh	r2, [r4, #12]
  405c96:	bd38      	pop	{r3, r4, r5, pc}
  405c98:	2040000c 	.word	0x2040000c

00405c9c <register_fini>:
  405c9c:	4b02      	ldr	r3, [pc, #8]	; (405ca8 <register_fini+0xc>)
  405c9e:	b113      	cbz	r3, 405ca6 <register_fini+0xa>
  405ca0:	4802      	ldr	r0, [pc, #8]	; (405cac <register_fini+0x10>)
  405ca2:	f000 b805 	b.w	405cb0 <atexit>
  405ca6:	4770      	bx	lr
  405ca8:	00000000 	.word	0x00000000
  405cac:	00406eb9 	.word	0x00406eb9

00405cb0 <atexit>:
  405cb0:	2300      	movs	r3, #0
  405cb2:	4601      	mov	r1, r0
  405cb4:	461a      	mov	r2, r3
  405cb6:	4618      	mov	r0, r3
  405cb8:	f002 bbb6 	b.w	408428 <__register_exitproc>

00405cbc <quorem>:
  405cbc:	6902      	ldr	r2, [r0, #16]
  405cbe:	690b      	ldr	r3, [r1, #16]
  405cc0:	4293      	cmp	r3, r2
  405cc2:	f300 808d 	bgt.w	405de0 <quorem+0x124>
  405cc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cca:	f103 38ff 	add.w	r8, r3, #4294967295
  405cce:	f101 0714 	add.w	r7, r1, #20
  405cd2:	f100 0b14 	add.w	fp, r0, #20
  405cd6:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  405cda:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405cde:	ea4f 0488 	mov.w	r4, r8, lsl #2
  405ce2:	b083      	sub	sp, #12
  405ce4:	3201      	adds	r2, #1
  405ce6:	fbb3 f9f2 	udiv	r9, r3, r2
  405cea:	eb0b 0304 	add.w	r3, fp, r4
  405cee:	9400      	str	r4, [sp, #0]
  405cf0:	eb07 0a04 	add.w	sl, r7, r4
  405cf4:	9301      	str	r3, [sp, #4]
  405cf6:	f1b9 0f00 	cmp.w	r9, #0
  405cfa:	d039      	beq.n	405d70 <quorem+0xb4>
  405cfc:	2500      	movs	r5, #0
  405cfe:	462e      	mov	r6, r5
  405d00:	46bc      	mov	ip, r7
  405d02:	46de      	mov	lr, fp
  405d04:	f85c 4b04 	ldr.w	r4, [ip], #4
  405d08:	f8de 3000 	ldr.w	r3, [lr]
  405d0c:	b2a2      	uxth	r2, r4
  405d0e:	fb09 5502 	mla	r5, r9, r2, r5
  405d12:	0c22      	lsrs	r2, r4, #16
  405d14:	0c2c      	lsrs	r4, r5, #16
  405d16:	fb09 4202 	mla	r2, r9, r2, r4
  405d1a:	b2ad      	uxth	r5, r5
  405d1c:	1b75      	subs	r5, r6, r5
  405d1e:	b296      	uxth	r6, r2
  405d20:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  405d24:	fa15 f383 	uxtah	r3, r5, r3
  405d28:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405d2c:	b29b      	uxth	r3, r3
  405d2e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  405d32:	45e2      	cmp	sl, ip
  405d34:	ea4f 4512 	mov.w	r5, r2, lsr #16
  405d38:	f84e 3b04 	str.w	r3, [lr], #4
  405d3c:	ea4f 4626 	mov.w	r6, r6, asr #16
  405d40:	d2e0      	bcs.n	405d04 <quorem+0x48>
  405d42:	9b00      	ldr	r3, [sp, #0]
  405d44:	f85b 3003 	ldr.w	r3, [fp, r3]
  405d48:	b993      	cbnz	r3, 405d70 <quorem+0xb4>
  405d4a:	9c01      	ldr	r4, [sp, #4]
  405d4c:	1f23      	subs	r3, r4, #4
  405d4e:	459b      	cmp	fp, r3
  405d50:	d20c      	bcs.n	405d6c <quorem+0xb0>
  405d52:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405d56:	b94b      	cbnz	r3, 405d6c <quorem+0xb0>
  405d58:	f1a4 0308 	sub.w	r3, r4, #8
  405d5c:	e002      	b.n	405d64 <quorem+0xa8>
  405d5e:	681a      	ldr	r2, [r3, #0]
  405d60:	3b04      	subs	r3, #4
  405d62:	b91a      	cbnz	r2, 405d6c <quorem+0xb0>
  405d64:	459b      	cmp	fp, r3
  405d66:	f108 38ff 	add.w	r8, r8, #4294967295
  405d6a:	d3f8      	bcc.n	405d5e <quorem+0xa2>
  405d6c:	f8c0 8010 	str.w	r8, [r0, #16]
  405d70:	4604      	mov	r4, r0
  405d72:	f001 ff4f 	bl	407c14 <__mcmp>
  405d76:	2800      	cmp	r0, #0
  405d78:	db2e      	blt.n	405dd8 <quorem+0x11c>
  405d7a:	f109 0901 	add.w	r9, r9, #1
  405d7e:	465d      	mov	r5, fp
  405d80:	2300      	movs	r3, #0
  405d82:	f857 1b04 	ldr.w	r1, [r7], #4
  405d86:	6828      	ldr	r0, [r5, #0]
  405d88:	b28a      	uxth	r2, r1
  405d8a:	1a9a      	subs	r2, r3, r2
  405d8c:	0c0b      	lsrs	r3, r1, #16
  405d8e:	fa12 f280 	uxtah	r2, r2, r0
  405d92:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  405d96:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405d9a:	b292      	uxth	r2, r2
  405d9c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405da0:	45ba      	cmp	sl, r7
  405da2:	f845 2b04 	str.w	r2, [r5], #4
  405da6:	ea4f 4323 	mov.w	r3, r3, asr #16
  405daa:	d2ea      	bcs.n	405d82 <quorem+0xc6>
  405dac:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405db0:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405db4:	b982      	cbnz	r2, 405dd8 <quorem+0x11c>
  405db6:	1f1a      	subs	r2, r3, #4
  405db8:	4593      	cmp	fp, r2
  405dba:	d20b      	bcs.n	405dd4 <quorem+0x118>
  405dbc:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405dc0:	b942      	cbnz	r2, 405dd4 <quorem+0x118>
  405dc2:	3b08      	subs	r3, #8
  405dc4:	e002      	b.n	405dcc <quorem+0x110>
  405dc6:	681a      	ldr	r2, [r3, #0]
  405dc8:	3b04      	subs	r3, #4
  405dca:	b91a      	cbnz	r2, 405dd4 <quorem+0x118>
  405dcc:	459b      	cmp	fp, r3
  405dce:	f108 38ff 	add.w	r8, r8, #4294967295
  405dd2:	d3f8      	bcc.n	405dc6 <quorem+0x10a>
  405dd4:	f8c4 8010 	str.w	r8, [r4, #16]
  405dd8:	4648      	mov	r0, r9
  405dda:	b003      	add	sp, #12
  405ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405de0:	2000      	movs	r0, #0
  405de2:	4770      	bx	lr
  405de4:	0000      	movs	r0, r0
	...

00405de8 <_dtoa_r>:
  405de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405dec:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405dee:	b09b      	sub	sp, #108	; 0x6c
  405df0:	4604      	mov	r4, r0
  405df2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  405df4:	4692      	mov	sl, r2
  405df6:	469b      	mov	fp, r3
  405df8:	b141      	cbz	r1, 405e0c <_dtoa_r+0x24>
  405dfa:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405dfc:	604a      	str	r2, [r1, #4]
  405dfe:	2301      	movs	r3, #1
  405e00:	4093      	lsls	r3, r2
  405e02:	608b      	str	r3, [r1, #8]
  405e04:	f001 fd2e 	bl	407864 <_Bfree>
  405e08:	2300      	movs	r3, #0
  405e0a:	6423      	str	r3, [r4, #64]	; 0x40
  405e0c:	f1bb 0f00 	cmp.w	fp, #0
  405e10:	465d      	mov	r5, fp
  405e12:	db35      	blt.n	405e80 <_dtoa_r+0x98>
  405e14:	2300      	movs	r3, #0
  405e16:	6033      	str	r3, [r6, #0]
  405e18:	4b9d      	ldr	r3, [pc, #628]	; (406090 <_dtoa_r+0x2a8>)
  405e1a:	43ab      	bics	r3, r5
  405e1c:	d015      	beq.n	405e4a <_dtoa_r+0x62>
  405e1e:	4650      	mov	r0, sl
  405e20:	4659      	mov	r1, fp
  405e22:	2200      	movs	r2, #0
  405e24:	2300      	movs	r3, #0
  405e26:	f003 f845 	bl	408eb4 <__aeabi_dcmpeq>
  405e2a:	4680      	mov	r8, r0
  405e2c:	2800      	cmp	r0, #0
  405e2e:	d02d      	beq.n	405e8c <_dtoa_r+0xa4>
  405e30:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405e32:	2301      	movs	r3, #1
  405e34:	6013      	str	r3, [r2, #0]
  405e36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405e38:	2b00      	cmp	r3, #0
  405e3a:	f000 80bd 	beq.w	405fb8 <_dtoa_r+0x1d0>
  405e3e:	4895      	ldr	r0, [pc, #596]	; (406094 <_dtoa_r+0x2ac>)
  405e40:	6018      	str	r0, [r3, #0]
  405e42:	3801      	subs	r0, #1
  405e44:	b01b      	add	sp, #108	; 0x6c
  405e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e4a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405e4c:	f242 730f 	movw	r3, #9999	; 0x270f
  405e50:	6013      	str	r3, [r2, #0]
  405e52:	f1ba 0f00 	cmp.w	sl, #0
  405e56:	d10d      	bne.n	405e74 <_dtoa_r+0x8c>
  405e58:	f3c5 0513 	ubfx	r5, r5, #0, #20
  405e5c:	b955      	cbnz	r5, 405e74 <_dtoa_r+0x8c>
  405e5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405e60:	488d      	ldr	r0, [pc, #564]	; (406098 <_dtoa_r+0x2b0>)
  405e62:	2b00      	cmp	r3, #0
  405e64:	d0ee      	beq.n	405e44 <_dtoa_r+0x5c>
  405e66:	f100 0308 	add.w	r3, r0, #8
  405e6a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  405e6c:	6013      	str	r3, [r2, #0]
  405e6e:	b01b      	add	sp, #108	; 0x6c
  405e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e74:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405e76:	4889      	ldr	r0, [pc, #548]	; (40609c <_dtoa_r+0x2b4>)
  405e78:	2b00      	cmp	r3, #0
  405e7a:	d0e3      	beq.n	405e44 <_dtoa_r+0x5c>
  405e7c:	1cc3      	adds	r3, r0, #3
  405e7e:	e7f4      	b.n	405e6a <_dtoa_r+0x82>
  405e80:	2301      	movs	r3, #1
  405e82:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  405e86:	6033      	str	r3, [r6, #0]
  405e88:	46ab      	mov	fp, r5
  405e8a:	e7c5      	b.n	405e18 <_dtoa_r+0x30>
  405e8c:	aa18      	add	r2, sp, #96	; 0x60
  405e8e:	ab19      	add	r3, sp, #100	; 0x64
  405e90:	9201      	str	r2, [sp, #4]
  405e92:	9300      	str	r3, [sp, #0]
  405e94:	4652      	mov	r2, sl
  405e96:	465b      	mov	r3, fp
  405e98:	4620      	mov	r0, r4
  405e9a:	f001 ff5b 	bl	407d54 <__d2b>
  405e9e:	0d2b      	lsrs	r3, r5, #20
  405ea0:	4681      	mov	r9, r0
  405ea2:	d071      	beq.n	405f88 <_dtoa_r+0x1a0>
  405ea4:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405ea8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  405eac:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405eae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405eb2:	4650      	mov	r0, sl
  405eb4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405eb8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405ebc:	2200      	movs	r2, #0
  405ebe:	4b78      	ldr	r3, [pc, #480]	; (4060a0 <_dtoa_r+0x2b8>)
  405ec0:	f002 fbdc 	bl	40867c <__aeabi_dsub>
  405ec4:	a36c      	add	r3, pc, #432	; (adr r3, 406078 <_dtoa_r+0x290>)
  405ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
  405eca:	f002 fd8b 	bl	4089e4 <__aeabi_dmul>
  405ece:	a36c      	add	r3, pc, #432	; (adr r3, 406080 <_dtoa_r+0x298>)
  405ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
  405ed4:	f002 fbd4 	bl	408680 <__adddf3>
  405ed8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405edc:	4630      	mov	r0, r6
  405ede:	f002 fd1b 	bl	408918 <__aeabi_i2d>
  405ee2:	a369      	add	r3, pc, #420	; (adr r3, 406088 <_dtoa_r+0x2a0>)
  405ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
  405ee8:	f002 fd7c 	bl	4089e4 <__aeabi_dmul>
  405eec:	4602      	mov	r2, r0
  405eee:	460b      	mov	r3, r1
  405ef0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405ef4:	f002 fbc4 	bl	408680 <__adddf3>
  405ef8:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405efc:	f003 f822 	bl	408f44 <__aeabi_d2iz>
  405f00:	2200      	movs	r2, #0
  405f02:	9002      	str	r0, [sp, #8]
  405f04:	2300      	movs	r3, #0
  405f06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405f0a:	f002 ffdd 	bl	408ec8 <__aeabi_dcmplt>
  405f0e:	2800      	cmp	r0, #0
  405f10:	f040 8173 	bne.w	4061fa <_dtoa_r+0x412>
  405f14:	9d02      	ldr	r5, [sp, #8]
  405f16:	2d16      	cmp	r5, #22
  405f18:	f200 815d 	bhi.w	4061d6 <_dtoa_r+0x3ee>
  405f1c:	4b61      	ldr	r3, [pc, #388]	; (4060a4 <_dtoa_r+0x2bc>)
  405f1e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  405f22:	e9d3 0100 	ldrd	r0, r1, [r3]
  405f26:	4652      	mov	r2, sl
  405f28:	465b      	mov	r3, fp
  405f2a:	f002 ffeb 	bl	408f04 <__aeabi_dcmpgt>
  405f2e:	2800      	cmp	r0, #0
  405f30:	f000 81c5 	beq.w	4062be <_dtoa_r+0x4d6>
  405f34:	1e6b      	subs	r3, r5, #1
  405f36:	9302      	str	r3, [sp, #8]
  405f38:	2300      	movs	r3, #0
  405f3a:	930e      	str	r3, [sp, #56]	; 0x38
  405f3c:	1bbf      	subs	r7, r7, r6
  405f3e:	1e7b      	subs	r3, r7, #1
  405f40:	9306      	str	r3, [sp, #24]
  405f42:	f100 8154 	bmi.w	4061ee <_dtoa_r+0x406>
  405f46:	2300      	movs	r3, #0
  405f48:	9308      	str	r3, [sp, #32]
  405f4a:	9b02      	ldr	r3, [sp, #8]
  405f4c:	2b00      	cmp	r3, #0
  405f4e:	f2c0 8145 	blt.w	4061dc <_dtoa_r+0x3f4>
  405f52:	9a06      	ldr	r2, [sp, #24]
  405f54:	930d      	str	r3, [sp, #52]	; 0x34
  405f56:	4611      	mov	r1, r2
  405f58:	4419      	add	r1, r3
  405f5a:	2300      	movs	r3, #0
  405f5c:	9106      	str	r1, [sp, #24]
  405f5e:	930c      	str	r3, [sp, #48]	; 0x30
  405f60:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f62:	2b09      	cmp	r3, #9
  405f64:	d82a      	bhi.n	405fbc <_dtoa_r+0x1d4>
  405f66:	2b05      	cmp	r3, #5
  405f68:	f340 865b 	ble.w	406c22 <_dtoa_r+0xe3a>
  405f6c:	3b04      	subs	r3, #4
  405f6e:	9324      	str	r3, [sp, #144]	; 0x90
  405f70:	2500      	movs	r5, #0
  405f72:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f74:	3b02      	subs	r3, #2
  405f76:	2b03      	cmp	r3, #3
  405f78:	f200 8642 	bhi.w	406c00 <_dtoa_r+0xe18>
  405f7c:	e8df f013 	tbh	[pc, r3, lsl #1]
  405f80:	02c903d4 	.word	0x02c903d4
  405f84:	046103df 	.word	0x046103df
  405f88:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405f8a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  405f8c:	443e      	add	r6, r7
  405f8e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  405f92:	2b20      	cmp	r3, #32
  405f94:	f340 818e 	ble.w	4062b4 <_dtoa_r+0x4cc>
  405f98:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405f9c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405fa0:	409d      	lsls	r5, r3
  405fa2:	fa2a f000 	lsr.w	r0, sl, r0
  405fa6:	4328      	orrs	r0, r5
  405fa8:	f002 fca6 	bl	4088f8 <__aeabi_ui2d>
  405fac:	2301      	movs	r3, #1
  405fae:	3e01      	subs	r6, #1
  405fb0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405fb4:	9314      	str	r3, [sp, #80]	; 0x50
  405fb6:	e781      	b.n	405ebc <_dtoa_r+0xd4>
  405fb8:	483b      	ldr	r0, [pc, #236]	; (4060a8 <_dtoa_r+0x2c0>)
  405fba:	e743      	b.n	405e44 <_dtoa_r+0x5c>
  405fbc:	2100      	movs	r1, #0
  405fbe:	6461      	str	r1, [r4, #68]	; 0x44
  405fc0:	4620      	mov	r0, r4
  405fc2:	9125      	str	r1, [sp, #148]	; 0x94
  405fc4:	f001 fc28 	bl	407818 <_Balloc>
  405fc8:	f04f 33ff 	mov.w	r3, #4294967295
  405fcc:	930a      	str	r3, [sp, #40]	; 0x28
  405fce:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405fd0:	930f      	str	r3, [sp, #60]	; 0x3c
  405fd2:	2301      	movs	r3, #1
  405fd4:	9004      	str	r0, [sp, #16]
  405fd6:	6420      	str	r0, [r4, #64]	; 0x40
  405fd8:	9224      	str	r2, [sp, #144]	; 0x90
  405fda:	930b      	str	r3, [sp, #44]	; 0x2c
  405fdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405fde:	2b00      	cmp	r3, #0
  405fe0:	f2c0 80d9 	blt.w	406196 <_dtoa_r+0x3ae>
  405fe4:	9a02      	ldr	r2, [sp, #8]
  405fe6:	2a0e      	cmp	r2, #14
  405fe8:	f300 80d5 	bgt.w	406196 <_dtoa_r+0x3ae>
  405fec:	4b2d      	ldr	r3, [pc, #180]	; (4060a4 <_dtoa_r+0x2bc>)
  405fee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
  405ff6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405ffa:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405ffc:	2b00      	cmp	r3, #0
  405ffe:	f2c0 83ba 	blt.w	406776 <_dtoa_r+0x98e>
  406002:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  406006:	4650      	mov	r0, sl
  406008:	462a      	mov	r2, r5
  40600a:	4633      	mov	r3, r6
  40600c:	4659      	mov	r1, fp
  40600e:	f002 fe13 	bl	408c38 <__aeabi_ddiv>
  406012:	f002 ff97 	bl	408f44 <__aeabi_d2iz>
  406016:	4680      	mov	r8, r0
  406018:	f002 fc7e 	bl	408918 <__aeabi_i2d>
  40601c:	462a      	mov	r2, r5
  40601e:	4633      	mov	r3, r6
  406020:	f002 fce0 	bl	4089e4 <__aeabi_dmul>
  406024:	460b      	mov	r3, r1
  406026:	4602      	mov	r2, r0
  406028:	4659      	mov	r1, fp
  40602a:	4650      	mov	r0, sl
  40602c:	f002 fb26 	bl	40867c <__aeabi_dsub>
  406030:	9d04      	ldr	r5, [sp, #16]
  406032:	f108 0330 	add.w	r3, r8, #48	; 0x30
  406036:	702b      	strb	r3, [r5, #0]
  406038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40603a:	2b01      	cmp	r3, #1
  40603c:	4606      	mov	r6, r0
  40603e:	460f      	mov	r7, r1
  406040:	f105 0501 	add.w	r5, r5, #1
  406044:	d068      	beq.n	406118 <_dtoa_r+0x330>
  406046:	2200      	movs	r2, #0
  406048:	4b18      	ldr	r3, [pc, #96]	; (4060ac <_dtoa_r+0x2c4>)
  40604a:	f002 fccb 	bl	4089e4 <__aeabi_dmul>
  40604e:	2200      	movs	r2, #0
  406050:	2300      	movs	r3, #0
  406052:	4606      	mov	r6, r0
  406054:	460f      	mov	r7, r1
  406056:	f002 ff2d 	bl	408eb4 <__aeabi_dcmpeq>
  40605a:	2800      	cmp	r0, #0
  40605c:	f040 8088 	bne.w	406170 <_dtoa_r+0x388>
  406060:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  406064:	f04f 0a00 	mov.w	sl, #0
  406068:	f8df b040 	ldr.w	fp, [pc, #64]	; 4060ac <_dtoa_r+0x2c4>
  40606c:	940c      	str	r4, [sp, #48]	; 0x30
  40606e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  406072:	e028      	b.n	4060c6 <_dtoa_r+0x2de>
  406074:	f3af 8000 	nop.w
  406078:	636f4361 	.word	0x636f4361
  40607c:	3fd287a7 	.word	0x3fd287a7
  406080:	8b60c8b3 	.word	0x8b60c8b3
  406084:	3fc68a28 	.word	0x3fc68a28
  406088:	509f79fb 	.word	0x509f79fb
  40608c:	3fd34413 	.word	0x3fd34413
  406090:	7ff00000 	.word	0x7ff00000
  406094:	0040949d 	.word	0x0040949d
  406098:	004094e0 	.word	0x004094e0
  40609c:	004094ec 	.word	0x004094ec
  4060a0:	3ff80000 	.word	0x3ff80000
  4060a4:	00409528 	.word	0x00409528
  4060a8:	0040949c 	.word	0x0040949c
  4060ac:	40240000 	.word	0x40240000
  4060b0:	f002 fc98 	bl	4089e4 <__aeabi_dmul>
  4060b4:	2200      	movs	r2, #0
  4060b6:	2300      	movs	r3, #0
  4060b8:	4606      	mov	r6, r0
  4060ba:	460f      	mov	r7, r1
  4060bc:	f002 fefa 	bl	408eb4 <__aeabi_dcmpeq>
  4060c0:	2800      	cmp	r0, #0
  4060c2:	f040 83c1 	bne.w	406848 <_dtoa_r+0xa60>
  4060c6:	4642      	mov	r2, r8
  4060c8:	464b      	mov	r3, r9
  4060ca:	4630      	mov	r0, r6
  4060cc:	4639      	mov	r1, r7
  4060ce:	f002 fdb3 	bl	408c38 <__aeabi_ddiv>
  4060d2:	f002 ff37 	bl	408f44 <__aeabi_d2iz>
  4060d6:	4604      	mov	r4, r0
  4060d8:	f002 fc1e 	bl	408918 <__aeabi_i2d>
  4060dc:	4642      	mov	r2, r8
  4060de:	464b      	mov	r3, r9
  4060e0:	f002 fc80 	bl	4089e4 <__aeabi_dmul>
  4060e4:	4602      	mov	r2, r0
  4060e6:	460b      	mov	r3, r1
  4060e8:	4630      	mov	r0, r6
  4060ea:	4639      	mov	r1, r7
  4060ec:	f002 fac6 	bl	40867c <__aeabi_dsub>
  4060f0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4060f4:	9e04      	ldr	r6, [sp, #16]
  4060f6:	f805 eb01 	strb.w	lr, [r5], #1
  4060fa:	eba5 0e06 	sub.w	lr, r5, r6
  4060fe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  406100:	45b6      	cmp	lr, r6
  406102:	e9cd 0106 	strd	r0, r1, [sp, #24]
  406106:	4652      	mov	r2, sl
  406108:	465b      	mov	r3, fp
  40610a:	d1d1      	bne.n	4060b0 <_dtoa_r+0x2c8>
  40610c:	46a0      	mov	r8, r4
  40610e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  406112:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406114:	4606      	mov	r6, r0
  406116:	460f      	mov	r7, r1
  406118:	4632      	mov	r2, r6
  40611a:	463b      	mov	r3, r7
  40611c:	4630      	mov	r0, r6
  40611e:	4639      	mov	r1, r7
  406120:	f002 faae 	bl	408680 <__adddf3>
  406124:	4606      	mov	r6, r0
  406126:	460f      	mov	r7, r1
  406128:	4602      	mov	r2, r0
  40612a:	460b      	mov	r3, r1
  40612c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406130:	f002 feca 	bl	408ec8 <__aeabi_dcmplt>
  406134:	b948      	cbnz	r0, 40614a <_dtoa_r+0x362>
  406136:	4632      	mov	r2, r6
  406138:	463b      	mov	r3, r7
  40613a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40613e:	f002 feb9 	bl	408eb4 <__aeabi_dcmpeq>
  406142:	b1a8      	cbz	r0, 406170 <_dtoa_r+0x388>
  406144:	f018 0f01 	tst.w	r8, #1
  406148:	d012      	beq.n	406170 <_dtoa_r+0x388>
  40614a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40614e:	9a04      	ldr	r2, [sp, #16]
  406150:	1e6b      	subs	r3, r5, #1
  406152:	e004      	b.n	40615e <_dtoa_r+0x376>
  406154:	429a      	cmp	r2, r3
  406156:	f000 8401 	beq.w	40695c <_dtoa_r+0xb74>
  40615a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40615e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  406162:	f103 0501 	add.w	r5, r3, #1
  406166:	d0f5      	beq.n	406154 <_dtoa_r+0x36c>
  406168:	f108 0801 	add.w	r8, r8, #1
  40616c:	f883 8000 	strb.w	r8, [r3]
  406170:	4649      	mov	r1, r9
  406172:	4620      	mov	r0, r4
  406174:	f001 fb76 	bl	407864 <_Bfree>
  406178:	2200      	movs	r2, #0
  40617a:	9b02      	ldr	r3, [sp, #8]
  40617c:	702a      	strb	r2, [r5, #0]
  40617e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406180:	3301      	adds	r3, #1
  406182:	6013      	str	r3, [r2, #0]
  406184:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406186:	2b00      	cmp	r3, #0
  406188:	f000 839e 	beq.w	4068c8 <_dtoa_r+0xae0>
  40618c:	9804      	ldr	r0, [sp, #16]
  40618e:	601d      	str	r5, [r3, #0]
  406190:	b01b      	add	sp, #108	; 0x6c
  406192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406196:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406198:	2a00      	cmp	r2, #0
  40619a:	d03e      	beq.n	40621a <_dtoa_r+0x432>
  40619c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40619e:	2a01      	cmp	r2, #1
  4061a0:	f340 8311 	ble.w	4067c6 <_dtoa_r+0x9de>
  4061a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4061a8:	1e5f      	subs	r7, r3, #1
  4061aa:	42ba      	cmp	r2, r7
  4061ac:	f2c0 838f 	blt.w	4068ce <_dtoa_r+0xae6>
  4061b0:	1bd7      	subs	r7, r2, r7
  4061b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061b4:	2b00      	cmp	r3, #0
  4061b6:	f2c0 848b 	blt.w	406ad0 <_dtoa_r+0xce8>
  4061ba:	9d08      	ldr	r5, [sp, #32]
  4061bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061be:	9a08      	ldr	r2, [sp, #32]
  4061c0:	441a      	add	r2, r3
  4061c2:	9208      	str	r2, [sp, #32]
  4061c4:	9a06      	ldr	r2, [sp, #24]
  4061c6:	2101      	movs	r1, #1
  4061c8:	441a      	add	r2, r3
  4061ca:	4620      	mov	r0, r4
  4061cc:	9206      	str	r2, [sp, #24]
  4061ce:	f001 fbe3 	bl	407998 <__i2b>
  4061d2:	4606      	mov	r6, r0
  4061d4:	e024      	b.n	406220 <_dtoa_r+0x438>
  4061d6:	2301      	movs	r3, #1
  4061d8:	930e      	str	r3, [sp, #56]	; 0x38
  4061da:	e6af      	b.n	405f3c <_dtoa_r+0x154>
  4061dc:	9a08      	ldr	r2, [sp, #32]
  4061de:	9b02      	ldr	r3, [sp, #8]
  4061e0:	1ad2      	subs	r2, r2, r3
  4061e2:	425b      	negs	r3, r3
  4061e4:	930c      	str	r3, [sp, #48]	; 0x30
  4061e6:	2300      	movs	r3, #0
  4061e8:	9208      	str	r2, [sp, #32]
  4061ea:	930d      	str	r3, [sp, #52]	; 0x34
  4061ec:	e6b8      	b.n	405f60 <_dtoa_r+0x178>
  4061ee:	f1c7 0301 	rsb	r3, r7, #1
  4061f2:	9308      	str	r3, [sp, #32]
  4061f4:	2300      	movs	r3, #0
  4061f6:	9306      	str	r3, [sp, #24]
  4061f8:	e6a7      	b.n	405f4a <_dtoa_r+0x162>
  4061fa:	9d02      	ldr	r5, [sp, #8]
  4061fc:	4628      	mov	r0, r5
  4061fe:	f002 fb8b 	bl	408918 <__aeabi_i2d>
  406202:	4602      	mov	r2, r0
  406204:	460b      	mov	r3, r1
  406206:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40620a:	f002 fe53 	bl	408eb4 <__aeabi_dcmpeq>
  40620e:	2800      	cmp	r0, #0
  406210:	f47f ae80 	bne.w	405f14 <_dtoa_r+0x12c>
  406214:	1e6b      	subs	r3, r5, #1
  406216:	9302      	str	r3, [sp, #8]
  406218:	e67c      	b.n	405f14 <_dtoa_r+0x12c>
  40621a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40621c:	9d08      	ldr	r5, [sp, #32]
  40621e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  406220:	2d00      	cmp	r5, #0
  406222:	dd0c      	ble.n	40623e <_dtoa_r+0x456>
  406224:	9906      	ldr	r1, [sp, #24]
  406226:	2900      	cmp	r1, #0
  406228:	460b      	mov	r3, r1
  40622a:	dd08      	ble.n	40623e <_dtoa_r+0x456>
  40622c:	42a9      	cmp	r1, r5
  40622e:	9a08      	ldr	r2, [sp, #32]
  406230:	bfa8      	it	ge
  406232:	462b      	movge	r3, r5
  406234:	1ad2      	subs	r2, r2, r3
  406236:	1aed      	subs	r5, r5, r3
  406238:	1acb      	subs	r3, r1, r3
  40623a:	9208      	str	r2, [sp, #32]
  40623c:	9306      	str	r3, [sp, #24]
  40623e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406240:	b1d3      	cbz	r3, 406278 <_dtoa_r+0x490>
  406242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406244:	2b00      	cmp	r3, #0
  406246:	f000 82b7 	beq.w	4067b8 <_dtoa_r+0x9d0>
  40624a:	2f00      	cmp	r7, #0
  40624c:	dd10      	ble.n	406270 <_dtoa_r+0x488>
  40624e:	4631      	mov	r1, r6
  406250:	463a      	mov	r2, r7
  406252:	4620      	mov	r0, r4
  406254:	f001 fc3c 	bl	407ad0 <__pow5mult>
  406258:	464a      	mov	r2, r9
  40625a:	4601      	mov	r1, r0
  40625c:	4606      	mov	r6, r0
  40625e:	4620      	mov	r0, r4
  406260:	f001 fba4 	bl	4079ac <__multiply>
  406264:	4649      	mov	r1, r9
  406266:	4680      	mov	r8, r0
  406268:	4620      	mov	r0, r4
  40626a:	f001 fafb 	bl	407864 <_Bfree>
  40626e:	46c1      	mov	r9, r8
  406270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406272:	1bda      	subs	r2, r3, r7
  406274:	f040 82a1 	bne.w	4067ba <_dtoa_r+0x9d2>
  406278:	2101      	movs	r1, #1
  40627a:	4620      	mov	r0, r4
  40627c:	f001 fb8c 	bl	407998 <__i2b>
  406280:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406282:	2b00      	cmp	r3, #0
  406284:	4680      	mov	r8, r0
  406286:	dd1c      	ble.n	4062c2 <_dtoa_r+0x4da>
  406288:	4601      	mov	r1, r0
  40628a:	461a      	mov	r2, r3
  40628c:	4620      	mov	r0, r4
  40628e:	f001 fc1f 	bl	407ad0 <__pow5mult>
  406292:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406294:	2b01      	cmp	r3, #1
  406296:	4680      	mov	r8, r0
  406298:	f340 8254 	ble.w	406744 <_dtoa_r+0x95c>
  40629c:	2300      	movs	r3, #0
  40629e:	930c      	str	r3, [sp, #48]	; 0x30
  4062a0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4062a4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4062a8:	6918      	ldr	r0, [r3, #16]
  4062aa:	f001 fb25 	bl	4078f8 <__hi0bits>
  4062ae:	f1c0 0020 	rsb	r0, r0, #32
  4062b2:	e010      	b.n	4062d6 <_dtoa_r+0x4ee>
  4062b4:	f1c3 0520 	rsb	r5, r3, #32
  4062b8:	fa0a f005 	lsl.w	r0, sl, r5
  4062bc:	e674      	b.n	405fa8 <_dtoa_r+0x1c0>
  4062be:	900e      	str	r0, [sp, #56]	; 0x38
  4062c0:	e63c      	b.n	405f3c <_dtoa_r+0x154>
  4062c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4062c4:	2b01      	cmp	r3, #1
  4062c6:	f340 8287 	ble.w	4067d8 <_dtoa_r+0x9f0>
  4062ca:	2300      	movs	r3, #0
  4062cc:	930c      	str	r3, [sp, #48]	; 0x30
  4062ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4062d0:	2001      	movs	r0, #1
  4062d2:	2b00      	cmp	r3, #0
  4062d4:	d1e4      	bne.n	4062a0 <_dtoa_r+0x4b8>
  4062d6:	9a06      	ldr	r2, [sp, #24]
  4062d8:	4410      	add	r0, r2
  4062da:	f010 001f 	ands.w	r0, r0, #31
  4062de:	f000 80a1 	beq.w	406424 <_dtoa_r+0x63c>
  4062e2:	f1c0 0320 	rsb	r3, r0, #32
  4062e6:	2b04      	cmp	r3, #4
  4062e8:	f340 849e 	ble.w	406c28 <_dtoa_r+0xe40>
  4062ec:	9b08      	ldr	r3, [sp, #32]
  4062ee:	f1c0 001c 	rsb	r0, r0, #28
  4062f2:	4403      	add	r3, r0
  4062f4:	9308      	str	r3, [sp, #32]
  4062f6:	4613      	mov	r3, r2
  4062f8:	4403      	add	r3, r0
  4062fa:	4405      	add	r5, r0
  4062fc:	9306      	str	r3, [sp, #24]
  4062fe:	9b08      	ldr	r3, [sp, #32]
  406300:	2b00      	cmp	r3, #0
  406302:	dd05      	ble.n	406310 <_dtoa_r+0x528>
  406304:	4649      	mov	r1, r9
  406306:	461a      	mov	r2, r3
  406308:	4620      	mov	r0, r4
  40630a:	f001 fc31 	bl	407b70 <__lshift>
  40630e:	4681      	mov	r9, r0
  406310:	9b06      	ldr	r3, [sp, #24]
  406312:	2b00      	cmp	r3, #0
  406314:	dd05      	ble.n	406322 <_dtoa_r+0x53a>
  406316:	4641      	mov	r1, r8
  406318:	461a      	mov	r2, r3
  40631a:	4620      	mov	r0, r4
  40631c:	f001 fc28 	bl	407b70 <__lshift>
  406320:	4680      	mov	r8, r0
  406322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406324:	2b00      	cmp	r3, #0
  406326:	f040 8086 	bne.w	406436 <_dtoa_r+0x64e>
  40632a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40632c:	2b00      	cmp	r3, #0
  40632e:	f340 8266 	ble.w	4067fe <_dtoa_r+0xa16>
  406332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406334:	2b00      	cmp	r3, #0
  406336:	f000 8098 	beq.w	40646a <_dtoa_r+0x682>
  40633a:	2d00      	cmp	r5, #0
  40633c:	dd05      	ble.n	40634a <_dtoa_r+0x562>
  40633e:	4631      	mov	r1, r6
  406340:	462a      	mov	r2, r5
  406342:	4620      	mov	r0, r4
  406344:	f001 fc14 	bl	407b70 <__lshift>
  406348:	4606      	mov	r6, r0
  40634a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40634c:	2b00      	cmp	r3, #0
  40634e:	f040 8337 	bne.w	4069c0 <_dtoa_r+0xbd8>
  406352:	9606      	str	r6, [sp, #24]
  406354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406356:	9a04      	ldr	r2, [sp, #16]
  406358:	f8dd b018 	ldr.w	fp, [sp, #24]
  40635c:	3b01      	subs	r3, #1
  40635e:	18d3      	adds	r3, r2, r3
  406360:	930b      	str	r3, [sp, #44]	; 0x2c
  406362:	f00a 0301 	and.w	r3, sl, #1
  406366:	930c      	str	r3, [sp, #48]	; 0x30
  406368:	4617      	mov	r7, r2
  40636a:	46c2      	mov	sl, r8
  40636c:	4651      	mov	r1, sl
  40636e:	4648      	mov	r0, r9
  406370:	f7ff fca4 	bl	405cbc <quorem>
  406374:	4631      	mov	r1, r6
  406376:	4605      	mov	r5, r0
  406378:	4648      	mov	r0, r9
  40637a:	f001 fc4b 	bl	407c14 <__mcmp>
  40637e:	465a      	mov	r2, fp
  406380:	900a      	str	r0, [sp, #40]	; 0x28
  406382:	4651      	mov	r1, sl
  406384:	4620      	mov	r0, r4
  406386:	f001 fc61 	bl	407c4c <__mdiff>
  40638a:	68c2      	ldr	r2, [r0, #12]
  40638c:	4680      	mov	r8, r0
  40638e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  406392:	2a00      	cmp	r2, #0
  406394:	f040 822b 	bne.w	4067ee <_dtoa_r+0xa06>
  406398:	4601      	mov	r1, r0
  40639a:	4648      	mov	r0, r9
  40639c:	9308      	str	r3, [sp, #32]
  40639e:	f001 fc39 	bl	407c14 <__mcmp>
  4063a2:	4641      	mov	r1, r8
  4063a4:	9006      	str	r0, [sp, #24]
  4063a6:	4620      	mov	r0, r4
  4063a8:	f001 fa5c 	bl	407864 <_Bfree>
  4063ac:	9a06      	ldr	r2, [sp, #24]
  4063ae:	9b08      	ldr	r3, [sp, #32]
  4063b0:	b932      	cbnz	r2, 4063c0 <_dtoa_r+0x5d8>
  4063b2:	9924      	ldr	r1, [sp, #144]	; 0x90
  4063b4:	b921      	cbnz	r1, 4063c0 <_dtoa_r+0x5d8>
  4063b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4063b8:	2a00      	cmp	r2, #0
  4063ba:	f000 83ef 	beq.w	406b9c <_dtoa_r+0xdb4>
  4063be:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4063c0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4063c2:	2900      	cmp	r1, #0
  4063c4:	f2c0 829f 	blt.w	406906 <_dtoa_r+0xb1e>
  4063c8:	d105      	bne.n	4063d6 <_dtoa_r+0x5ee>
  4063ca:	9924      	ldr	r1, [sp, #144]	; 0x90
  4063cc:	b919      	cbnz	r1, 4063d6 <_dtoa_r+0x5ee>
  4063ce:	990c      	ldr	r1, [sp, #48]	; 0x30
  4063d0:	2900      	cmp	r1, #0
  4063d2:	f000 8298 	beq.w	406906 <_dtoa_r+0xb1e>
  4063d6:	2a00      	cmp	r2, #0
  4063d8:	f300 8306 	bgt.w	4069e8 <_dtoa_r+0xc00>
  4063dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4063de:	703b      	strb	r3, [r7, #0]
  4063e0:	f107 0801 	add.w	r8, r7, #1
  4063e4:	4297      	cmp	r7, r2
  4063e6:	4645      	mov	r5, r8
  4063e8:	f000 830c 	beq.w	406a04 <_dtoa_r+0xc1c>
  4063ec:	4649      	mov	r1, r9
  4063ee:	2300      	movs	r3, #0
  4063f0:	220a      	movs	r2, #10
  4063f2:	4620      	mov	r0, r4
  4063f4:	f001 fa40 	bl	407878 <__multadd>
  4063f8:	455e      	cmp	r6, fp
  4063fa:	4681      	mov	r9, r0
  4063fc:	4631      	mov	r1, r6
  4063fe:	f04f 0300 	mov.w	r3, #0
  406402:	f04f 020a 	mov.w	r2, #10
  406406:	4620      	mov	r0, r4
  406408:	f000 81eb 	beq.w	4067e2 <_dtoa_r+0x9fa>
  40640c:	f001 fa34 	bl	407878 <__multadd>
  406410:	4659      	mov	r1, fp
  406412:	4606      	mov	r6, r0
  406414:	2300      	movs	r3, #0
  406416:	220a      	movs	r2, #10
  406418:	4620      	mov	r0, r4
  40641a:	f001 fa2d 	bl	407878 <__multadd>
  40641e:	4647      	mov	r7, r8
  406420:	4683      	mov	fp, r0
  406422:	e7a3      	b.n	40636c <_dtoa_r+0x584>
  406424:	201c      	movs	r0, #28
  406426:	9b08      	ldr	r3, [sp, #32]
  406428:	4403      	add	r3, r0
  40642a:	9308      	str	r3, [sp, #32]
  40642c:	9b06      	ldr	r3, [sp, #24]
  40642e:	4403      	add	r3, r0
  406430:	4405      	add	r5, r0
  406432:	9306      	str	r3, [sp, #24]
  406434:	e763      	b.n	4062fe <_dtoa_r+0x516>
  406436:	4641      	mov	r1, r8
  406438:	4648      	mov	r0, r9
  40643a:	f001 fbeb 	bl	407c14 <__mcmp>
  40643e:	2800      	cmp	r0, #0
  406440:	f6bf af73 	bge.w	40632a <_dtoa_r+0x542>
  406444:	9f02      	ldr	r7, [sp, #8]
  406446:	4649      	mov	r1, r9
  406448:	2300      	movs	r3, #0
  40644a:	220a      	movs	r2, #10
  40644c:	4620      	mov	r0, r4
  40644e:	3f01      	subs	r7, #1
  406450:	9702      	str	r7, [sp, #8]
  406452:	f001 fa11 	bl	407878 <__multadd>
  406456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406458:	4681      	mov	r9, r0
  40645a:	2b00      	cmp	r3, #0
  40645c:	f040 83b6 	bne.w	406bcc <_dtoa_r+0xde4>
  406460:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406462:	2b00      	cmp	r3, #0
  406464:	f340 83bf 	ble.w	406be6 <_dtoa_r+0xdfe>
  406468:	930a      	str	r3, [sp, #40]	; 0x28
  40646a:	f8dd b010 	ldr.w	fp, [sp, #16]
  40646e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406470:	465d      	mov	r5, fp
  406472:	e002      	b.n	40647a <_dtoa_r+0x692>
  406474:	f001 fa00 	bl	407878 <__multadd>
  406478:	4681      	mov	r9, r0
  40647a:	4641      	mov	r1, r8
  40647c:	4648      	mov	r0, r9
  40647e:	f7ff fc1d 	bl	405cbc <quorem>
  406482:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  406486:	f805 ab01 	strb.w	sl, [r5], #1
  40648a:	eba5 030b 	sub.w	r3, r5, fp
  40648e:	42bb      	cmp	r3, r7
  406490:	f04f 020a 	mov.w	r2, #10
  406494:	f04f 0300 	mov.w	r3, #0
  406498:	4649      	mov	r1, r9
  40649a:	4620      	mov	r0, r4
  40649c:	dbea      	blt.n	406474 <_dtoa_r+0x68c>
  40649e:	9b04      	ldr	r3, [sp, #16]
  4064a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4064a2:	2a01      	cmp	r2, #1
  4064a4:	bfac      	ite	ge
  4064a6:	189b      	addge	r3, r3, r2
  4064a8:	3301      	addlt	r3, #1
  4064aa:	461d      	mov	r5, r3
  4064ac:	f04f 0b00 	mov.w	fp, #0
  4064b0:	4649      	mov	r1, r9
  4064b2:	2201      	movs	r2, #1
  4064b4:	4620      	mov	r0, r4
  4064b6:	f001 fb5b 	bl	407b70 <__lshift>
  4064ba:	4641      	mov	r1, r8
  4064bc:	4681      	mov	r9, r0
  4064be:	f001 fba9 	bl	407c14 <__mcmp>
  4064c2:	2800      	cmp	r0, #0
  4064c4:	f340 823d 	ble.w	406942 <_dtoa_r+0xb5a>
  4064c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4064cc:	9904      	ldr	r1, [sp, #16]
  4064ce:	1e6b      	subs	r3, r5, #1
  4064d0:	e004      	b.n	4064dc <_dtoa_r+0x6f4>
  4064d2:	428b      	cmp	r3, r1
  4064d4:	f000 81ae 	beq.w	406834 <_dtoa_r+0xa4c>
  4064d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4064dc:	2a39      	cmp	r2, #57	; 0x39
  4064de:	f103 0501 	add.w	r5, r3, #1
  4064e2:	d0f6      	beq.n	4064d2 <_dtoa_r+0x6ea>
  4064e4:	3201      	adds	r2, #1
  4064e6:	701a      	strb	r2, [r3, #0]
  4064e8:	4641      	mov	r1, r8
  4064ea:	4620      	mov	r0, r4
  4064ec:	f001 f9ba 	bl	407864 <_Bfree>
  4064f0:	2e00      	cmp	r6, #0
  4064f2:	f43f ae3d 	beq.w	406170 <_dtoa_r+0x388>
  4064f6:	f1bb 0f00 	cmp.w	fp, #0
  4064fa:	d005      	beq.n	406508 <_dtoa_r+0x720>
  4064fc:	45b3      	cmp	fp, r6
  4064fe:	d003      	beq.n	406508 <_dtoa_r+0x720>
  406500:	4659      	mov	r1, fp
  406502:	4620      	mov	r0, r4
  406504:	f001 f9ae 	bl	407864 <_Bfree>
  406508:	4631      	mov	r1, r6
  40650a:	4620      	mov	r0, r4
  40650c:	f001 f9aa 	bl	407864 <_Bfree>
  406510:	e62e      	b.n	406170 <_dtoa_r+0x388>
  406512:	2300      	movs	r3, #0
  406514:	930b      	str	r3, [sp, #44]	; 0x2c
  406516:	9b02      	ldr	r3, [sp, #8]
  406518:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40651a:	4413      	add	r3, r2
  40651c:	930f      	str	r3, [sp, #60]	; 0x3c
  40651e:	3301      	adds	r3, #1
  406520:	2b01      	cmp	r3, #1
  406522:	461f      	mov	r7, r3
  406524:	461e      	mov	r6, r3
  406526:	930a      	str	r3, [sp, #40]	; 0x28
  406528:	bfb8      	it	lt
  40652a:	2701      	movlt	r7, #1
  40652c:	2100      	movs	r1, #0
  40652e:	2f17      	cmp	r7, #23
  406530:	6461      	str	r1, [r4, #68]	; 0x44
  406532:	d90a      	bls.n	40654a <_dtoa_r+0x762>
  406534:	2201      	movs	r2, #1
  406536:	2304      	movs	r3, #4
  406538:	005b      	lsls	r3, r3, #1
  40653a:	f103 0014 	add.w	r0, r3, #20
  40653e:	4287      	cmp	r7, r0
  406540:	4611      	mov	r1, r2
  406542:	f102 0201 	add.w	r2, r2, #1
  406546:	d2f7      	bcs.n	406538 <_dtoa_r+0x750>
  406548:	6461      	str	r1, [r4, #68]	; 0x44
  40654a:	4620      	mov	r0, r4
  40654c:	f001 f964 	bl	407818 <_Balloc>
  406550:	2e0e      	cmp	r6, #14
  406552:	9004      	str	r0, [sp, #16]
  406554:	6420      	str	r0, [r4, #64]	; 0x40
  406556:	f63f ad41 	bhi.w	405fdc <_dtoa_r+0x1f4>
  40655a:	2d00      	cmp	r5, #0
  40655c:	f43f ad3e 	beq.w	405fdc <_dtoa_r+0x1f4>
  406560:	9902      	ldr	r1, [sp, #8]
  406562:	2900      	cmp	r1, #0
  406564:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  406568:	f340 8202 	ble.w	406970 <_dtoa_r+0xb88>
  40656c:	4bb8      	ldr	r3, [pc, #736]	; (406850 <_dtoa_r+0xa68>)
  40656e:	f001 020f 	and.w	r2, r1, #15
  406572:	110d      	asrs	r5, r1, #4
  406574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406578:	06e9      	lsls	r1, r5, #27
  40657a:	e9d3 6700 	ldrd	r6, r7, [r3]
  40657e:	f140 81ae 	bpl.w	4068de <_dtoa_r+0xaf6>
  406582:	4bb4      	ldr	r3, [pc, #720]	; (406854 <_dtoa_r+0xa6c>)
  406584:	4650      	mov	r0, sl
  406586:	4659      	mov	r1, fp
  406588:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40658c:	f002 fb54 	bl	408c38 <__aeabi_ddiv>
  406590:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  406594:	f005 050f 	and.w	r5, r5, #15
  406598:	f04f 0a03 	mov.w	sl, #3
  40659c:	b18d      	cbz	r5, 4065c2 <_dtoa_r+0x7da>
  40659e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 406854 <_dtoa_r+0xa6c>
  4065a2:	07ea      	lsls	r2, r5, #31
  4065a4:	d509      	bpl.n	4065ba <_dtoa_r+0x7d2>
  4065a6:	4630      	mov	r0, r6
  4065a8:	4639      	mov	r1, r7
  4065aa:	e9d8 2300 	ldrd	r2, r3, [r8]
  4065ae:	f002 fa19 	bl	4089e4 <__aeabi_dmul>
  4065b2:	f10a 0a01 	add.w	sl, sl, #1
  4065b6:	4606      	mov	r6, r0
  4065b8:	460f      	mov	r7, r1
  4065ba:	106d      	asrs	r5, r5, #1
  4065bc:	f108 0808 	add.w	r8, r8, #8
  4065c0:	d1ef      	bne.n	4065a2 <_dtoa_r+0x7ba>
  4065c2:	463b      	mov	r3, r7
  4065c4:	4632      	mov	r2, r6
  4065c6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4065ca:	f002 fb35 	bl	408c38 <__aeabi_ddiv>
  4065ce:	4607      	mov	r7, r0
  4065d0:	4688      	mov	r8, r1
  4065d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4065d4:	b143      	cbz	r3, 4065e8 <_dtoa_r+0x800>
  4065d6:	2200      	movs	r2, #0
  4065d8:	4b9f      	ldr	r3, [pc, #636]	; (406858 <_dtoa_r+0xa70>)
  4065da:	4638      	mov	r0, r7
  4065dc:	4641      	mov	r1, r8
  4065de:	f002 fc73 	bl	408ec8 <__aeabi_dcmplt>
  4065e2:	2800      	cmp	r0, #0
  4065e4:	f040 8286 	bne.w	406af4 <_dtoa_r+0xd0c>
  4065e8:	4650      	mov	r0, sl
  4065ea:	f002 f995 	bl	408918 <__aeabi_i2d>
  4065ee:	463a      	mov	r2, r7
  4065f0:	4643      	mov	r3, r8
  4065f2:	f002 f9f7 	bl	4089e4 <__aeabi_dmul>
  4065f6:	4b99      	ldr	r3, [pc, #612]	; (40685c <_dtoa_r+0xa74>)
  4065f8:	2200      	movs	r2, #0
  4065fa:	f002 f841 	bl	408680 <__adddf3>
  4065fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406600:	4605      	mov	r5, r0
  406602:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406606:	2b00      	cmp	r3, #0
  406608:	f000 813e 	beq.w	406888 <_dtoa_r+0xaa0>
  40660c:	9b02      	ldr	r3, [sp, #8]
  40660e:	9315      	str	r3, [sp, #84]	; 0x54
  406610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406612:	9312      	str	r3, [sp, #72]	; 0x48
  406614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406616:	2b00      	cmp	r3, #0
  406618:	f000 81fa 	beq.w	406a10 <_dtoa_r+0xc28>
  40661c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40661e:	4b8c      	ldr	r3, [pc, #560]	; (406850 <_dtoa_r+0xa68>)
  406620:	498f      	ldr	r1, [pc, #572]	; (406860 <_dtoa_r+0xa78>)
  406622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406626:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40662a:	2000      	movs	r0, #0
  40662c:	f002 fb04 	bl	408c38 <__aeabi_ddiv>
  406630:	462a      	mov	r2, r5
  406632:	4633      	mov	r3, r6
  406634:	f002 f822 	bl	40867c <__aeabi_dsub>
  406638:	4682      	mov	sl, r0
  40663a:	468b      	mov	fp, r1
  40663c:	4638      	mov	r0, r7
  40663e:	4641      	mov	r1, r8
  406640:	f002 fc80 	bl	408f44 <__aeabi_d2iz>
  406644:	4605      	mov	r5, r0
  406646:	f002 f967 	bl	408918 <__aeabi_i2d>
  40664a:	4602      	mov	r2, r0
  40664c:	460b      	mov	r3, r1
  40664e:	4638      	mov	r0, r7
  406650:	4641      	mov	r1, r8
  406652:	f002 f813 	bl	40867c <__aeabi_dsub>
  406656:	3530      	adds	r5, #48	; 0x30
  406658:	fa5f f885 	uxtb.w	r8, r5
  40665c:	9d04      	ldr	r5, [sp, #16]
  40665e:	4606      	mov	r6, r0
  406660:	460f      	mov	r7, r1
  406662:	f885 8000 	strb.w	r8, [r5]
  406666:	4602      	mov	r2, r0
  406668:	460b      	mov	r3, r1
  40666a:	4650      	mov	r0, sl
  40666c:	4659      	mov	r1, fp
  40666e:	3501      	adds	r5, #1
  406670:	f002 fc48 	bl	408f04 <__aeabi_dcmpgt>
  406674:	2800      	cmp	r0, #0
  406676:	d154      	bne.n	406722 <_dtoa_r+0x93a>
  406678:	4632      	mov	r2, r6
  40667a:	463b      	mov	r3, r7
  40667c:	2000      	movs	r0, #0
  40667e:	4976      	ldr	r1, [pc, #472]	; (406858 <_dtoa_r+0xa70>)
  406680:	f001 fffc 	bl	40867c <__aeabi_dsub>
  406684:	4602      	mov	r2, r0
  406686:	460b      	mov	r3, r1
  406688:	4650      	mov	r0, sl
  40668a:	4659      	mov	r1, fp
  40668c:	f002 fc3a 	bl	408f04 <__aeabi_dcmpgt>
  406690:	2800      	cmp	r0, #0
  406692:	f040 8270 	bne.w	406b76 <_dtoa_r+0xd8e>
  406696:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406698:	2a01      	cmp	r2, #1
  40669a:	f000 8111 	beq.w	4068c0 <_dtoa_r+0xad8>
  40669e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4066a0:	9a04      	ldr	r2, [sp, #16]
  4066a2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4066a6:	4413      	add	r3, r2
  4066a8:	4699      	mov	r9, r3
  4066aa:	e00d      	b.n	4066c8 <_dtoa_r+0x8e0>
  4066ac:	2000      	movs	r0, #0
  4066ae:	496a      	ldr	r1, [pc, #424]	; (406858 <_dtoa_r+0xa70>)
  4066b0:	f001 ffe4 	bl	40867c <__aeabi_dsub>
  4066b4:	4652      	mov	r2, sl
  4066b6:	465b      	mov	r3, fp
  4066b8:	f002 fc06 	bl	408ec8 <__aeabi_dcmplt>
  4066bc:	2800      	cmp	r0, #0
  4066be:	f040 8258 	bne.w	406b72 <_dtoa_r+0xd8a>
  4066c2:	454d      	cmp	r5, r9
  4066c4:	f000 80fa 	beq.w	4068bc <_dtoa_r+0xad4>
  4066c8:	4650      	mov	r0, sl
  4066ca:	4659      	mov	r1, fp
  4066cc:	2200      	movs	r2, #0
  4066ce:	4b65      	ldr	r3, [pc, #404]	; (406864 <_dtoa_r+0xa7c>)
  4066d0:	f002 f988 	bl	4089e4 <__aeabi_dmul>
  4066d4:	2200      	movs	r2, #0
  4066d6:	4b63      	ldr	r3, [pc, #396]	; (406864 <_dtoa_r+0xa7c>)
  4066d8:	4682      	mov	sl, r0
  4066da:	468b      	mov	fp, r1
  4066dc:	4630      	mov	r0, r6
  4066de:	4639      	mov	r1, r7
  4066e0:	f002 f980 	bl	4089e4 <__aeabi_dmul>
  4066e4:	460f      	mov	r7, r1
  4066e6:	4606      	mov	r6, r0
  4066e8:	f002 fc2c 	bl	408f44 <__aeabi_d2iz>
  4066ec:	4680      	mov	r8, r0
  4066ee:	f002 f913 	bl	408918 <__aeabi_i2d>
  4066f2:	4602      	mov	r2, r0
  4066f4:	460b      	mov	r3, r1
  4066f6:	4630      	mov	r0, r6
  4066f8:	4639      	mov	r1, r7
  4066fa:	f001 ffbf 	bl	40867c <__aeabi_dsub>
  4066fe:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406702:	fa5f f888 	uxtb.w	r8, r8
  406706:	4652      	mov	r2, sl
  406708:	465b      	mov	r3, fp
  40670a:	f805 8b01 	strb.w	r8, [r5], #1
  40670e:	4606      	mov	r6, r0
  406710:	460f      	mov	r7, r1
  406712:	f002 fbd9 	bl	408ec8 <__aeabi_dcmplt>
  406716:	4632      	mov	r2, r6
  406718:	463b      	mov	r3, r7
  40671a:	2800      	cmp	r0, #0
  40671c:	d0c6      	beq.n	4066ac <_dtoa_r+0x8c4>
  40671e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406722:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406724:	9302      	str	r3, [sp, #8]
  406726:	e523      	b.n	406170 <_dtoa_r+0x388>
  406728:	2300      	movs	r3, #0
  40672a:	930b      	str	r3, [sp, #44]	; 0x2c
  40672c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40672e:	2b00      	cmp	r3, #0
  406730:	f340 80dc 	ble.w	4068ec <_dtoa_r+0xb04>
  406734:	461f      	mov	r7, r3
  406736:	461e      	mov	r6, r3
  406738:	930f      	str	r3, [sp, #60]	; 0x3c
  40673a:	930a      	str	r3, [sp, #40]	; 0x28
  40673c:	e6f6      	b.n	40652c <_dtoa_r+0x744>
  40673e:	2301      	movs	r3, #1
  406740:	930b      	str	r3, [sp, #44]	; 0x2c
  406742:	e7f3      	b.n	40672c <_dtoa_r+0x944>
  406744:	f1ba 0f00 	cmp.w	sl, #0
  406748:	f47f ada8 	bne.w	40629c <_dtoa_r+0x4b4>
  40674c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406750:	2b00      	cmp	r3, #0
  406752:	f47f adba 	bne.w	4062ca <_dtoa_r+0x4e2>
  406756:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40675a:	0d3f      	lsrs	r7, r7, #20
  40675c:	053f      	lsls	r7, r7, #20
  40675e:	2f00      	cmp	r7, #0
  406760:	f000 820d 	beq.w	406b7e <_dtoa_r+0xd96>
  406764:	9b08      	ldr	r3, [sp, #32]
  406766:	3301      	adds	r3, #1
  406768:	9308      	str	r3, [sp, #32]
  40676a:	9b06      	ldr	r3, [sp, #24]
  40676c:	3301      	adds	r3, #1
  40676e:	9306      	str	r3, [sp, #24]
  406770:	2301      	movs	r3, #1
  406772:	930c      	str	r3, [sp, #48]	; 0x30
  406774:	e5ab      	b.n	4062ce <_dtoa_r+0x4e6>
  406776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406778:	2b00      	cmp	r3, #0
  40677a:	f73f ac42 	bgt.w	406002 <_dtoa_r+0x21a>
  40677e:	f040 8221 	bne.w	406bc4 <_dtoa_r+0xddc>
  406782:	2200      	movs	r2, #0
  406784:	4b38      	ldr	r3, [pc, #224]	; (406868 <_dtoa_r+0xa80>)
  406786:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40678a:	f002 f92b 	bl	4089e4 <__aeabi_dmul>
  40678e:	4652      	mov	r2, sl
  406790:	465b      	mov	r3, fp
  406792:	f002 fbad 	bl	408ef0 <__aeabi_dcmpge>
  406796:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40679a:	4646      	mov	r6, r8
  40679c:	2800      	cmp	r0, #0
  40679e:	d041      	beq.n	406824 <_dtoa_r+0xa3c>
  4067a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4067a2:	9d04      	ldr	r5, [sp, #16]
  4067a4:	43db      	mvns	r3, r3
  4067a6:	9302      	str	r3, [sp, #8]
  4067a8:	4641      	mov	r1, r8
  4067aa:	4620      	mov	r0, r4
  4067ac:	f001 f85a 	bl	407864 <_Bfree>
  4067b0:	2e00      	cmp	r6, #0
  4067b2:	f43f acdd 	beq.w	406170 <_dtoa_r+0x388>
  4067b6:	e6a7      	b.n	406508 <_dtoa_r+0x720>
  4067b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4067ba:	4649      	mov	r1, r9
  4067bc:	4620      	mov	r0, r4
  4067be:	f001 f987 	bl	407ad0 <__pow5mult>
  4067c2:	4681      	mov	r9, r0
  4067c4:	e558      	b.n	406278 <_dtoa_r+0x490>
  4067c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4067c8:	2a00      	cmp	r2, #0
  4067ca:	f000 8187 	beq.w	406adc <_dtoa_r+0xcf4>
  4067ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4067d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4067d4:	9d08      	ldr	r5, [sp, #32]
  4067d6:	e4f2      	b.n	4061be <_dtoa_r+0x3d6>
  4067d8:	f1ba 0f00 	cmp.w	sl, #0
  4067dc:	f47f ad75 	bne.w	4062ca <_dtoa_r+0x4e2>
  4067e0:	e7b4      	b.n	40674c <_dtoa_r+0x964>
  4067e2:	f001 f849 	bl	407878 <__multadd>
  4067e6:	4647      	mov	r7, r8
  4067e8:	4606      	mov	r6, r0
  4067ea:	4683      	mov	fp, r0
  4067ec:	e5be      	b.n	40636c <_dtoa_r+0x584>
  4067ee:	4601      	mov	r1, r0
  4067f0:	4620      	mov	r0, r4
  4067f2:	9306      	str	r3, [sp, #24]
  4067f4:	f001 f836 	bl	407864 <_Bfree>
  4067f8:	2201      	movs	r2, #1
  4067fa:	9b06      	ldr	r3, [sp, #24]
  4067fc:	e5e0      	b.n	4063c0 <_dtoa_r+0x5d8>
  4067fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406800:	2b02      	cmp	r3, #2
  406802:	f77f ad96 	ble.w	406332 <_dtoa_r+0x54a>
  406806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406808:	2b00      	cmp	r3, #0
  40680a:	d1c9      	bne.n	4067a0 <_dtoa_r+0x9b8>
  40680c:	4641      	mov	r1, r8
  40680e:	2205      	movs	r2, #5
  406810:	4620      	mov	r0, r4
  406812:	f001 f831 	bl	407878 <__multadd>
  406816:	4601      	mov	r1, r0
  406818:	4680      	mov	r8, r0
  40681a:	4648      	mov	r0, r9
  40681c:	f001 f9fa 	bl	407c14 <__mcmp>
  406820:	2800      	cmp	r0, #0
  406822:	ddbd      	ble.n	4067a0 <_dtoa_r+0x9b8>
  406824:	9a02      	ldr	r2, [sp, #8]
  406826:	9904      	ldr	r1, [sp, #16]
  406828:	2331      	movs	r3, #49	; 0x31
  40682a:	3201      	adds	r2, #1
  40682c:	9202      	str	r2, [sp, #8]
  40682e:	700b      	strb	r3, [r1, #0]
  406830:	1c4d      	adds	r5, r1, #1
  406832:	e7b9      	b.n	4067a8 <_dtoa_r+0x9c0>
  406834:	9a02      	ldr	r2, [sp, #8]
  406836:	3201      	adds	r2, #1
  406838:	9202      	str	r2, [sp, #8]
  40683a:	9a04      	ldr	r2, [sp, #16]
  40683c:	2331      	movs	r3, #49	; 0x31
  40683e:	7013      	strb	r3, [r2, #0]
  406840:	e652      	b.n	4064e8 <_dtoa_r+0x700>
  406842:	2301      	movs	r3, #1
  406844:	930b      	str	r3, [sp, #44]	; 0x2c
  406846:	e666      	b.n	406516 <_dtoa_r+0x72e>
  406848:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40684c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40684e:	e48f      	b.n	406170 <_dtoa_r+0x388>
  406850:	00409528 	.word	0x00409528
  406854:	00409500 	.word	0x00409500
  406858:	3ff00000 	.word	0x3ff00000
  40685c:	401c0000 	.word	0x401c0000
  406860:	3fe00000 	.word	0x3fe00000
  406864:	40240000 	.word	0x40240000
  406868:	40140000 	.word	0x40140000
  40686c:	4650      	mov	r0, sl
  40686e:	f002 f853 	bl	408918 <__aeabi_i2d>
  406872:	463a      	mov	r2, r7
  406874:	4643      	mov	r3, r8
  406876:	f002 f8b5 	bl	4089e4 <__aeabi_dmul>
  40687a:	2200      	movs	r2, #0
  40687c:	4bc1      	ldr	r3, [pc, #772]	; (406b84 <_dtoa_r+0xd9c>)
  40687e:	f001 feff 	bl	408680 <__adddf3>
  406882:	4605      	mov	r5, r0
  406884:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406888:	4641      	mov	r1, r8
  40688a:	2200      	movs	r2, #0
  40688c:	4bbe      	ldr	r3, [pc, #760]	; (406b88 <_dtoa_r+0xda0>)
  40688e:	4638      	mov	r0, r7
  406890:	f001 fef4 	bl	40867c <__aeabi_dsub>
  406894:	462a      	mov	r2, r5
  406896:	4633      	mov	r3, r6
  406898:	4682      	mov	sl, r0
  40689a:	468b      	mov	fp, r1
  40689c:	f002 fb32 	bl	408f04 <__aeabi_dcmpgt>
  4068a0:	4680      	mov	r8, r0
  4068a2:	2800      	cmp	r0, #0
  4068a4:	f040 8110 	bne.w	406ac8 <_dtoa_r+0xce0>
  4068a8:	462a      	mov	r2, r5
  4068aa:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4068ae:	4650      	mov	r0, sl
  4068b0:	4659      	mov	r1, fp
  4068b2:	f002 fb09 	bl	408ec8 <__aeabi_dcmplt>
  4068b6:	b118      	cbz	r0, 4068c0 <_dtoa_r+0xad8>
  4068b8:	4646      	mov	r6, r8
  4068ba:	e771      	b.n	4067a0 <_dtoa_r+0x9b8>
  4068bc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4068c0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4068c4:	f7ff bb8a 	b.w	405fdc <_dtoa_r+0x1f4>
  4068c8:	9804      	ldr	r0, [sp, #16]
  4068ca:	f7ff babb 	b.w	405e44 <_dtoa_r+0x5c>
  4068ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4068d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4068d2:	970c      	str	r7, [sp, #48]	; 0x30
  4068d4:	1afb      	subs	r3, r7, r3
  4068d6:	441a      	add	r2, r3
  4068d8:	920d      	str	r2, [sp, #52]	; 0x34
  4068da:	2700      	movs	r7, #0
  4068dc:	e469      	b.n	4061b2 <_dtoa_r+0x3ca>
  4068de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  4068e2:	f04f 0a02 	mov.w	sl, #2
  4068e6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4068ea:	e657      	b.n	40659c <_dtoa_r+0x7b4>
  4068ec:	2100      	movs	r1, #0
  4068ee:	2301      	movs	r3, #1
  4068f0:	6461      	str	r1, [r4, #68]	; 0x44
  4068f2:	4620      	mov	r0, r4
  4068f4:	9325      	str	r3, [sp, #148]	; 0x94
  4068f6:	f000 ff8f 	bl	407818 <_Balloc>
  4068fa:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4068fc:	9004      	str	r0, [sp, #16]
  4068fe:	6420      	str	r0, [r4, #64]	; 0x40
  406900:	930a      	str	r3, [sp, #40]	; 0x28
  406902:	930f      	str	r3, [sp, #60]	; 0x3c
  406904:	e629      	b.n	40655a <_dtoa_r+0x772>
  406906:	2a00      	cmp	r2, #0
  406908:	46d0      	mov	r8, sl
  40690a:	f8cd b018 	str.w	fp, [sp, #24]
  40690e:	469a      	mov	sl, r3
  406910:	dd11      	ble.n	406936 <_dtoa_r+0xb4e>
  406912:	4649      	mov	r1, r9
  406914:	2201      	movs	r2, #1
  406916:	4620      	mov	r0, r4
  406918:	f001 f92a 	bl	407b70 <__lshift>
  40691c:	4641      	mov	r1, r8
  40691e:	4681      	mov	r9, r0
  406920:	f001 f978 	bl	407c14 <__mcmp>
  406924:	2800      	cmp	r0, #0
  406926:	f340 8146 	ble.w	406bb6 <_dtoa_r+0xdce>
  40692a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40692e:	f000 8106 	beq.w	406b3e <_dtoa_r+0xd56>
  406932:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  406936:	46b3      	mov	fp, r6
  406938:	f887 a000 	strb.w	sl, [r7]
  40693c:	1c7d      	adds	r5, r7, #1
  40693e:	9e06      	ldr	r6, [sp, #24]
  406940:	e5d2      	b.n	4064e8 <_dtoa_r+0x700>
  406942:	d104      	bne.n	40694e <_dtoa_r+0xb66>
  406944:	f01a 0f01 	tst.w	sl, #1
  406948:	d001      	beq.n	40694e <_dtoa_r+0xb66>
  40694a:	e5bd      	b.n	4064c8 <_dtoa_r+0x6e0>
  40694c:	4615      	mov	r5, r2
  40694e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406952:	2b30      	cmp	r3, #48	; 0x30
  406954:	f105 32ff 	add.w	r2, r5, #4294967295
  406958:	d0f8      	beq.n	40694c <_dtoa_r+0xb64>
  40695a:	e5c5      	b.n	4064e8 <_dtoa_r+0x700>
  40695c:	9904      	ldr	r1, [sp, #16]
  40695e:	2230      	movs	r2, #48	; 0x30
  406960:	700a      	strb	r2, [r1, #0]
  406962:	9a02      	ldr	r2, [sp, #8]
  406964:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406968:	3201      	adds	r2, #1
  40696a:	9202      	str	r2, [sp, #8]
  40696c:	f7ff bbfc 	b.w	406168 <_dtoa_r+0x380>
  406970:	f000 80bb 	beq.w	406aea <_dtoa_r+0xd02>
  406974:	9b02      	ldr	r3, [sp, #8]
  406976:	425d      	negs	r5, r3
  406978:	4b84      	ldr	r3, [pc, #528]	; (406b8c <_dtoa_r+0xda4>)
  40697a:	f005 020f 	and.w	r2, r5, #15
  40697e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406982:	e9d3 2300 	ldrd	r2, r3, [r3]
  406986:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40698a:	f002 f82b 	bl	4089e4 <__aeabi_dmul>
  40698e:	112d      	asrs	r5, r5, #4
  406990:	4607      	mov	r7, r0
  406992:	4688      	mov	r8, r1
  406994:	f000 812c 	beq.w	406bf0 <_dtoa_r+0xe08>
  406998:	4e7d      	ldr	r6, [pc, #500]	; (406b90 <_dtoa_r+0xda8>)
  40699a:	f04f 0a02 	mov.w	sl, #2
  40699e:	07eb      	lsls	r3, r5, #31
  4069a0:	d509      	bpl.n	4069b6 <_dtoa_r+0xbce>
  4069a2:	4638      	mov	r0, r7
  4069a4:	4641      	mov	r1, r8
  4069a6:	e9d6 2300 	ldrd	r2, r3, [r6]
  4069aa:	f002 f81b 	bl	4089e4 <__aeabi_dmul>
  4069ae:	f10a 0a01 	add.w	sl, sl, #1
  4069b2:	4607      	mov	r7, r0
  4069b4:	4688      	mov	r8, r1
  4069b6:	106d      	asrs	r5, r5, #1
  4069b8:	f106 0608 	add.w	r6, r6, #8
  4069bc:	d1ef      	bne.n	40699e <_dtoa_r+0xbb6>
  4069be:	e608      	b.n	4065d2 <_dtoa_r+0x7ea>
  4069c0:	6871      	ldr	r1, [r6, #4]
  4069c2:	4620      	mov	r0, r4
  4069c4:	f000 ff28 	bl	407818 <_Balloc>
  4069c8:	6933      	ldr	r3, [r6, #16]
  4069ca:	3302      	adds	r3, #2
  4069cc:	009a      	lsls	r2, r3, #2
  4069ce:	4605      	mov	r5, r0
  4069d0:	f106 010c 	add.w	r1, r6, #12
  4069d4:	300c      	adds	r0, #12
  4069d6:	f7fc fdbd 	bl	403554 <memcpy>
  4069da:	4629      	mov	r1, r5
  4069dc:	2201      	movs	r2, #1
  4069de:	4620      	mov	r0, r4
  4069e0:	f001 f8c6 	bl	407b70 <__lshift>
  4069e4:	9006      	str	r0, [sp, #24]
  4069e6:	e4b5      	b.n	406354 <_dtoa_r+0x56c>
  4069e8:	2b39      	cmp	r3, #57	; 0x39
  4069ea:	f8cd b018 	str.w	fp, [sp, #24]
  4069ee:	46d0      	mov	r8, sl
  4069f0:	f000 80a5 	beq.w	406b3e <_dtoa_r+0xd56>
  4069f4:	f103 0a01 	add.w	sl, r3, #1
  4069f8:	46b3      	mov	fp, r6
  4069fa:	f887 a000 	strb.w	sl, [r7]
  4069fe:	1c7d      	adds	r5, r7, #1
  406a00:	9e06      	ldr	r6, [sp, #24]
  406a02:	e571      	b.n	4064e8 <_dtoa_r+0x700>
  406a04:	465a      	mov	r2, fp
  406a06:	46d0      	mov	r8, sl
  406a08:	46b3      	mov	fp, r6
  406a0a:	469a      	mov	sl, r3
  406a0c:	4616      	mov	r6, r2
  406a0e:	e54f      	b.n	4064b0 <_dtoa_r+0x6c8>
  406a10:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406a12:	495e      	ldr	r1, [pc, #376]	; (406b8c <_dtoa_r+0xda4>)
  406a14:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  406a18:	462a      	mov	r2, r5
  406a1a:	4633      	mov	r3, r6
  406a1c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  406a20:	f001 ffe0 	bl	4089e4 <__aeabi_dmul>
  406a24:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  406a28:	4638      	mov	r0, r7
  406a2a:	4641      	mov	r1, r8
  406a2c:	f002 fa8a 	bl	408f44 <__aeabi_d2iz>
  406a30:	4605      	mov	r5, r0
  406a32:	f001 ff71 	bl	408918 <__aeabi_i2d>
  406a36:	460b      	mov	r3, r1
  406a38:	4602      	mov	r2, r0
  406a3a:	4641      	mov	r1, r8
  406a3c:	4638      	mov	r0, r7
  406a3e:	f001 fe1d 	bl	40867c <__aeabi_dsub>
  406a42:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406a44:	460f      	mov	r7, r1
  406a46:	9904      	ldr	r1, [sp, #16]
  406a48:	3530      	adds	r5, #48	; 0x30
  406a4a:	2b01      	cmp	r3, #1
  406a4c:	700d      	strb	r5, [r1, #0]
  406a4e:	4606      	mov	r6, r0
  406a50:	f101 0501 	add.w	r5, r1, #1
  406a54:	d026      	beq.n	406aa4 <_dtoa_r+0xcbc>
  406a56:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406a58:	9a04      	ldr	r2, [sp, #16]
  406a5a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 406b98 <_dtoa_r+0xdb0>
  406a5e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  406a62:	4413      	add	r3, r2
  406a64:	f04f 0a00 	mov.w	sl, #0
  406a68:	4699      	mov	r9, r3
  406a6a:	4652      	mov	r2, sl
  406a6c:	465b      	mov	r3, fp
  406a6e:	4630      	mov	r0, r6
  406a70:	4639      	mov	r1, r7
  406a72:	f001 ffb7 	bl	4089e4 <__aeabi_dmul>
  406a76:	460f      	mov	r7, r1
  406a78:	4606      	mov	r6, r0
  406a7a:	f002 fa63 	bl	408f44 <__aeabi_d2iz>
  406a7e:	4680      	mov	r8, r0
  406a80:	f001 ff4a 	bl	408918 <__aeabi_i2d>
  406a84:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406a88:	4602      	mov	r2, r0
  406a8a:	460b      	mov	r3, r1
  406a8c:	4630      	mov	r0, r6
  406a8e:	4639      	mov	r1, r7
  406a90:	f001 fdf4 	bl	40867c <__aeabi_dsub>
  406a94:	f805 8b01 	strb.w	r8, [r5], #1
  406a98:	454d      	cmp	r5, r9
  406a9a:	4606      	mov	r6, r0
  406a9c:	460f      	mov	r7, r1
  406a9e:	d1e4      	bne.n	406a6a <_dtoa_r+0xc82>
  406aa0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406aa4:	4b3b      	ldr	r3, [pc, #236]	; (406b94 <_dtoa_r+0xdac>)
  406aa6:	2200      	movs	r2, #0
  406aa8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  406aac:	f001 fde8 	bl	408680 <__adddf3>
  406ab0:	4632      	mov	r2, r6
  406ab2:	463b      	mov	r3, r7
  406ab4:	f002 fa08 	bl	408ec8 <__aeabi_dcmplt>
  406ab8:	2800      	cmp	r0, #0
  406aba:	d046      	beq.n	406b4a <_dtoa_r+0xd62>
  406abc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406abe:	9302      	str	r3, [sp, #8]
  406ac0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406ac4:	f7ff bb43 	b.w	40614e <_dtoa_r+0x366>
  406ac8:	f04f 0800 	mov.w	r8, #0
  406acc:	4646      	mov	r6, r8
  406ace:	e6a9      	b.n	406824 <_dtoa_r+0xa3c>
  406ad0:	9b08      	ldr	r3, [sp, #32]
  406ad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406ad4:	1a9d      	subs	r5, r3, r2
  406ad6:	2300      	movs	r3, #0
  406ad8:	f7ff bb71 	b.w	4061be <_dtoa_r+0x3d6>
  406adc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  406ade:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406ae0:	9d08      	ldr	r5, [sp, #32]
  406ae2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  406ae6:	f7ff bb6a 	b.w	4061be <_dtoa_r+0x3d6>
  406aea:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  406aee:	f04f 0a02 	mov.w	sl, #2
  406af2:	e56e      	b.n	4065d2 <_dtoa_r+0x7ea>
  406af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406af6:	2b00      	cmp	r3, #0
  406af8:	f43f aeb8 	beq.w	40686c <_dtoa_r+0xa84>
  406afc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406afe:	2b00      	cmp	r3, #0
  406b00:	f77f aede 	ble.w	4068c0 <_dtoa_r+0xad8>
  406b04:	2200      	movs	r2, #0
  406b06:	4b24      	ldr	r3, [pc, #144]	; (406b98 <_dtoa_r+0xdb0>)
  406b08:	4638      	mov	r0, r7
  406b0a:	4641      	mov	r1, r8
  406b0c:	f001 ff6a 	bl	4089e4 <__aeabi_dmul>
  406b10:	4607      	mov	r7, r0
  406b12:	4688      	mov	r8, r1
  406b14:	f10a 0001 	add.w	r0, sl, #1
  406b18:	f001 fefe 	bl	408918 <__aeabi_i2d>
  406b1c:	463a      	mov	r2, r7
  406b1e:	4643      	mov	r3, r8
  406b20:	f001 ff60 	bl	4089e4 <__aeabi_dmul>
  406b24:	2200      	movs	r2, #0
  406b26:	4b17      	ldr	r3, [pc, #92]	; (406b84 <_dtoa_r+0xd9c>)
  406b28:	f001 fdaa 	bl	408680 <__adddf3>
  406b2c:	9a02      	ldr	r2, [sp, #8]
  406b2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406b30:	9312      	str	r3, [sp, #72]	; 0x48
  406b32:	3a01      	subs	r2, #1
  406b34:	4605      	mov	r5, r0
  406b36:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406b3a:	9215      	str	r2, [sp, #84]	; 0x54
  406b3c:	e56a      	b.n	406614 <_dtoa_r+0x82c>
  406b3e:	2239      	movs	r2, #57	; 0x39
  406b40:	46b3      	mov	fp, r6
  406b42:	703a      	strb	r2, [r7, #0]
  406b44:	9e06      	ldr	r6, [sp, #24]
  406b46:	1c7d      	adds	r5, r7, #1
  406b48:	e4c0      	b.n	4064cc <_dtoa_r+0x6e4>
  406b4a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  406b4e:	2000      	movs	r0, #0
  406b50:	4910      	ldr	r1, [pc, #64]	; (406b94 <_dtoa_r+0xdac>)
  406b52:	f001 fd93 	bl	40867c <__aeabi_dsub>
  406b56:	4632      	mov	r2, r6
  406b58:	463b      	mov	r3, r7
  406b5a:	f002 f9d3 	bl	408f04 <__aeabi_dcmpgt>
  406b5e:	b908      	cbnz	r0, 406b64 <_dtoa_r+0xd7c>
  406b60:	e6ae      	b.n	4068c0 <_dtoa_r+0xad8>
  406b62:	4615      	mov	r5, r2
  406b64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406b68:	2b30      	cmp	r3, #48	; 0x30
  406b6a:	f105 32ff 	add.w	r2, r5, #4294967295
  406b6e:	d0f8      	beq.n	406b62 <_dtoa_r+0xd7a>
  406b70:	e5d7      	b.n	406722 <_dtoa_r+0x93a>
  406b72:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406b76:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406b78:	9302      	str	r3, [sp, #8]
  406b7a:	f7ff bae8 	b.w	40614e <_dtoa_r+0x366>
  406b7e:	970c      	str	r7, [sp, #48]	; 0x30
  406b80:	f7ff bba5 	b.w	4062ce <_dtoa_r+0x4e6>
  406b84:	401c0000 	.word	0x401c0000
  406b88:	40140000 	.word	0x40140000
  406b8c:	00409528 	.word	0x00409528
  406b90:	00409500 	.word	0x00409500
  406b94:	3fe00000 	.word	0x3fe00000
  406b98:	40240000 	.word	0x40240000
  406b9c:	2b39      	cmp	r3, #57	; 0x39
  406b9e:	f8cd b018 	str.w	fp, [sp, #24]
  406ba2:	46d0      	mov	r8, sl
  406ba4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406ba8:	469a      	mov	sl, r3
  406baa:	d0c8      	beq.n	406b3e <_dtoa_r+0xd56>
  406bac:	f1bb 0f00 	cmp.w	fp, #0
  406bb0:	f73f aebf 	bgt.w	406932 <_dtoa_r+0xb4a>
  406bb4:	e6bf      	b.n	406936 <_dtoa_r+0xb4e>
  406bb6:	f47f aebe 	bne.w	406936 <_dtoa_r+0xb4e>
  406bba:	f01a 0f01 	tst.w	sl, #1
  406bbe:	f43f aeba 	beq.w	406936 <_dtoa_r+0xb4e>
  406bc2:	e6b2      	b.n	40692a <_dtoa_r+0xb42>
  406bc4:	f04f 0800 	mov.w	r8, #0
  406bc8:	4646      	mov	r6, r8
  406bca:	e5e9      	b.n	4067a0 <_dtoa_r+0x9b8>
  406bcc:	4631      	mov	r1, r6
  406bce:	2300      	movs	r3, #0
  406bd0:	220a      	movs	r2, #10
  406bd2:	4620      	mov	r0, r4
  406bd4:	f000 fe50 	bl	407878 <__multadd>
  406bd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406bda:	2b00      	cmp	r3, #0
  406bdc:	4606      	mov	r6, r0
  406bde:	dd0a      	ble.n	406bf6 <_dtoa_r+0xe0e>
  406be0:	930a      	str	r3, [sp, #40]	; 0x28
  406be2:	f7ff bbaa 	b.w	40633a <_dtoa_r+0x552>
  406be6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406be8:	2b02      	cmp	r3, #2
  406bea:	dc23      	bgt.n	406c34 <_dtoa_r+0xe4c>
  406bec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406bee:	e43b      	b.n	406468 <_dtoa_r+0x680>
  406bf0:	f04f 0a02 	mov.w	sl, #2
  406bf4:	e4ed      	b.n	4065d2 <_dtoa_r+0x7ea>
  406bf6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406bf8:	2b02      	cmp	r3, #2
  406bfa:	dc1b      	bgt.n	406c34 <_dtoa_r+0xe4c>
  406bfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406bfe:	e7ef      	b.n	406be0 <_dtoa_r+0xdf8>
  406c00:	2500      	movs	r5, #0
  406c02:	6465      	str	r5, [r4, #68]	; 0x44
  406c04:	4629      	mov	r1, r5
  406c06:	4620      	mov	r0, r4
  406c08:	f000 fe06 	bl	407818 <_Balloc>
  406c0c:	f04f 33ff 	mov.w	r3, #4294967295
  406c10:	930a      	str	r3, [sp, #40]	; 0x28
  406c12:	930f      	str	r3, [sp, #60]	; 0x3c
  406c14:	2301      	movs	r3, #1
  406c16:	9004      	str	r0, [sp, #16]
  406c18:	9525      	str	r5, [sp, #148]	; 0x94
  406c1a:	6420      	str	r0, [r4, #64]	; 0x40
  406c1c:	930b      	str	r3, [sp, #44]	; 0x2c
  406c1e:	f7ff b9dd 	b.w	405fdc <_dtoa_r+0x1f4>
  406c22:	2501      	movs	r5, #1
  406c24:	f7ff b9a5 	b.w	405f72 <_dtoa_r+0x18a>
  406c28:	f43f ab69 	beq.w	4062fe <_dtoa_r+0x516>
  406c2c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406c30:	f7ff bbf9 	b.w	406426 <_dtoa_r+0x63e>
  406c34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406c36:	930a      	str	r3, [sp, #40]	; 0x28
  406c38:	e5e5      	b.n	406806 <_dtoa_r+0xa1e>
  406c3a:	bf00      	nop

00406c3c <__sflush_r>:
  406c3c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  406c40:	b29a      	uxth	r2, r3
  406c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406c46:	460d      	mov	r5, r1
  406c48:	0711      	lsls	r1, r2, #28
  406c4a:	4680      	mov	r8, r0
  406c4c:	d43a      	bmi.n	406cc4 <__sflush_r+0x88>
  406c4e:	686a      	ldr	r2, [r5, #4]
  406c50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406c54:	2a00      	cmp	r2, #0
  406c56:	81ab      	strh	r3, [r5, #12]
  406c58:	dd6f      	ble.n	406d3a <__sflush_r+0xfe>
  406c5a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406c5c:	2c00      	cmp	r4, #0
  406c5e:	d049      	beq.n	406cf4 <__sflush_r+0xb8>
  406c60:	2200      	movs	r2, #0
  406c62:	b29b      	uxth	r3, r3
  406c64:	f8d8 6000 	ldr.w	r6, [r8]
  406c68:	f8c8 2000 	str.w	r2, [r8]
  406c6c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  406c70:	d067      	beq.n	406d42 <__sflush_r+0x106>
  406c72:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  406c74:	075f      	lsls	r7, r3, #29
  406c76:	d505      	bpl.n	406c84 <__sflush_r+0x48>
  406c78:	6869      	ldr	r1, [r5, #4]
  406c7a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  406c7c:	1a52      	subs	r2, r2, r1
  406c7e:	b10b      	cbz	r3, 406c84 <__sflush_r+0x48>
  406c80:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  406c82:	1ad2      	subs	r2, r2, r3
  406c84:	2300      	movs	r3, #0
  406c86:	69e9      	ldr	r1, [r5, #28]
  406c88:	4640      	mov	r0, r8
  406c8a:	47a0      	blx	r4
  406c8c:	1c44      	adds	r4, r0, #1
  406c8e:	d03c      	beq.n	406d0a <__sflush_r+0xce>
  406c90:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  406c94:	692a      	ldr	r2, [r5, #16]
  406c96:	602a      	str	r2, [r5, #0]
  406c98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406c9c:	2200      	movs	r2, #0
  406c9e:	81ab      	strh	r3, [r5, #12]
  406ca0:	04db      	lsls	r3, r3, #19
  406ca2:	606a      	str	r2, [r5, #4]
  406ca4:	d447      	bmi.n	406d36 <__sflush_r+0xfa>
  406ca6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406ca8:	f8c8 6000 	str.w	r6, [r8]
  406cac:	b311      	cbz	r1, 406cf4 <__sflush_r+0xb8>
  406cae:	f105 0340 	add.w	r3, r5, #64	; 0x40
  406cb2:	4299      	cmp	r1, r3
  406cb4:	d002      	beq.n	406cbc <__sflush_r+0x80>
  406cb6:	4640      	mov	r0, r8
  406cb8:	f000 f9ca 	bl	407050 <_free_r>
  406cbc:	2000      	movs	r0, #0
  406cbe:	6328      	str	r0, [r5, #48]	; 0x30
  406cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406cc4:	692e      	ldr	r6, [r5, #16]
  406cc6:	b1ae      	cbz	r6, 406cf4 <__sflush_r+0xb8>
  406cc8:	682c      	ldr	r4, [r5, #0]
  406cca:	602e      	str	r6, [r5, #0]
  406ccc:	0791      	lsls	r1, r2, #30
  406cce:	bf0c      	ite	eq
  406cd0:	696b      	ldreq	r3, [r5, #20]
  406cd2:	2300      	movne	r3, #0
  406cd4:	1ba4      	subs	r4, r4, r6
  406cd6:	60ab      	str	r3, [r5, #8]
  406cd8:	e00a      	b.n	406cf0 <__sflush_r+0xb4>
  406cda:	4623      	mov	r3, r4
  406cdc:	4632      	mov	r2, r6
  406cde:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  406ce0:	69e9      	ldr	r1, [r5, #28]
  406ce2:	4640      	mov	r0, r8
  406ce4:	47b8      	blx	r7
  406ce6:	2800      	cmp	r0, #0
  406ce8:	eba4 0400 	sub.w	r4, r4, r0
  406cec:	4406      	add	r6, r0
  406cee:	dd04      	ble.n	406cfa <__sflush_r+0xbe>
  406cf0:	2c00      	cmp	r4, #0
  406cf2:	dcf2      	bgt.n	406cda <__sflush_r+0x9e>
  406cf4:	2000      	movs	r0, #0
  406cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406cfa:	89ab      	ldrh	r3, [r5, #12]
  406cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406d00:	81ab      	strh	r3, [r5, #12]
  406d02:	f04f 30ff 	mov.w	r0, #4294967295
  406d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406d0a:	f8d8 4000 	ldr.w	r4, [r8]
  406d0e:	2c1d      	cmp	r4, #29
  406d10:	d8f3      	bhi.n	406cfa <__sflush_r+0xbe>
  406d12:	4b19      	ldr	r3, [pc, #100]	; (406d78 <__sflush_r+0x13c>)
  406d14:	40e3      	lsrs	r3, r4
  406d16:	43db      	mvns	r3, r3
  406d18:	f013 0301 	ands.w	r3, r3, #1
  406d1c:	d1ed      	bne.n	406cfa <__sflush_r+0xbe>
  406d1e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  406d22:	606b      	str	r3, [r5, #4]
  406d24:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  406d28:	6929      	ldr	r1, [r5, #16]
  406d2a:	81ab      	strh	r3, [r5, #12]
  406d2c:	04da      	lsls	r2, r3, #19
  406d2e:	6029      	str	r1, [r5, #0]
  406d30:	d5b9      	bpl.n	406ca6 <__sflush_r+0x6a>
  406d32:	2c00      	cmp	r4, #0
  406d34:	d1b7      	bne.n	406ca6 <__sflush_r+0x6a>
  406d36:	6528      	str	r0, [r5, #80]	; 0x50
  406d38:	e7b5      	b.n	406ca6 <__sflush_r+0x6a>
  406d3a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406d3c:	2a00      	cmp	r2, #0
  406d3e:	dc8c      	bgt.n	406c5a <__sflush_r+0x1e>
  406d40:	e7d8      	b.n	406cf4 <__sflush_r+0xb8>
  406d42:	2301      	movs	r3, #1
  406d44:	69e9      	ldr	r1, [r5, #28]
  406d46:	4640      	mov	r0, r8
  406d48:	47a0      	blx	r4
  406d4a:	1c43      	adds	r3, r0, #1
  406d4c:	4602      	mov	r2, r0
  406d4e:	d002      	beq.n	406d56 <__sflush_r+0x11a>
  406d50:	89ab      	ldrh	r3, [r5, #12]
  406d52:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406d54:	e78e      	b.n	406c74 <__sflush_r+0x38>
  406d56:	f8d8 3000 	ldr.w	r3, [r8]
  406d5a:	2b00      	cmp	r3, #0
  406d5c:	d0f8      	beq.n	406d50 <__sflush_r+0x114>
  406d5e:	2b1d      	cmp	r3, #29
  406d60:	d001      	beq.n	406d66 <__sflush_r+0x12a>
  406d62:	2b16      	cmp	r3, #22
  406d64:	d102      	bne.n	406d6c <__sflush_r+0x130>
  406d66:	f8c8 6000 	str.w	r6, [r8]
  406d6a:	e7c3      	b.n	406cf4 <__sflush_r+0xb8>
  406d6c:	89ab      	ldrh	r3, [r5, #12]
  406d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406d72:	81ab      	strh	r3, [r5, #12]
  406d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406d78:	20400001 	.word	0x20400001

00406d7c <_fflush_r>:
  406d7c:	b510      	push	{r4, lr}
  406d7e:	4604      	mov	r4, r0
  406d80:	b082      	sub	sp, #8
  406d82:	b108      	cbz	r0, 406d88 <_fflush_r+0xc>
  406d84:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406d86:	b153      	cbz	r3, 406d9e <_fflush_r+0x22>
  406d88:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  406d8c:	b908      	cbnz	r0, 406d92 <_fflush_r+0x16>
  406d8e:	b002      	add	sp, #8
  406d90:	bd10      	pop	{r4, pc}
  406d92:	4620      	mov	r0, r4
  406d94:	b002      	add	sp, #8
  406d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406d9a:	f7ff bf4f 	b.w	406c3c <__sflush_r>
  406d9e:	9101      	str	r1, [sp, #4]
  406da0:	f000 f880 	bl	406ea4 <__sinit>
  406da4:	9901      	ldr	r1, [sp, #4]
  406da6:	e7ef      	b.n	406d88 <_fflush_r+0xc>

00406da8 <_cleanup_r>:
  406da8:	4901      	ldr	r1, [pc, #4]	; (406db0 <_cleanup_r+0x8>)
  406daa:	f000 bbaf 	b.w	40750c <_fwalk_reent>
  406dae:	bf00      	nop
  406db0:	00408551 	.word	0x00408551

00406db4 <__sinit.part.1>:
  406db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406db8:	4b35      	ldr	r3, [pc, #212]	; (406e90 <__sinit.part.1+0xdc>)
  406dba:	6845      	ldr	r5, [r0, #4]
  406dbc:	63c3      	str	r3, [r0, #60]	; 0x3c
  406dbe:	2400      	movs	r4, #0
  406dc0:	4607      	mov	r7, r0
  406dc2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  406dc6:	2304      	movs	r3, #4
  406dc8:	2103      	movs	r1, #3
  406dca:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  406dce:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  406dd2:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  406dd6:	b083      	sub	sp, #12
  406dd8:	602c      	str	r4, [r5, #0]
  406dda:	606c      	str	r4, [r5, #4]
  406ddc:	60ac      	str	r4, [r5, #8]
  406dde:	666c      	str	r4, [r5, #100]	; 0x64
  406de0:	81ec      	strh	r4, [r5, #14]
  406de2:	612c      	str	r4, [r5, #16]
  406de4:	616c      	str	r4, [r5, #20]
  406de6:	61ac      	str	r4, [r5, #24]
  406de8:	81ab      	strh	r3, [r5, #12]
  406dea:	4621      	mov	r1, r4
  406dec:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  406df0:	2208      	movs	r2, #8
  406df2:	f7fc fc49 	bl	403688 <memset>
  406df6:	68be      	ldr	r6, [r7, #8]
  406df8:	f8df b098 	ldr.w	fp, [pc, #152]	; 406e94 <__sinit.part.1+0xe0>
  406dfc:	f8df a098 	ldr.w	sl, [pc, #152]	; 406e98 <__sinit.part.1+0xe4>
  406e00:	f8df 9098 	ldr.w	r9, [pc, #152]	; 406e9c <__sinit.part.1+0xe8>
  406e04:	f8df 8098 	ldr.w	r8, [pc, #152]	; 406ea0 <__sinit.part.1+0xec>
  406e08:	f8c5 b020 	str.w	fp, [r5, #32]
  406e0c:	2301      	movs	r3, #1
  406e0e:	2209      	movs	r2, #9
  406e10:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  406e14:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  406e18:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  406e1c:	61ed      	str	r5, [r5, #28]
  406e1e:	4621      	mov	r1, r4
  406e20:	81f3      	strh	r3, [r6, #14]
  406e22:	81b2      	strh	r2, [r6, #12]
  406e24:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  406e28:	6034      	str	r4, [r6, #0]
  406e2a:	6074      	str	r4, [r6, #4]
  406e2c:	60b4      	str	r4, [r6, #8]
  406e2e:	6674      	str	r4, [r6, #100]	; 0x64
  406e30:	6134      	str	r4, [r6, #16]
  406e32:	6174      	str	r4, [r6, #20]
  406e34:	61b4      	str	r4, [r6, #24]
  406e36:	2208      	movs	r2, #8
  406e38:	9301      	str	r3, [sp, #4]
  406e3a:	f7fc fc25 	bl	403688 <memset>
  406e3e:	68fd      	ldr	r5, [r7, #12]
  406e40:	61f6      	str	r6, [r6, #28]
  406e42:	2012      	movs	r0, #18
  406e44:	2202      	movs	r2, #2
  406e46:	f8c6 b020 	str.w	fp, [r6, #32]
  406e4a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  406e4e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  406e52:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  406e56:	4621      	mov	r1, r4
  406e58:	81a8      	strh	r0, [r5, #12]
  406e5a:	81ea      	strh	r2, [r5, #14]
  406e5c:	602c      	str	r4, [r5, #0]
  406e5e:	606c      	str	r4, [r5, #4]
  406e60:	60ac      	str	r4, [r5, #8]
  406e62:	666c      	str	r4, [r5, #100]	; 0x64
  406e64:	612c      	str	r4, [r5, #16]
  406e66:	616c      	str	r4, [r5, #20]
  406e68:	61ac      	str	r4, [r5, #24]
  406e6a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  406e6e:	2208      	movs	r2, #8
  406e70:	f7fc fc0a 	bl	403688 <memset>
  406e74:	9b01      	ldr	r3, [sp, #4]
  406e76:	61ed      	str	r5, [r5, #28]
  406e78:	f8c5 b020 	str.w	fp, [r5, #32]
  406e7c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  406e80:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  406e84:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  406e88:	63bb      	str	r3, [r7, #56]	; 0x38
  406e8a:	b003      	add	sp, #12
  406e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e90:	00406da9 	.word	0x00406da9
  406e94:	00408159 	.word	0x00408159
  406e98:	0040817d 	.word	0x0040817d
  406e9c:	004081b9 	.word	0x004081b9
  406ea0:	004081d9 	.word	0x004081d9

00406ea4 <__sinit>:
  406ea4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406ea6:	b103      	cbz	r3, 406eaa <__sinit+0x6>
  406ea8:	4770      	bx	lr
  406eaa:	f7ff bf83 	b.w	406db4 <__sinit.part.1>
  406eae:	bf00      	nop

00406eb0 <__sfp_lock_acquire>:
  406eb0:	4770      	bx	lr
  406eb2:	bf00      	nop

00406eb4 <__sfp_lock_release>:
  406eb4:	4770      	bx	lr
  406eb6:	bf00      	nop

00406eb8 <__libc_fini_array>:
  406eb8:	b538      	push	{r3, r4, r5, lr}
  406eba:	4c0a      	ldr	r4, [pc, #40]	; (406ee4 <__libc_fini_array+0x2c>)
  406ebc:	4d0a      	ldr	r5, [pc, #40]	; (406ee8 <__libc_fini_array+0x30>)
  406ebe:	1b64      	subs	r4, r4, r5
  406ec0:	10a4      	asrs	r4, r4, #2
  406ec2:	d00a      	beq.n	406eda <__libc_fini_array+0x22>
  406ec4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406ec8:	3b01      	subs	r3, #1
  406eca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406ece:	3c01      	subs	r4, #1
  406ed0:	f855 3904 	ldr.w	r3, [r5], #-4
  406ed4:	4798      	blx	r3
  406ed6:	2c00      	cmp	r4, #0
  406ed8:	d1f9      	bne.n	406ece <__libc_fini_array+0x16>
  406eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406ede:	f002 bc19 	b.w	409714 <_fini>
  406ee2:	bf00      	nop
  406ee4:	00409724 	.word	0x00409724
  406ee8:	00409720 	.word	0x00409720

00406eec <__fputwc>:
  406eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406ef0:	b082      	sub	sp, #8
  406ef2:	4680      	mov	r8, r0
  406ef4:	4689      	mov	r9, r1
  406ef6:	4614      	mov	r4, r2
  406ef8:	f000 fb32 	bl	407560 <__locale_mb_cur_max>
  406efc:	2801      	cmp	r0, #1
  406efe:	d036      	beq.n	406f6e <__fputwc+0x82>
  406f00:	464a      	mov	r2, r9
  406f02:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  406f06:	a901      	add	r1, sp, #4
  406f08:	4640      	mov	r0, r8
  406f0a:	f001 fa3f 	bl	40838c <_wcrtomb_r>
  406f0e:	1c42      	adds	r2, r0, #1
  406f10:	4606      	mov	r6, r0
  406f12:	d025      	beq.n	406f60 <__fputwc+0x74>
  406f14:	b3a8      	cbz	r0, 406f82 <__fputwc+0x96>
  406f16:	f89d e004 	ldrb.w	lr, [sp, #4]
  406f1a:	2500      	movs	r5, #0
  406f1c:	f10d 0a04 	add.w	sl, sp, #4
  406f20:	e009      	b.n	406f36 <__fputwc+0x4a>
  406f22:	6823      	ldr	r3, [r4, #0]
  406f24:	1c5a      	adds	r2, r3, #1
  406f26:	6022      	str	r2, [r4, #0]
  406f28:	f883 e000 	strb.w	lr, [r3]
  406f2c:	3501      	adds	r5, #1
  406f2e:	42b5      	cmp	r5, r6
  406f30:	d227      	bcs.n	406f82 <__fputwc+0x96>
  406f32:	f815 e00a 	ldrb.w	lr, [r5, sl]
  406f36:	68a3      	ldr	r3, [r4, #8]
  406f38:	3b01      	subs	r3, #1
  406f3a:	2b00      	cmp	r3, #0
  406f3c:	60a3      	str	r3, [r4, #8]
  406f3e:	daf0      	bge.n	406f22 <__fputwc+0x36>
  406f40:	69a7      	ldr	r7, [r4, #24]
  406f42:	42bb      	cmp	r3, r7
  406f44:	4671      	mov	r1, lr
  406f46:	4622      	mov	r2, r4
  406f48:	4640      	mov	r0, r8
  406f4a:	db02      	blt.n	406f52 <__fputwc+0x66>
  406f4c:	f1be 0f0a 	cmp.w	lr, #10
  406f50:	d1e7      	bne.n	406f22 <__fputwc+0x36>
  406f52:	f001 f9c3 	bl	4082dc <__swbuf_r>
  406f56:	1c43      	adds	r3, r0, #1
  406f58:	d1e8      	bne.n	406f2c <__fputwc+0x40>
  406f5a:	b002      	add	sp, #8
  406f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406f60:	89a3      	ldrh	r3, [r4, #12]
  406f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406f66:	81a3      	strh	r3, [r4, #12]
  406f68:	b002      	add	sp, #8
  406f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406f6e:	f109 33ff 	add.w	r3, r9, #4294967295
  406f72:	2bfe      	cmp	r3, #254	; 0xfe
  406f74:	d8c4      	bhi.n	406f00 <__fputwc+0x14>
  406f76:	fa5f fe89 	uxtb.w	lr, r9
  406f7a:	4606      	mov	r6, r0
  406f7c:	f88d e004 	strb.w	lr, [sp, #4]
  406f80:	e7cb      	b.n	406f1a <__fputwc+0x2e>
  406f82:	4648      	mov	r0, r9
  406f84:	b002      	add	sp, #8
  406f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406f8a:	bf00      	nop

00406f8c <_fputwc_r>:
  406f8c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  406f90:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  406f94:	d10a      	bne.n	406fac <_fputwc_r+0x20>
  406f96:	b410      	push	{r4}
  406f98:	6e54      	ldr	r4, [r2, #100]	; 0x64
  406f9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  406f9e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  406fa2:	6654      	str	r4, [r2, #100]	; 0x64
  406fa4:	8193      	strh	r3, [r2, #12]
  406fa6:	bc10      	pop	{r4}
  406fa8:	f7ff bfa0 	b.w	406eec <__fputwc>
  406fac:	f7ff bf9e 	b.w	406eec <__fputwc>

00406fb0 <_malloc_trim_r>:
  406fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406fb2:	4f24      	ldr	r7, [pc, #144]	; (407044 <_malloc_trim_r+0x94>)
  406fb4:	460c      	mov	r4, r1
  406fb6:	4606      	mov	r6, r0
  406fb8:	f7fc fbb4 	bl	403724 <__malloc_lock>
  406fbc:	68bb      	ldr	r3, [r7, #8]
  406fbe:	685d      	ldr	r5, [r3, #4]
  406fc0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406fc4:	310f      	adds	r1, #15
  406fc6:	f025 0503 	bic.w	r5, r5, #3
  406fca:	4429      	add	r1, r5
  406fcc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406fd0:	f021 010f 	bic.w	r1, r1, #15
  406fd4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406fd8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406fdc:	db07      	blt.n	406fee <_malloc_trim_r+0x3e>
  406fde:	2100      	movs	r1, #0
  406fe0:	4630      	mov	r0, r6
  406fe2:	f7fc fba3 	bl	40372c <_sbrk_r>
  406fe6:	68bb      	ldr	r3, [r7, #8]
  406fe8:	442b      	add	r3, r5
  406fea:	4298      	cmp	r0, r3
  406fec:	d004      	beq.n	406ff8 <_malloc_trim_r+0x48>
  406fee:	4630      	mov	r0, r6
  406ff0:	f7fc fb9a 	bl	403728 <__malloc_unlock>
  406ff4:	2000      	movs	r0, #0
  406ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406ff8:	4261      	negs	r1, r4
  406ffa:	4630      	mov	r0, r6
  406ffc:	f7fc fb96 	bl	40372c <_sbrk_r>
  407000:	3001      	adds	r0, #1
  407002:	d00d      	beq.n	407020 <_malloc_trim_r+0x70>
  407004:	4b10      	ldr	r3, [pc, #64]	; (407048 <_malloc_trim_r+0x98>)
  407006:	68ba      	ldr	r2, [r7, #8]
  407008:	6819      	ldr	r1, [r3, #0]
  40700a:	1b2d      	subs	r5, r5, r4
  40700c:	f045 0501 	orr.w	r5, r5, #1
  407010:	4630      	mov	r0, r6
  407012:	1b09      	subs	r1, r1, r4
  407014:	6055      	str	r5, [r2, #4]
  407016:	6019      	str	r1, [r3, #0]
  407018:	f7fc fb86 	bl	403728 <__malloc_unlock>
  40701c:	2001      	movs	r0, #1
  40701e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407020:	2100      	movs	r1, #0
  407022:	4630      	mov	r0, r6
  407024:	f7fc fb82 	bl	40372c <_sbrk_r>
  407028:	68ba      	ldr	r2, [r7, #8]
  40702a:	1a83      	subs	r3, r0, r2
  40702c:	2b0f      	cmp	r3, #15
  40702e:	ddde      	ble.n	406fee <_malloc_trim_r+0x3e>
  407030:	4c06      	ldr	r4, [pc, #24]	; (40704c <_malloc_trim_r+0x9c>)
  407032:	4905      	ldr	r1, [pc, #20]	; (407048 <_malloc_trim_r+0x98>)
  407034:	6824      	ldr	r4, [r4, #0]
  407036:	f043 0301 	orr.w	r3, r3, #1
  40703a:	1b00      	subs	r0, r0, r4
  40703c:	6053      	str	r3, [r2, #4]
  40703e:	6008      	str	r0, [r1, #0]
  407040:	e7d5      	b.n	406fee <_malloc_trim_r+0x3e>
  407042:	bf00      	nop
  407044:	20400438 	.word	0x20400438
  407048:	20400c88 	.word	0x20400c88
  40704c:	20400840 	.word	0x20400840

00407050 <_free_r>:
  407050:	2900      	cmp	r1, #0
  407052:	d044      	beq.n	4070de <_free_r+0x8e>
  407054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407058:	460d      	mov	r5, r1
  40705a:	4680      	mov	r8, r0
  40705c:	f7fc fb62 	bl	403724 <__malloc_lock>
  407060:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407064:	4969      	ldr	r1, [pc, #420]	; (40720c <_free_r+0x1bc>)
  407066:	f027 0301 	bic.w	r3, r7, #1
  40706a:	f1a5 0408 	sub.w	r4, r5, #8
  40706e:	18e2      	adds	r2, r4, r3
  407070:	688e      	ldr	r6, [r1, #8]
  407072:	6850      	ldr	r0, [r2, #4]
  407074:	42b2      	cmp	r2, r6
  407076:	f020 0003 	bic.w	r0, r0, #3
  40707a:	d05e      	beq.n	40713a <_free_r+0xea>
  40707c:	07fe      	lsls	r6, r7, #31
  40707e:	6050      	str	r0, [r2, #4]
  407080:	d40b      	bmi.n	40709a <_free_r+0x4a>
  407082:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407086:	1be4      	subs	r4, r4, r7
  407088:	f101 0e08 	add.w	lr, r1, #8
  40708c:	68a5      	ldr	r5, [r4, #8]
  40708e:	4575      	cmp	r5, lr
  407090:	443b      	add	r3, r7
  407092:	d06d      	beq.n	407170 <_free_r+0x120>
  407094:	68e7      	ldr	r7, [r4, #12]
  407096:	60ef      	str	r7, [r5, #12]
  407098:	60bd      	str	r5, [r7, #8]
  40709a:	1815      	adds	r5, r2, r0
  40709c:	686d      	ldr	r5, [r5, #4]
  40709e:	07ed      	lsls	r5, r5, #31
  4070a0:	d53e      	bpl.n	407120 <_free_r+0xd0>
  4070a2:	f043 0201 	orr.w	r2, r3, #1
  4070a6:	6062      	str	r2, [r4, #4]
  4070a8:	50e3      	str	r3, [r4, r3]
  4070aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4070ae:	d217      	bcs.n	4070e0 <_free_r+0x90>
  4070b0:	08db      	lsrs	r3, r3, #3
  4070b2:	1c58      	adds	r0, r3, #1
  4070b4:	109a      	asrs	r2, r3, #2
  4070b6:	684d      	ldr	r5, [r1, #4]
  4070b8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4070bc:	60a7      	str	r7, [r4, #8]
  4070be:	2301      	movs	r3, #1
  4070c0:	4093      	lsls	r3, r2
  4070c2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4070c6:	432b      	orrs	r3, r5
  4070c8:	3a08      	subs	r2, #8
  4070ca:	60e2      	str	r2, [r4, #12]
  4070cc:	604b      	str	r3, [r1, #4]
  4070ce:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4070d2:	60fc      	str	r4, [r7, #12]
  4070d4:	4640      	mov	r0, r8
  4070d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4070da:	f7fc bb25 	b.w	403728 <__malloc_unlock>
  4070de:	4770      	bx	lr
  4070e0:	0a5a      	lsrs	r2, r3, #9
  4070e2:	2a04      	cmp	r2, #4
  4070e4:	d852      	bhi.n	40718c <_free_r+0x13c>
  4070e6:	099a      	lsrs	r2, r3, #6
  4070e8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4070ec:	00ff      	lsls	r7, r7, #3
  4070ee:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4070f2:	19c8      	adds	r0, r1, r7
  4070f4:	59ca      	ldr	r2, [r1, r7]
  4070f6:	3808      	subs	r0, #8
  4070f8:	4290      	cmp	r0, r2
  4070fa:	d04f      	beq.n	40719c <_free_r+0x14c>
  4070fc:	6851      	ldr	r1, [r2, #4]
  4070fe:	f021 0103 	bic.w	r1, r1, #3
  407102:	428b      	cmp	r3, r1
  407104:	d232      	bcs.n	40716c <_free_r+0x11c>
  407106:	6892      	ldr	r2, [r2, #8]
  407108:	4290      	cmp	r0, r2
  40710a:	d1f7      	bne.n	4070fc <_free_r+0xac>
  40710c:	68c3      	ldr	r3, [r0, #12]
  40710e:	60a0      	str	r0, [r4, #8]
  407110:	60e3      	str	r3, [r4, #12]
  407112:	609c      	str	r4, [r3, #8]
  407114:	60c4      	str	r4, [r0, #12]
  407116:	4640      	mov	r0, r8
  407118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40711c:	f7fc bb04 	b.w	403728 <__malloc_unlock>
  407120:	6895      	ldr	r5, [r2, #8]
  407122:	4f3b      	ldr	r7, [pc, #236]	; (407210 <_free_r+0x1c0>)
  407124:	42bd      	cmp	r5, r7
  407126:	4403      	add	r3, r0
  407128:	d040      	beq.n	4071ac <_free_r+0x15c>
  40712a:	68d0      	ldr	r0, [r2, #12]
  40712c:	60e8      	str	r0, [r5, #12]
  40712e:	f043 0201 	orr.w	r2, r3, #1
  407132:	6085      	str	r5, [r0, #8]
  407134:	6062      	str	r2, [r4, #4]
  407136:	50e3      	str	r3, [r4, r3]
  407138:	e7b7      	b.n	4070aa <_free_r+0x5a>
  40713a:	07ff      	lsls	r7, r7, #31
  40713c:	4403      	add	r3, r0
  40713e:	d407      	bmi.n	407150 <_free_r+0x100>
  407140:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407144:	1aa4      	subs	r4, r4, r2
  407146:	4413      	add	r3, r2
  407148:	68a0      	ldr	r0, [r4, #8]
  40714a:	68e2      	ldr	r2, [r4, #12]
  40714c:	60c2      	str	r2, [r0, #12]
  40714e:	6090      	str	r0, [r2, #8]
  407150:	4a30      	ldr	r2, [pc, #192]	; (407214 <_free_r+0x1c4>)
  407152:	6812      	ldr	r2, [r2, #0]
  407154:	f043 0001 	orr.w	r0, r3, #1
  407158:	4293      	cmp	r3, r2
  40715a:	6060      	str	r0, [r4, #4]
  40715c:	608c      	str	r4, [r1, #8]
  40715e:	d3b9      	bcc.n	4070d4 <_free_r+0x84>
  407160:	4b2d      	ldr	r3, [pc, #180]	; (407218 <_free_r+0x1c8>)
  407162:	4640      	mov	r0, r8
  407164:	6819      	ldr	r1, [r3, #0]
  407166:	f7ff ff23 	bl	406fb0 <_malloc_trim_r>
  40716a:	e7b3      	b.n	4070d4 <_free_r+0x84>
  40716c:	4610      	mov	r0, r2
  40716e:	e7cd      	b.n	40710c <_free_r+0xbc>
  407170:	1811      	adds	r1, r2, r0
  407172:	6849      	ldr	r1, [r1, #4]
  407174:	07c9      	lsls	r1, r1, #31
  407176:	d444      	bmi.n	407202 <_free_r+0x1b2>
  407178:	6891      	ldr	r1, [r2, #8]
  40717a:	68d2      	ldr	r2, [r2, #12]
  40717c:	60ca      	str	r2, [r1, #12]
  40717e:	4403      	add	r3, r0
  407180:	f043 0001 	orr.w	r0, r3, #1
  407184:	6091      	str	r1, [r2, #8]
  407186:	6060      	str	r0, [r4, #4]
  407188:	50e3      	str	r3, [r4, r3]
  40718a:	e7a3      	b.n	4070d4 <_free_r+0x84>
  40718c:	2a14      	cmp	r2, #20
  40718e:	d816      	bhi.n	4071be <_free_r+0x16e>
  407190:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407194:	00ff      	lsls	r7, r7, #3
  407196:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40719a:	e7aa      	b.n	4070f2 <_free_r+0xa2>
  40719c:	10aa      	asrs	r2, r5, #2
  40719e:	2301      	movs	r3, #1
  4071a0:	684d      	ldr	r5, [r1, #4]
  4071a2:	4093      	lsls	r3, r2
  4071a4:	432b      	orrs	r3, r5
  4071a6:	604b      	str	r3, [r1, #4]
  4071a8:	4603      	mov	r3, r0
  4071aa:	e7b0      	b.n	40710e <_free_r+0xbe>
  4071ac:	f043 0201 	orr.w	r2, r3, #1
  4071b0:	614c      	str	r4, [r1, #20]
  4071b2:	610c      	str	r4, [r1, #16]
  4071b4:	60e5      	str	r5, [r4, #12]
  4071b6:	60a5      	str	r5, [r4, #8]
  4071b8:	6062      	str	r2, [r4, #4]
  4071ba:	50e3      	str	r3, [r4, r3]
  4071bc:	e78a      	b.n	4070d4 <_free_r+0x84>
  4071be:	2a54      	cmp	r2, #84	; 0x54
  4071c0:	d806      	bhi.n	4071d0 <_free_r+0x180>
  4071c2:	0b1a      	lsrs	r2, r3, #12
  4071c4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4071c8:	00ff      	lsls	r7, r7, #3
  4071ca:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4071ce:	e790      	b.n	4070f2 <_free_r+0xa2>
  4071d0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4071d4:	d806      	bhi.n	4071e4 <_free_r+0x194>
  4071d6:	0bda      	lsrs	r2, r3, #15
  4071d8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4071dc:	00ff      	lsls	r7, r7, #3
  4071de:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4071e2:	e786      	b.n	4070f2 <_free_r+0xa2>
  4071e4:	f240 5054 	movw	r0, #1364	; 0x554
  4071e8:	4282      	cmp	r2, r0
  4071ea:	d806      	bhi.n	4071fa <_free_r+0x1aa>
  4071ec:	0c9a      	lsrs	r2, r3, #18
  4071ee:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4071f2:	00ff      	lsls	r7, r7, #3
  4071f4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4071f8:	e77b      	b.n	4070f2 <_free_r+0xa2>
  4071fa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4071fe:	257e      	movs	r5, #126	; 0x7e
  407200:	e777      	b.n	4070f2 <_free_r+0xa2>
  407202:	f043 0101 	orr.w	r1, r3, #1
  407206:	6061      	str	r1, [r4, #4]
  407208:	6013      	str	r3, [r2, #0]
  40720a:	e763      	b.n	4070d4 <_free_r+0x84>
  40720c:	20400438 	.word	0x20400438
  407210:	20400440 	.word	0x20400440
  407214:	20400844 	.word	0x20400844
  407218:	20400cb8 	.word	0x20400cb8

0040721c <__sfvwrite_r>:
  40721c:	6893      	ldr	r3, [r2, #8]
  40721e:	2b00      	cmp	r3, #0
  407220:	d073      	beq.n	40730a <__sfvwrite_r+0xee>
  407222:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407226:	898b      	ldrh	r3, [r1, #12]
  407228:	b083      	sub	sp, #12
  40722a:	460c      	mov	r4, r1
  40722c:	0719      	lsls	r1, r3, #28
  40722e:	9000      	str	r0, [sp, #0]
  407230:	4616      	mov	r6, r2
  407232:	d526      	bpl.n	407282 <__sfvwrite_r+0x66>
  407234:	6922      	ldr	r2, [r4, #16]
  407236:	b322      	cbz	r2, 407282 <__sfvwrite_r+0x66>
  407238:	f013 0002 	ands.w	r0, r3, #2
  40723c:	6835      	ldr	r5, [r6, #0]
  40723e:	d02c      	beq.n	40729a <__sfvwrite_r+0x7e>
  407240:	f04f 0900 	mov.w	r9, #0
  407244:	4fb0      	ldr	r7, [pc, #704]	; (407508 <__sfvwrite_r+0x2ec>)
  407246:	46c8      	mov	r8, r9
  407248:	46b2      	mov	sl, r6
  40724a:	45b8      	cmp	r8, r7
  40724c:	4643      	mov	r3, r8
  40724e:	464a      	mov	r2, r9
  407250:	bf28      	it	cs
  407252:	463b      	movcs	r3, r7
  407254:	9800      	ldr	r0, [sp, #0]
  407256:	f1b8 0f00 	cmp.w	r8, #0
  40725a:	d050      	beq.n	4072fe <__sfvwrite_r+0xe2>
  40725c:	69e1      	ldr	r1, [r4, #28]
  40725e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407260:	47b0      	blx	r6
  407262:	2800      	cmp	r0, #0
  407264:	dd58      	ble.n	407318 <__sfvwrite_r+0xfc>
  407266:	f8da 3008 	ldr.w	r3, [sl, #8]
  40726a:	1a1b      	subs	r3, r3, r0
  40726c:	4481      	add	r9, r0
  40726e:	eba8 0800 	sub.w	r8, r8, r0
  407272:	f8ca 3008 	str.w	r3, [sl, #8]
  407276:	2b00      	cmp	r3, #0
  407278:	d1e7      	bne.n	40724a <__sfvwrite_r+0x2e>
  40727a:	2000      	movs	r0, #0
  40727c:	b003      	add	sp, #12
  40727e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407282:	4621      	mov	r1, r4
  407284:	9800      	ldr	r0, [sp, #0]
  407286:	f7fe fca5 	bl	405bd4 <__swsetup_r>
  40728a:	2800      	cmp	r0, #0
  40728c:	f040 8133 	bne.w	4074f6 <__sfvwrite_r+0x2da>
  407290:	89a3      	ldrh	r3, [r4, #12]
  407292:	6835      	ldr	r5, [r6, #0]
  407294:	f013 0002 	ands.w	r0, r3, #2
  407298:	d1d2      	bne.n	407240 <__sfvwrite_r+0x24>
  40729a:	f013 0901 	ands.w	r9, r3, #1
  40729e:	d145      	bne.n	40732c <__sfvwrite_r+0x110>
  4072a0:	464f      	mov	r7, r9
  4072a2:	9601      	str	r6, [sp, #4]
  4072a4:	b337      	cbz	r7, 4072f4 <__sfvwrite_r+0xd8>
  4072a6:	059a      	lsls	r2, r3, #22
  4072a8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4072ac:	f140 8083 	bpl.w	4073b6 <__sfvwrite_r+0x19a>
  4072b0:	4547      	cmp	r7, r8
  4072b2:	46c3      	mov	fp, r8
  4072b4:	f0c0 80ab 	bcc.w	40740e <__sfvwrite_r+0x1f2>
  4072b8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4072bc:	f040 80ac 	bne.w	407418 <__sfvwrite_r+0x1fc>
  4072c0:	6820      	ldr	r0, [r4, #0]
  4072c2:	46ba      	mov	sl, r7
  4072c4:	465a      	mov	r2, fp
  4072c6:	4649      	mov	r1, r9
  4072c8:	f000 fa42 	bl	407750 <memmove>
  4072cc:	68a2      	ldr	r2, [r4, #8]
  4072ce:	6823      	ldr	r3, [r4, #0]
  4072d0:	eba2 0208 	sub.w	r2, r2, r8
  4072d4:	445b      	add	r3, fp
  4072d6:	60a2      	str	r2, [r4, #8]
  4072d8:	6023      	str	r3, [r4, #0]
  4072da:	9a01      	ldr	r2, [sp, #4]
  4072dc:	6893      	ldr	r3, [r2, #8]
  4072de:	eba3 030a 	sub.w	r3, r3, sl
  4072e2:	44d1      	add	r9, sl
  4072e4:	eba7 070a 	sub.w	r7, r7, sl
  4072e8:	6093      	str	r3, [r2, #8]
  4072ea:	2b00      	cmp	r3, #0
  4072ec:	d0c5      	beq.n	40727a <__sfvwrite_r+0x5e>
  4072ee:	89a3      	ldrh	r3, [r4, #12]
  4072f0:	2f00      	cmp	r7, #0
  4072f2:	d1d8      	bne.n	4072a6 <__sfvwrite_r+0x8a>
  4072f4:	f8d5 9000 	ldr.w	r9, [r5]
  4072f8:	686f      	ldr	r7, [r5, #4]
  4072fa:	3508      	adds	r5, #8
  4072fc:	e7d2      	b.n	4072a4 <__sfvwrite_r+0x88>
  4072fe:	f8d5 9000 	ldr.w	r9, [r5]
  407302:	f8d5 8004 	ldr.w	r8, [r5, #4]
  407306:	3508      	adds	r5, #8
  407308:	e79f      	b.n	40724a <__sfvwrite_r+0x2e>
  40730a:	2000      	movs	r0, #0
  40730c:	4770      	bx	lr
  40730e:	4621      	mov	r1, r4
  407310:	9800      	ldr	r0, [sp, #0]
  407312:	f7ff fd33 	bl	406d7c <_fflush_r>
  407316:	b370      	cbz	r0, 407376 <__sfvwrite_r+0x15a>
  407318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40731c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407320:	f04f 30ff 	mov.w	r0, #4294967295
  407324:	81a3      	strh	r3, [r4, #12]
  407326:	b003      	add	sp, #12
  407328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40732c:	4681      	mov	r9, r0
  40732e:	4633      	mov	r3, r6
  407330:	464e      	mov	r6, r9
  407332:	46a8      	mov	r8, r5
  407334:	469a      	mov	sl, r3
  407336:	464d      	mov	r5, r9
  407338:	b34e      	cbz	r6, 40738e <__sfvwrite_r+0x172>
  40733a:	b380      	cbz	r0, 40739e <__sfvwrite_r+0x182>
  40733c:	6820      	ldr	r0, [r4, #0]
  40733e:	6923      	ldr	r3, [r4, #16]
  407340:	6962      	ldr	r2, [r4, #20]
  407342:	45b1      	cmp	r9, r6
  407344:	46cb      	mov	fp, r9
  407346:	bf28      	it	cs
  407348:	46b3      	movcs	fp, r6
  40734a:	4298      	cmp	r0, r3
  40734c:	465f      	mov	r7, fp
  40734e:	d904      	bls.n	40735a <__sfvwrite_r+0x13e>
  407350:	68a3      	ldr	r3, [r4, #8]
  407352:	4413      	add	r3, r2
  407354:	459b      	cmp	fp, r3
  407356:	f300 80a6 	bgt.w	4074a6 <__sfvwrite_r+0x28a>
  40735a:	4593      	cmp	fp, r2
  40735c:	db4b      	blt.n	4073f6 <__sfvwrite_r+0x1da>
  40735e:	4613      	mov	r3, r2
  407360:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407362:	69e1      	ldr	r1, [r4, #28]
  407364:	9800      	ldr	r0, [sp, #0]
  407366:	462a      	mov	r2, r5
  407368:	47b8      	blx	r7
  40736a:	1e07      	subs	r7, r0, #0
  40736c:	ddd4      	ble.n	407318 <__sfvwrite_r+0xfc>
  40736e:	ebb9 0907 	subs.w	r9, r9, r7
  407372:	d0cc      	beq.n	40730e <__sfvwrite_r+0xf2>
  407374:	2001      	movs	r0, #1
  407376:	f8da 3008 	ldr.w	r3, [sl, #8]
  40737a:	1bdb      	subs	r3, r3, r7
  40737c:	443d      	add	r5, r7
  40737e:	1bf6      	subs	r6, r6, r7
  407380:	f8ca 3008 	str.w	r3, [sl, #8]
  407384:	2b00      	cmp	r3, #0
  407386:	f43f af78 	beq.w	40727a <__sfvwrite_r+0x5e>
  40738a:	2e00      	cmp	r6, #0
  40738c:	d1d5      	bne.n	40733a <__sfvwrite_r+0x11e>
  40738e:	f108 0308 	add.w	r3, r8, #8
  407392:	e913 0060 	ldmdb	r3, {r5, r6}
  407396:	4698      	mov	r8, r3
  407398:	3308      	adds	r3, #8
  40739a:	2e00      	cmp	r6, #0
  40739c:	d0f9      	beq.n	407392 <__sfvwrite_r+0x176>
  40739e:	4632      	mov	r2, r6
  4073a0:	210a      	movs	r1, #10
  4073a2:	4628      	mov	r0, r5
  4073a4:	f000 f984 	bl	4076b0 <memchr>
  4073a8:	2800      	cmp	r0, #0
  4073aa:	f000 80a1 	beq.w	4074f0 <__sfvwrite_r+0x2d4>
  4073ae:	3001      	adds	r0, #1
  4073b0:	eba0 0905 	sub.w	r9, r0, r5
  4073b4:	e7c2      	b.n	40733c <__sfvwrite_r+0x120>
  4073b6:	6820      	ldr	r0, [r4, #0]
  4073b8:	6923      	ldr	r3, [r4, #16]
  4073ba:	4298      	cmp	r0, r3
  4073bc:	d802      	bhi.n	4073c4 <__sfvwrite_r+0x1a8>
  4073be:	6963      	ldr	r3, [r4, #20]
  4073c0:	429f      	cmp	r7, r3
  4073c2:	d25d      	bcs.n	407480 <__sfvwrite_r+0x264>
  4073c4:	45b8      	cmp	r8, r7
  4073c6:	bf28      	it	cs
  4073c8:	46b8      	movcs	r8, r7
  4073ca:	4642      	mov	r2, r8
  4073cc:	4649      	mov	r1, r9
  4073ce:	f000 f9bf 	bl	407750 <memmove>
  4073d2:	68a3      	ldr	r3, [r4, #8]
  4073d4:	6822      	ldr	r2, [r4, #0]
  4073d6:	eba3 0308 	sub.w	r3, r3, r8
  4073da:	4442      	add	r2, r8
  4073dc:	60a3      	str	r3, [r4, #8]
  4073de:	6022      	str	r2, [r4, #0]
  4073e0:	b10b      	cbz	r3, 4073e6 <__sfvwrite_r+0x1ca>
  4073e2:	46c2      	mov	sl, r8
  4073e4:	e779      	b.n	4072da <__sfvwrite_r+0xbe>
  4073e6:	4621      	mov	r1, r4
  4073e8:	9800      	ldr	r0, [sp, #0]
  4073ea:	f7ff fcc7 	bl	406d7c <_fflush_r>
  4073ee:	2800      	cmp	r0, #0
  4073f0:	d192      	bne.n	407318 <__sfvwrite_r+0xfc>
  4073f2:	46c2      	mov	sl, r8
  4073f4:	e771      	b.n	4072da <__sfvwrite_r+0xbe>
  4073f6:	465a      	mov	r2, fp
  4073f8:	4629      	mov	r1, r5
  4073fa:	f000 f9a9 	bl	407750 <memmove>
  4073fe:	68a2      	ldr	r2, [r4, #8]
  407400:	6823      	ldr	r3, [r4, #0]
  407402:	eba2 020b 	sub.w	r2, r2, fp
  407406:	445b      	add	r3, fp
  407408:	60a2      	str	r2, [r4, #8]
  40740a:	6023      	str	r3, [r4, #0]
  40740c:	e7af      	b.n	40736e <__sfvwrite_r+0x152>
  40740e:	6820      	ldr	r0, [r4, #0]
  407410:	46b8      	mov	r8, r7
  407412:	46ba      	mov	sl, r7
  407414:	46bb      	mov	fp, r7
  407416:	e755      	b.n	4072c4 <__sfvwrite_r+0xa8>
  407418:	6962      	ldr	r2, [r4, #20]
  40741a:	6820      	ldr	r0, [r4, #0]
  40741c:	6921      	ldr	r1, [r4, #16]
  40741e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  407422:	eba0 0a01 	sub.w	sl, r0, r1
  407426:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40742a:	f10a 0001 	add.w	r0, sl, #1
  40742e:	ea4f 0868 	mov.w	r8, r8, asr #1
  407432:	4438      	add	r0, r7
  407434:	4540      	cmp	r0, r8
  407436:	4642      	mov	r2, r8
  407438:	bf84      	itt	hi
  40743a:	4680      	movhi	r8, r0
  40743c:	4642      	movhi	r2, r8
  40743e:	055b      	lsls	r3, r3, #21
  407440:	d544      	bpl.n	4074cc <__sfvwrite_r+0x2b0>
  407442:	4611      	mov	r1, r2
  407444:	9800      	ldr	r0, [sp, #0]
  407446:	f7fb fdd5 	bl	402ff4 <_malloc_r>
  40744a:	4683      	mov	fp, r0
  40744c:	2800      	cmp	r0, #0
  40744e:	d055      	beq.n	4074fc <__sfvwrite_r+0x2e0>
  407450:	4652      	mov	r2, sl
  407452:	6921      	ldr	r1, [r4, #16]
  407454:	f7fc f87e 	bl	403554 <memcpy>
  407458:	89a3      	ldrh	r3, [r4, #12]
  40745a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40745e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407462:	81a3      	strh	r3, [r4, #12]
  407464:	eb0b 000a 	add.w	r0, fp, sl
  407468:	eba8 030a 	sub.w	r3, r8, sl
  40746c:	f8c4 b010 	str.w	fp, [r4, #16]
  407470:	f8c4 8014 	str.w	r8, [r4, #20]
  407474:	6020      	str	r0, [r4, #0]
  407476:	60a3      	str	r3, [r4, #8]
  407478:	46b8      	mov	r8, r7
  40747a:	46ba      	mov	sl, r7
  40747c:	46bb      	mov	fp, r7
  40747e:	e721      	b.n	4072c4 <__sfvwrite_r+0xa8>
  407480:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  407484:	42b9      	cmp	r1, r7
  407486:	bf28      	it	cs
  407488:	4639      	movcs	r1, r7
  40748a:	464a      	mov	r2, r9
  40748c:	fb91 f1f3 	sdiv	r1, r1, r3
  407490:	9800      	ldr	r0, [sp, #0]
  407492:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407494:	fb03 f301 	mul.w	r3, r3, r1
  407498:	69e1      	ldr	r1, [r4, #28]
  40749a:	47b0      	blx	r6
  40749c:	f1b0 0a00 	subs.w	sl, r0, #0
  4074a0:	f73f af1b 	bgt.w	4072da <__sfvwrite_r+0xbe>
  4074a4:	e738      	b.n	407318 <__sfvwrite_r+0xfc>
  4074a6:	461a      	mov	r2, r3
  4074a8:	4629      	mov	r1, r5
  4074aa:	9301      	str	r3, [sp, #4]
  4074ac:	f000 f950 	bl	407750 <memmove>
  4074b0:	6822      	ldr	r2, [r4, #0]
  4074b2:	9b01      	ldr	r3, [sp, #4]
  4074b4:	9800      	ldr	r0, [sp, #0]
  4074b6:	441a      	add	r2, r3
  4074b8:	6022      	str	r2, [r4, #0]
  4074ba:	4621      	mov	r1, r4
  4074bc:	f7ff fc5e 	bl	406d7c <_fflush_r>
  4074c0:	9b01      	ldr	r3, [sp, #4]
  4074c2:	2800      	cmp	r0, #0
  4074c4:	f47f af28 	bne.w	407318 <__sfvwrite_r+0xfc>
  4074c8:	461f      	mov	r7, r3
  4074ca:	e750      	b.n	40736e <__sfvwrite_r+0x152>
  4074cc:	9800      	ldr	r0, [sp, #0]
  4074ce:	f000 fc9d 	bl	407e0c <_realloc_r>
  4074d2:	4683      	mov	fp, r0
  4074d4:	2800      	cmp	r0, #0
  4074d6:	d1c5      	bne.n	407464 <__sfvwrite_r+0x248>
  4074d8:	9d00      	ldr	r5, [sp, #0]
  4074da:	6921      	ldr	r1, [r4, #16]
  4074dc:	4628      	mov	r0, r5
  4074de:	f7ff fdb7 	bl	407050 <_free_r>
  4074e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4074e6:	220c      	movs	r2, #12
  4074e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4074ec:	602a      	str	r2, [r5, #0]
  4074ee:	e715      	b.n	40731c <__sfvwrite_r+0x100>
  4074f0:	f106 0901 	add.w	r9, r6, #1
  4074f4:	e722      	b.n	40733c <__sfvwrite_r+0x120>
  4074f6:	f04f 30ff 	mov.w	r0, #4294967295
  4074fa:	e6bf      	b.n	40727c <__sfvwrite_r+0x60>
  4074fc:	9a00      	ldr	r2, [sp, #0]
  4074fe:	230c      	movs	r3, #12
  407500:	6013      	str	r3, [r2, #0]
  407502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407506:	e709      	b.n	40731c <__sfvwrite_r+0x100>
  407508:	7ffffc00 	.word	0x7ffffc00

0040750c <_fwalk_reent>:
  40750c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407510:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407514:	d01f      	beq.n	407556 <_fwalk_reent+0x4a>
  407516:	4688      	mov	r8, r1
  407518:	4606      	mov	r6, r0
  40751a:	f04f 0900 	mov.w	r9, #0
  40751e:	687d      	ldr	r5, [r7, #4]
  407520:	68bc      	ldr	r4, [r7, #8]
  407522:	3d01      	subs	r5, #1
  407524:	d411      	bmi.n	40754a <_fwalk_reent+0x3e>
  407526:	89a3      	ldrh	r3, [r4, #12]
  407528:	2b01      	cmp	r3, #1
  40752a:	f105 35ff 	add.w	r5, r5, #4294967295
  40752e:	d908      	bls.n	407542 <_fwalk_reent+0x36>
  407530:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407534:	3301      	adds	r3, #1
  407536:	4621      	mov	r1, r4
  407538:	4630      	mov	r0, r6
  40753a:	d002      	beq.n	407542 <_fwalk_reent+0x36>
  40753c:	47c0      	blx	r8
  40753e:	ea49 0900 	orr.w	r9, r9, r0
  407542:	1c6b      	adds	r3, r5, #1
  407544:	f104 0468 	add.w	r4, r4, #104	; 0x68
  407548:	d1ed      	bne.n	407526 <_fwalk_reent+0x1a>
  40754a:	683f      	ldr	r7, [r7, #0]
  40754c:	2f00      	cmp	r7, #0
  40754e:	d1e6      	bne.n	40751e <_fwalk_reent+0x12>
  407550:	4648      	mov	r0, r9
  407552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407556:	46b9      	mov	r9, r7
  407558:	4648      	mov	r0, r9
  40755a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40755e:	bf00      	nop

00407560 <__locale_mb_cur_max>:
  407560:	4b04      	ldr	r3, [pc, #16]	; (407574 <__locale_mb_cur_max+0x14>)
  407562:	4a05      	ldr	r2, [pc, #20]	; (407578 <__locale_mb_cur_max+0x18>)
  407564:	681b      	ldr	r3, [r3, #0]
  407566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  407568:	2b00      	cmp	r3, #0
  40756a:	bf08      	it	eq
  40756c:	4613      	moveq	r3, r2
  40756e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  407572:	4770      	bx	lr
  407574:	2040000c 	.word	0x2040000c
  407578:	20400848 	.word	0x20400848

0040757c <_localeconv_r>:
  40757c:	4a04      	ldr	r2, [pc, #16]	; (407590 <_localeconv_r+0x14>)
  40757e:	4b05      	ldr	r3, [pc, #20]	; (407594 <_localeconv_r+0x18>)
  407580:	6812      	ldr	r2, [r2, #0]
  407582:	6b50      	ldr	r0, [r2, #52]	; 0x34
  407584:	2800      	cmp	r0, #0
  407586:	bf08      	it	eq
  407588:	4618      	moveq	r0, r3
  40758a:	30f0      	adds	r0, #240	; 0xf0
  40758c:	4770      	bx	lr
  40758e:	bf00      	nop
  407590:	2040000c 	.word	0x2040000c
  407594:	20400848 	.word	0x20400848

00407598 <__swhatbuf_r>:
  407598:	b570      	push	{r4, r5, r6, lr}
  40759a:	460c      	mov	r4, r1
  40759c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4075a0:	2900      	cmp	r1, #0
  4075a2:	b090      	sub	sp, #64	; 0x40
  4075a4:	4615      	mov	r5, r2
  4075a6:	461e      	mov	r6, r3
  4075a8:	db14      	blt.n	4075d4 <__swhatbuf_r+0x3c>
  4075aa:	aa01      	add	r2, sp, #4
  4075ac:	f001 f810 	bl	4085d0 <_fstat_r>
  4075b0:	2800      	cmp	r0, #0
  4075b2:	db0f      	blt.n	4075d4 <__swhatbuf_r+0x3c>
  4075b4:	9a02      	ldr	r2, [sp, #8]
  4075b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4075ba:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4075be:	fab2 f282 	clz	r2, r2
  4075c2:	0952      	lsrs	r2, r2, #5
  4075c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4075c8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4075cc:	6032      	str	r2, [r6, #0]
  4075ce:	602b      	str	r3, [r5, #0]
  4075d0:	b010      	add	sp, #64	; 0x40
  4075d2:	bd70      	pop	{r4, r5, r6, pc}
  4075d4:	89a2      	ldrh	r2, [r4, #12]
  4075d6:	2300      	movs	r3, #0
  4075d8:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4075dc:	6033      	str	r3, [r6, #0]
  4075de:	d004      	beq.n	4075ea <__swhatbuf_r+0x52>
  4075e0:	2240      	movs	r2, #64	; 0x40
  4075e2:	4618      	mov	r0, r3
  4075e4:	602a      	str	r2, [r5, #0]
  4075e6:	b010      	add	sp, #64	; 0x40
  4075e8:	bd70      	pop	{r4, r5, r6, pc}
  4075ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4075ee:	602b      	str	r3, [r5, #0]
  4075f0:	b010      	add	sp, #64	; 0x40
  4075f2:	bd70      	pop	{r4, r5, r6, pc}

004075f4 <__smakebuf_r>:
  4075f4:	898a      	ldrh	r2, [r1, #12]
  4075f6:	0792      	lsls	r2, r2, #30
  4075f8:	460b      	mov	r3, r1
  4075fa:	d506      	bpl.n	40760a <__smakebuf_r+0x16>
  4075fc:	f101 0243 	add.w	r2, r1, #67	; 0x43
  407600:	2101      	movs	r1, #1
  407602:	601a      	str	r2, [r3, #0]
  407604:	611a      	str	r2, [r3, #16]
  407606:	6159      	str	r1, [r3, #20]
  407608:	4770      	bx	lr
  40760a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40760c:	b083      	sub	sp, #12
  40760e:	ab01      	add	r3, sp, #4
  407610:	466a      	mov	r2, sp
  407612:	460c      	mov	r4, r1
  407614:	4605      	mov	r5, r0
  407616:	f7ff ffbf 	bl	407598 <__swhatbuf_r>
  40761a:	9900      	ldr	r1, [sp, #0]
  40761c:	4606      	mov	r6, r0
  40761e:	4628      	mov	r0, r5
  407620:	f7fb fce8 	bl	402ff4 <_malloc_r>
  407624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407628:	b1d0      	cbz	r0, 407660 <__smakebuf_r+0x6c>
  40762a:	9a01      	ldr	r2, [sp, #4]
  40762c:	4f12      	ldr	r7, [pc, #72]	; (407678 <__smakebuf_r+0x84>)
  40762e:	9900      	ldr	r1, [sp, #0]
  407630:	63ef      	str	r7, [r5, #60]	; 0x3c
  407632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407636:	81a3      	strh	r3, [r4, #12]
  407638:	6020      	str	r0, [r4, #0]
  40763a:	6120      	str	r0, [r4, #16]
  40763c:	6161      	str	r1, [r4, #20]
  40763e:	b91a      	cbnz	r2, 407648 <__smakebuf_r+0x54>
  407640:	4333      	orrs	r3, r6
  407642:	81a3      	strh	r3, [r4, #12]
  407644:	b003      	add	sp, #12
  407646:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407648:	4628      	mov	r0, r5
  40764a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40764e:	f000 ffd3 	bl	4085f8 <_isatty_r>
  407652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407656:	2800      	cmp	r0, #0
  407658:	d0f2      	beq.n	407640 <__smakebuf_r+0x4c>
  40765a:	f043 0301 	orr.w	r3, r3, #1
  40765e:	e7ef      	b.n	407640 <__smakebuf_r+0x4c>
  407660:	059a      	lsls	r2, r3, #22
  407662:	d4ef      	bmi.n	407644 <__smakebuf_r+0x50>
  407664:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407668:	f043 0302 	orr.w	r3, r3, #2
  40766c:	2101      	movs	r1, #1
  40766e:	81a3      	strh	r3, [r4, #12]
  407670:	6022      	str	r2, [r4, #0]
  407672:	6122      	str	r2, [r4, #16]
  407674:	6161      	str	r1, [r4, #20]
  407676:	e7e5      	b.n	407644 <__smakebuf_r+0x50>
  407678:	00406da9 	.word	0x00406da9

0040767c <__ascii_mbtowc>:
  40767c:	b082      	sub	sp, #8
  40767e:	b149      	cbz	r1, 407694 <__ascii_mbtowc+0x18>
  407680:	b15a      	cbz	r2, 40769a <__ascii_mbtowc+0x1e>
  407682:	b16b      	cbz	r3, 4076a0 <__ascii_mbtowc+0x24>
  407684:	7813      	ldrb	r3, [r2, #0]
  407686:	600b      	str	r3, [r1, #0]
  407688:	7812      	ldrb	r2, [r2, #0]
  40768a:	1c10      	adds	r0, r2, #0
  40768c:	bf18      	it	ne
  40768e:	2001      	movne	r0, #1
  407690:	b002      	add	sp, #8
  407692:	4770      	bx	lr
  407694:	a901      	add	r1, sp, #4
  407696:	2a00      	cmp	r2, #0
  407698:	d1f3      	bne.n	407682 <__ascii_mbtowc+0x6>
  40769a:	4610      	mov	r0, r2
  40769c:	b002      	add	sp, #8
  40769e:	4770      	bx	lr
  4076a0:	f06f 0001 	mvn.w	r0, #1
  4076a4:	e7f4      	b.n	407690 <__ascii_mbtowc+0x14>
  4076a6:	bf00      	nop
	...

004076b0 <memchr>:
  4076b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4076b4:	2a10      	cmp	r2, #16
  4076b6:	db2b      	blt.n	407710 <memchr+0x60>
  4076b8:	f010 0f07 	tst.w	r0, #7
  4076bc:	d008      	beq.n	4076d0 <memchr+0x20>
  4076be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4076c2:	3a01      	subs	r2, #1
  4076c4:	428b      	cmp	r3, r1
  4076c6:	d02d      	beq.n	407724 <memchr+0x74>
  4076c8:	f010 0f07 	tst.w	r0, #7
  4076cc:	b342      	cbz	r2, 407720 <memchr+0x70>
  4076ce:	d1f6      	bne.n	4076be <memchr+0xe>
  4076d0:	b4f0      	push	{r4, r5, r6, r7}
  4076d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4076d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4076da:	f022 0407 	bic.w	r4, r2, #7
  4076de:	f07f 0700 	mvns.w	r7, #0
  4076e2:	2300      	movs	r3, #0
  4076e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4076e8:	3c08      	subs	r4, #8
  4076ea:	ea85 0501 	eor.w	r5, r5, r1
  4076ee:	ea86 0601 	eor.w	r6, r6, r1
  4076f2:	fa85 f547 	uadd8	r5, r5, r7
  4076f6:	faa3 f587 	sel	r5, r3, r7
  4076fa:	fa86 f647 	uadd8	r6, r6, r7
  4076fe:	faa5 f687 	sel	r6, r5, r7
  407702:	b98e      	cbnz	r6, 407728 <memchr+0x78>
  407704:	d1ee      	bne.n	4076e4 <memchr+0x34>
  407706:	bcf0      	pop	{r4, r5, r6, r7}
  407708:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40770c:	f002 0207 	and.w	r2, r2, #7
  407710:	b132      	cbz	r2, 407720 <memchr+0x70>
  407712:	f810 3b01 	ldrb.w	r3, [r0], #1
  407716:	3a01      	subs	r2, #1
  407718:	ea83 0301 	eor.w	r3, r3, r1
  40771c:	b113      	cbz	r3, 407724 <memchr+0x74>
  40771e:	d1f8      	bne.n	407712 <memchr+0x62>
  407720:	2000      	movs	r0, #0
  407722:	4770      	bx	lr
  407724:	3801      	subs	r0, #1
  407726:	4770      	bx	lr
  407728:	2d00      	cmp	r5, #0
  40772a:	bf06      	itte	eq
  40772c:	4635      	moveq	r5, r6
  40772e:	3803      	subeq	r0, #3
  407730:	3807      	subne	r0, #7
  407732:	f015 0f01 	tst.w	r5, #1
  407736:	d107      	bne.n	407748 <memchr+0x98>
  407738:	3001      	adds	r0, #1
  40773a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40773e:	bf02      	ittt	eq
  407740:	3001      	addeq	r0, #1
  407742:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  407746:	3001      	addeq	r0, #1
  407748:	bcf0      	pop	{r4, r5, r6, r7}
  40774a:	3801      	subs	r0, #1
  40774c:	4770      	bx	lr
  40774e:	bf00      	nop

00407750 <memmove>:
  407750:	4288      	cmp	r0, r1
  407752:	b5f0      	push	{r4, r5, r6, r7, lr}
  407754:	d90d      	bls.n	407772 <memmove+0x22>
  407756:	188b      	adds	r3, r1, r2
  407758:	4298      	cmp	r0, r3
  40775a:	d20a      	bcs.n	407772 <memmove+0x22>
  40775c:	1884      	adds	r4, r0, r2
  40775e:	2a00      	cmp	r2, #0
  407760:	d051      	beq.n	407806 <memmove+0xb6>
  407762:	4622      	mov	r2, r4
  407764:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  407768:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40776c:	4299      	cmp	r1, r3
  40776e:	d1f9      	bne.n	407764 <memmove+0x14>
  407770:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407772:	2a0f      	cmp	r2, #15
  407774:	d948      	bls.n	407808 <memmove+0xb8>
  407776:	ea41 0300 	orr.w	r3, r1, r0
  40777a:	079b      	lsls	r3, r3, #30
  40777c:	d146      	bne.n	40780c <memmove+0xbc>
  40777e:	f100 0410 	add.w	r4, r0, #16
  407782:	f101 0310 	add.w	r3, r1, #16
  407786:	4615      	mov	r5, r2
  407788:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40778c:	f844 6c10 	str.w	r6, [r4, #-16]
  407790:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407794:	f844 6c0c 	str.w	r6, [r4, #-12]
  407798:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40779c:	f844 6c08 	str.w	r6, [r4, #-8]
  4077a0:	3d10      	subs	r5, #16
  4077a2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4077a6:	f844 6c04 	str.w	r6, [r4, #-4]
  4077aa:	2d0f      	cmp	r5, #15
  4077ac:	f103 0310 	add.w	r3, r3, #16
  4077b0:	f104 0410 	add.w	r4, r4, #16
  4077b4:	d8e8      	bhi.n	407788 <memmove+0x38>
  4077b6:	f1a2 0310 	sub.w	r3, r2, #16
  4077ba:	f023 030f 	bic.w	r3, r3, #15
  4077be:	f002 0e0f 	and.w	lr, r2, #15
  4077c2:	3310      	adds	r3, #16
  4077c4:	f1be 0f03 	cmp.w	lr, #3
  4077c8:	4419      	add	r1, r3
  4077ca:	4403      	add	r3, r0
  4077cc:	d921      	bls.n	407812 <memmove+0xc2>
  4077ce:	1f1e      	subs	r6, r3, #4
  4077d0:	460d      	mov	r5, r1
  4077d2:	4674      	mov	r4, lr
  4077d4:	3c04      	subs	r4, #4
  4077d6:	f855 7b04 	ldr.w	r7, [r5], #4
  4077da:	f846 7f04 	str.w	r7, [r6, #4]!
  4077de:	2c03      	cmp	r4, #3
  4077e0:	d8f8      	bhi.n	4077d4 <memmove+0x84>
  4077e2:	f1ae 0404 	sub.w	r4, lr, #4
  4077e6:	f024 0403 	bic.w	r4, r4, #3
  4077ea:	3404      	adds	r4, #4
  4077ec:	4421      	add	r1, r4
  4077ee:	4423      	add	r3, r4
  4077f0:	f002 0203 	and.w	r2, r2, #3
  4077f4:	b162      	cbz	r2, 407810 <memmove+0xc0>
  4077f6:	3b01      	subs	r3, #1
  4077f8:	440a      	add	r2, r1
  4077fa:	f811 4b01 	ldrb.w	r4, [r1], #1
  4077fe:	f803 4f01 	strb.w	r4, [r3, #1]!
  407802:	428a      	cmp	r2, r1
  407804:	d1f9      	bne.n	4077fa <memmove+0xaa>
  407806:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407808:	4603      	mov	r3, r0
  40780a:	e7f3      	b.n	4077f4 <memmove+0xa4>
  40780c:	4603      	mov	r3, r0
  40780e:	e7f2      	b.n	4077f6 <memmove+0xa6>
  407810:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407812:	4672      	mov	r2, lr
  407814:	e7ee      	b.n	4077f4 <memmove+0xa4>
  407816:	bf00      	nop

00407818 <_Balloc>:
  407818:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40781a:	b570      	push	{r4, r5, r6, lr}
  40781c:	4605      	mov	r5, r0
  40781e:	460c      	mov	r4, r1
  407820:	b14b      	cbz	r3, 407836 <_Balloc+0x1e>
  407822:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  407826:	b180      	cbz	r0, 40784a <_Balloc+0x32>
  407828:	6802      	ldr	r2, [r0, #0]
  40782a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40782e:	2300      	movs	r3, #0
  407830:	6103      	str	r3, [r0, #16]
  407832:	60c3      	str	r3, [r0, #12]
  407834:	bd70      	pop	{r4, r5, r6, pc}
  407836:	2221      	movs	r2, #33	; 0x21
  407838:	2104      	movs	r1, #4
  40783a:	f000 fe47 	bl	4084cc <_calloc_r>
  40783e:	64e8      	str	r0, [r5, #76]	; 0x4c
  407840:	4603      	mov	r3, r0
  407842:	2800      	cmp	r0, #0
  407844:	d1ed      	bne.n	407822 <_Balloc+0xa>
  407846:	2000      	movs	r0, #0
  407848:	bd70      	pop	{r4, r5, r6, pc}
  40784a:	2101      	movs	r1, #1
  40784c:	fa01 f604 	lsl.w	r6, r1, r4
  407850:	1d72      	adds	r2, r6, #5
  407852:	4628      	mov	r0, r5
  407854:	0092      	lsls	r2, r2, #2
  407856:	f000 fe39 	bl	4084cc <_calloc_r>
  40785a:	2800      	cmp	r0, #0
  40785c:	d0f3      	beq.n	407846 <_Balloc+0x2e>
  40785e:	6044      	str	r4, [r0, #4]
  407860:	6086      	str	r6, [r0, #8]
  407862:	e7e4      	b.n	40782e <_Balloc+0x16>

00407864 <_Bfree>:
  407864:	b131      	cbz	r1, 407874 <_Bfree+0x10>
  407866:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407868:	684a      	ldr	r2, [r1, #4]
  40786a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40786e:	6008      	str	r0, [r1, #0]
  407870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  407874:	4770      	bx	lr
  407876:	bf00      	nop

00407878 <__multadd>:
  407878:	b5f0      	push	{r4, r5, r6, r7, lr}
  40787a:	690c      	ldr	r4, [r1, #16]
  40787c:	b083      	sub	sp, #12
  40787e:	460d      	mov	r5, r1
  407880:	4606      	mov	r6, r0
  407882:	f101 0e14 	add.w	lr, r1, #20
  407886:	2700      	movs	r7, #0
  407888:	f8de 0000 	ldr.w	r0, [lr]
  40788c:	b281      	uxth	r1, r0
  40788e:	fb02 3301 	mla	r3, r2, r1, r3
  407892:	0c01      	lsrs	r1, r0, #16
  407894:	0c18      	lsrs	r0, r3, #16
  407896:	fb02 0101 	mla	r1, r2, r1, r0
  40789a:	b29b      	uxth	r3, r3
  40789c:	3701      	adds	r7, #1
  40789e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4078a2:	42bc      	cmp	r4, r7
  4078a4:	f84e 3b04 	str.w	r3, [lr], #4
  4078a8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4078ac:	dcec      	bgt.n	407888 <__multadd+0x10>
  4078ae:	b13b      	cbz	r3, 4078c0 <__multadd+0x48>
  4078b0:	68aa      	ldr	r2, [r5, #8]
  4078b2:	4294      	cmp	r4, r2
  4078b4:	da07      	bge.n	4078c6 <__multadd+0x4e>
  4078b6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4078ba:	3401      	adds	r4, #1
  4078bc:	6153      	str	r3, [r2, #20]
  4078be:	612c      	str	r4, [r5, #16]
  4078c0:	4628      	mov	r0, r5
  4078c2:	b003      	add	sp, #12
  4078c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4078c6:	6869      	ldr	r1, [r5, #4]
  4078c8:	9301      	str	r3, [sp, #4]
  4078ca:	3101      	adds	r1, #1
  4078cc:	4630      	mov	r0, r6
  4078ce:	f7ff ffa3 	bl	407818 <_Balloc>
  4078d2:	692a      	ldr	r2, [r5, #16]
  4078d4:	3202      	adds	r2, #2
  4078d6:	f105 010c 	add.w	r1, r5, #12
  4078da:	4607      	mov	r7, r0
  4078dc:	0092      	lsls	r2, r2, #2
  4078de:	300c      	adds	r0, #12
  4078e0:	f7fb fe38 	bl	403554 <memcpy>
  4078e4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4078e6:	6869      	ldr	r1, [r5, #4]
  4078e8:	9b01      	ldr	r3, [sp, #4]
  4078ea:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4078ee:	6028      	str	r0, [r5, #0]
  4078f0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  4078f4:	463d      	mov	r5, r7
  4078f6:	e7de      	b.n	4078b6 <__multadd+0x3e>

004078f8 <__hi0bits>:
  4078f8:	0c02      	lsrs	r2, r0, #16
  4078fa:	0412      	lsls	r2, r2, #16
  4078fc:	4603      	mov	r3, r0
  4078fe:	b9b2      	cbnz	r2, 40792e <__hi0bits+0x36>
  407900:	0403      	lsls	r3, r0, #16
  407902:	2010      	movs	r0, #16
  407904:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  407908:	bf04      	itt	eq
  40790a:	021b      	lsleq	r3, r3, #8
  40790c:	3008      	addeq	r0, #8
  40790e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  407912:	bf04      	itt	eq
  407914:	011b      	lsleq	r3, r3, #4
  407916:	3004      	addeq	r0, #4
  407918:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40791c:	bf04      	itt	eq
  40791e:	009b      	lsleq	r3, r3, #2
  407920:	3002      	addeq	r0, #2
  407922:	2b00      	cmp	r3, #0
  407924:	db02      	blt.n	40792c <__hi0bits+0x34>
  407926:	005b      	lsls	r3, r3, #1
  407928:	d403      	bmi.n	407932 <__hi0bits+0x3a>
  40792a:	2020      	movs	r0, #32
  40792c:	4770      	bx	lr
  40792e:	2000      	movs	r0, #0
  407930:	e7e8      	b.n	407904 <__hi0bits+0xc>
  407932:	3001      	adds	r0, #1
  407934:	4770      	bx	lr
  407936:	bf00      	nop

00407938 <__lo0bits>:
  407938:	6803      	ldr	r3, [r0, #0]
  40793a:	f013 0207 	ands.w	r2, r3, #7
  40793e:	4601      	mov	r1, r0
  407940:	d007      	beq.n	407952 <__lo0bits+0x1a>
  407942:	07da      	lsls	r2, r3, #31
  407944:	d421      	bmi.n	40798a <__lo0bits+0x52>
  407946:	0798      	lsls	r0, r3, #30
  407948:	d421      	bmi.n	40798e <__lo0bits+0x56>
  40794a:	089b      	lsrs	r3, r3, #2
  40794c:	600b      	str	r3, [r1, #0]
  40794e:	2002      	movs	r0, #2
  407950:	4770      	bx	lr
  407952:	b298      	uxth	r0, r3
  407954:	b198      	cbz	r0, 40797e <__lo0bits+0x46>
  407956:	4610      	mov	r0, r2
  407958:	f013 0fff 	tst.w	r3, #255	; 0xff
  40795c:	bf04      	itt	eq
  40795e:	0a1b      	lsreq	r3, r3, #8
  407960:	3008      	addeq	r0, #8
  407962:	071a      	lsls	r2, r3, #28
  407964:	bf04      	itt	eq
  407966:	091b      	lsreq	r3, r3, #4
  407968:	3004      	addeq	r0, #4
  40796a:	079a      	lsls	r2, r3, #30
  40796c:	bf04      	itt	eq
  40796e:	089b      	lsreq	r3, r3, #2
  407970:	3002      	addeq	r0, #2
  407972:	07da      	lsls	r2, r3, #31
  407974:	d407      	bmi.n	407986 <__lo0bits+0x4e>
  407976:	085b      	lsrs	r3, r3, #1
  407978:	d104      	bne.n	407984 <__lo0bits+0x4c>
  40797a:	2020      	movs	r0, #32
  40797c:	4770      	bx	lr
  40797e:	0c1b      	lsrs	r3, r3, #16
  407980:	2010      	movs	r0, #16
  407982:	e7e9      	b.n	407958 <__lo0bits+0x20>
  407984:	3001      	adds	r0, #1
  407986:	600b      	str	r3, [r1, #0]
  407988:	4770      	bx	lr
  40798a:	2000      	movs	r0, #0
  40798c:	4770      	bx	lr
  40798e:	085b      	lsrs	r3, r3, #1
  407990:	600b      	str	r3, [r1, #0]
  407992:	2001      	movs	r0, #1
  407994:	4770      	bx	lr
  407996:	bf00      	nop

00407998 <__i2b>:
  407998:	b510      	push	{r4, lr}
  40799a:	460c      	mov	r4, r1
  40799c:	2101      	movs	r1, #1
  40799e:	f7ff ff3b 	bl	407818 <_Balloc>
  4079a2:	2201      	movs	r2, #1
  4079a4:	6144      	str	r4, [r0, #20]
  4079a6:	6102      	str	r2, [r0, #16]
  4079a8:	bd10      	pop	{r4, pc}
  4079aa:	bf00      	nop

004079ac <__multiply>:
  4079ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4079b0:	690c      	ldr	r4, [r1, #16]
  4079b2:	6915      	ldr	r5, [r2, #16]
  4079b4:	42ac      	cmp	r4, r5
  4079b6:	b083      	sub	sp, #12
  4079b8:	468b      	mov	fp, r1
  4079ba:	4616      	mov	r6, r2
  4079bc:	da04      	bge.n	4079c8 <__multiply+0x1c>
  4079be:	4622      	mov	r2, r4
  4079c0:	46b3      	mov	fp, r6
  4079c2:	462c      	mov	r4, r5
  4079c4:	460e      	mov	r6, r1
  4079c6:	4615      	mov	r5, r2
  4079c8:	f8db 3008 	ldr.w	r3, [fp, #8]
  4079cc:	f8db 1004 	ldr.w	r1, [fp, #4]
  4079d0:	eb04 0805 	add.w	r8, r4, r5
  4079d4:	4598      	cmp	r8, r3
  4079d6:	bfc8      	it	gt
  4079d8:	3101      	addgt	r1, #1
  4079da:	f7ff ff1d 	bl	407818 <_Balloc>
  4079de:	f100 0914 	add.w	r9, r0, #20
  4079e2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4079e6:	45d1      	cmp	r9, sl
  4079e8:	9000      	str	r0, [sp, #0]
  4079ea:	d205      	bcs.n	4079f8 <__multiply+0x4c>
  4079ec:	464b      	mov	r3, r9
  4079ee:	2100      	movs	r1, #0
  4079f0:	f843 1b04 	str.w	r1, [r3], #4
  4079f4:	459a      	cmp	sl, r3
  4079f6:	d8fb      	bhi.n	4079f0 <__multiply+0x44>
  4079f8:	f106 0c14 	add.w	ip, r6, #20
  4079fc:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  407a00:	f10b 0b14 	add.w	fp, fp, #20
  407a04:	459c      	cmp	ip, r3
  407a06:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  407a0a:	d24c      	bcs.n	407aa6 <__multiply+0xfa>
  407a0c:	f8cd a004 	str.w	sl, [sp, #4]
  407a10:	469a      	mov	sl, r3
  407a12:	f8dc 5000 	ldr.w	r5, [ip]
  407a16:	b2af      	uxth	r7, r5
  407a18:	b1ef      	cbz	r7, 407a56 <__multiply+0xaa>
  407a1a:	2100      	movs	r1, #0
  407a1c:	464d      	mov	r5, r9
  407a1e:	465e      	mov	r6, fp
  407a20:	460c      	mov	r4, r1
  407a22:	f856 2b04 	ldr.w	r2, [r6], #4
  407a26:	6828      	ldr	r0, [r5, #0]
  407a28:	b293      	uxth	r3, r2
  407a2a:	b281      	uxth	r1, r0
  407a2c:	fb07 1303 	mla	r3, r7, r3, r1
  407a30:	0c12      	lsrs	r2, r2, #16
  407a32:	0c01      	lsrs	r1, r0, #16
  407a34:	4423      	add	r3, r4
  407a36:	fb07 1102 	mla	r1, r7, r2, r1
  407a3a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  407a3e:	b29b      	uxth	r3, r3
  407a40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  407a44:	45b6      	cmp	lr, r6
  407a46:	f845 3b04 	str.w	r3, [r5], #4
  407a4a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  407a4e:	d8e8      	bhi.n	407a22 <__multiply+0x76>
  407a50:	602c      	str	r4, [r5, #0]
  407a52:	f8dc 5000 	ldr.w	r5, [ip]
  407a56:	0c2d      	lsrs	r5, r5, #16
  407a58:	d01d      	beq.n	407a96 <__multiply+0xea>
  407a5a:	f8d9 3000 	ldr.w	r3, [r9]
  407a5e:	4648      	mov	r0, r9
  407a60:	461c      	mov	r4, r3
  407a62:	4659      	mov	r1, fp
  407a64:	2200      	movs	r2, #0
  407a66:	880e      	ldrh	r6, [r1, #0]
  407a68:	0c24      	lsrs	r4, r4, #16
  407a6a:	fb05 4406 	mla	r4, r5, r6, r4
  407a6e:	4422      	add	r2, r4
  407a70:	b29b      	uxth	r3, r3
  407a72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  407a76:	f840 3b04 	str.w	r3, [r0], #4
  407a7a:	f851 3b04 	ldr.w	r3, [r1], #4
  407a7e:	6804      	ldr	r4, [r0, #0]
  407a80:	0c1b      	lsrs	r3, r3, #16
  407a82:	b2a6      	uxth	r6, r4
  407a84:	fb05 6303 	mla	r3, r5, r3, r6
  407a88:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  407a8c:	458e      	cmp	lr, r1
  407a8e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  407a92:	d8e8      	bhi.n	407a66 <__multiply+0xba>
  407a94:	6003      	str	r3, [r0, #0]
  407a96:	f10c 0c04 	add.w	ip, ip, #4
  407a9a:	45e2      	cmp	sl, ip
  407a9c:	f109 0904 	add.w	r9, r9, #4
  407aa0:	d8b7      	bhi.n	407a12 <__multiply+0x66>
  407aa2:	f8dd a004 	ldr.w	sl, [sp, #4]
  407aa6:	f1b8 0f00 	cmp.w	r8, #0
  407aaa:	dd0b      	ble.n	407ac4 <__multiply+0x118>
  407aac:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  407ab0:	f1aa 0a04 	sub.w	sl, sl, #4
  407ab4:	b11b      	cbz	r3, 407abe <__multiply+0x112>
  407ab6:	e005      	b.n	407ac4 <__multiply+0x118>
  407ab8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  407abc:	b913      	cbnz	r3, 407ac4 <__multiply+0x118>
  407abe:	f1b8 0801 	subs.w	r8, r8, #1
  407ac2:	d1f9      	bne.n	407ab8 <__multiply+0x10c>
  407ac4:	9800      	ldr	r0, [sp, #0]
  407ac6:	f8c0 8010 	str.w	r8, [r0, #16]
  407aca:	b003      	add	sp, #12
  407acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407ad0 <__pow5mult>:
  407ad0:	f012 0303 	ands.w	r3, r2, #3
  407ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407ad8:	4614      	mov	r4, r2
  407ada:	4607      	mov	r7, r0
  407adc:	d12e      	bne.n	407b3c <__pow5mult+0x6c>
  407ade:	460d      	mov	r5, r1
  407ae0:	10a4      	asrs	r4, r4, #2
  407ae2:	d01c      	beq.n	407b1e <__pow5mult+0x4e>
  407ae4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  407ae6:	b396      	cbz	r6, 407b4e <__pow5mult+0x7e>
  407ae8:	07e3      	lsls	r3, r4, #31
  407aea:	f04f 0800 	mov.w	r8, #0
  407aee:	d406      	bmi.n	407afe <__pow5mult+0x2e>
  407af0:	1064      	asrs	r4, r4, #1
  407af2:	d014      	beq.n	407b1e <__pow5mult+0x4e>
  407af4:	6830      	ldr	r0, [r6, #0]
  407af6:	b1a8      	cbz	r0, 407b24 <__pow5mult+0x54>
  407af8:	4606      	mov	r6, r0
  407afa:	07e3      	lsls	r3, r4, #31
  407afc:	d5f8      	bpl.n	407af0 <__pow5mult+0x20>
  407afe:	4632      	mov	r2, r6
  407b00:	4629      	mov	r1, r5
  407b02:	4638      	mov	r0, r7
  407b04:	f7ff ff52 	bl	4079ac <__multiply>
  407b08:	b1b5      	cbz	r5, 407b38 <__pow5mult+0x68>
  407b0a:	686a      	ldr	r2, [r5, #4]
  407b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407b0e:	1064      	asrs	r4, r4, #1
  407b10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407b14:	6029      	str	r1, [r5, #0]
  407b16:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  407b1a:	4605      	mov	r5, r0
  407b1c:	d1ea      	bne.n	407af4 <__pow5mult+0x24>
  407b1e:	4628      	mov	r0, r5
  407b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407b24:	4632      	mov	r2, r6
  407b26:	4631      	mov	r1, r6
  407b28:	4638      	mov	r0, r7
  407b2a:	f7ff ff3f 	bl	4079ac <__multiply>
  407b2e:	6030      	str	r0, [r6, #0]
  407b30:	f8c0 8000 	str.w	r8, [r0]
  407b34:	4606      	mov	r6, r0
  407b36:	e7e0      	b.n	407afa <__pow5mult+0x2a>
  407b38:	4605      	mov	r5, r0
  407b3a:	e7d9      	b.n	407af0 <__pow5mult+0x20>
  407b3c:	1e5a      	subs	r2, r3, #1
  407b3e:	4d0b      	ldr	r5, [pc, #44]	; (407b6c <__pow5mult+0x9c>)
  407b40:	2300      	movs	r3, #0
  407b42:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  407b46:	f7ff fe97 	bl	407878 <__multadd>
  407b4a:	4605      	mov	r5, r0
  407b4c:	e7c8      	b.n	407ae0 <__pow5mult+0x10>
  407b4e:	2101      	movs	r1, #1
  407b50:	4638      	mov	r0, r7
  407b52:	f7ff fe61 	bl	407818 <_Balloc>
  407b56:	f240 2171 	movw	r1, #625	; 0x271
  407b5a:	2201      	movs	r2, #1
  407b5c:	2300      	movs	r3, #0
  407b5e:	6141      	str	r1, [r0, #20]
  407b60:	6102      	str	r2, [r0, #16]
  407b62:	4606      	mov	r6, r0
  407b64:	64b8      	str	r0, [r7, #72]	; 0x48
  407b66:	6003      	str	r3, [r0, #0]
  407b68:	e7be      	b.n	407ae8 <__pow5mult+0x18>
  407b6a:	bf00      	nop
  407b6c:	004095f0 	.word	0x004095f0

00407b70 <__lshift>:
  407b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407b74:	4691      	mov	r9, r2
  407b76:	690a      	ldr	r2, [r1, #16]
  407b78:	688b      	ldr	r3, [r1, #8]
  407b7a:	ea4f 1469 	mov.w	r4, r9, asr #5
  407b7e:	eb04 0802 	add.w	r8, r4, r2
  407b82:	f108 0501 	add.w	r5, r8, #1
  407b86:	429d      	cmp	r5, r3
  407b88:	460e      	mov	r6, r1
  407b8a:	4607      	mov	r7, r0
  407b8c:	6849      	ldr	r1, [r1, #4]
  407b8e:	dd04      	ble.n	407b9a <__lshift+0x2a>
  407b90:	005b      	lsls	r3, r3, #1
  407b92:	429d      	cmp	r5, r3
  407b94:	f101 0101 	add.w	r1, r1, #1
  407b98:	dcfa      	bgt.n	407b90 <__lshift+0x20>
  407b9a:	4638      	mov	r0, r7
  407b9c:	f7ff fe3c 	bl	407818 <_Balloc>
  407ba0:	2c00      	cmp	r4, #0
  407ba2:	f100 0314 	add.w	r3, r0, #20
  407ba6:	dd06      	ble.n	407bb6 <__lshift+0x46>
  407ba8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  407bac:	2100      	movs	r1, #0
  407bae:	f843 1b04 	str.w	r1, [r3], #4
  407bb2:	429a      	cmp	r2, r3
  407bb4:	d1fb      	bne.n	407bae <__lshift+0x3e>
  407bb6:	6934      	ldr	r4, [r6, #16]
  407bb8:	f106 0114 	add.w	r1, r6, #20
  407bbc:	f019 091f 	ands.w	r9, r9, #31
  407bc0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  407bc4:	d01d      	beq.n	407c02 <__lshift+0x92>
  407bc6:	f1c9 0c20 	rsb	ip, r9, #32
  407bca:	2200      	movs	r2, #0
  407bcc:	680c      	ldr	r4, [r1, #0]
  407bce:	fa04 f409 	lsl.w	r4, r4, r9
  407bd2:	4314      	orrs	r4, r2
  407bd4:	f843 4b04 	str.w	r4, [r3], #4
  407bd8:	f851 2b04 	ldr.w	r2, [r1], #4
  407bdc:	458e      	cmp	lr, r1
  407bde:	fa22 f20c 	lsr.w	r2, r2, ip
  407be2:	d8f3      	bhi.n	407bcc <__lshift+0x5c>
  407be4:	601a      	str	r2, [r3, #0]
  407be6:	b10a      	cbz	r2, 407bec <__lshift+0x7c>
  407be8:	f108 0502 	add.w	r5, r8, #2
  407bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407bee:	6872      	ldr	r2, [r6, #4]
  407bf0:	3d01      	subs	r5, #1
  407bf2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407bf6:	6105      	str	r5, [r0, #16]
  407bf8:	6031      	str	r1, [r6, #0]
  407bfa:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  407bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407c02:	3b04      	subs	r3, #4
  407c04:	f851 2b04 	ldr.w	r2, [r1], #4
  407c08:	f843 2f04 	str.w	r2, [r3, #4]!
  407c0c:	458e      	cmp	lr, r1
  407c0e:	d8f9      	bhi.n	407c04 <__lshift+0x94>
  407c10:	e7ec      	b.n	407bec <__lshift+0x7c>
  407c12:	bf00      	nop

00407c14 <__mcmp>:
  407c14:	b430      	push	{r4, r5}
  407c16:	690b      	ldr	r3, [r1, #16]
  407c18:	4605      	mov	r5, r0
  407c1a:	6900      	ldr	r0, [r0, #16]
  407c1c:	1ac0      	subs	r0, r0, r3
  407c1e:	d10f      	bne.n	407c40 <__mcmp+0x2c>
  407c20:	009b      	lsls	r3, r3, #2
  407c22:	3514      	adds	r5, #20
  407c24:	3114      	adds	r1, #20
  407c26:	4419      	add	r1, r3
  407c28:	442b      	add	r3, r5
  407c2a:	e001      	b.n	407c30 <__mcmp+0x1c>
  407c2c:	429d      	cmp	r5, r3
  407c2e:	d207      	bcs.n	407c40 <__mcmp+0x2c>
  407c30:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  407c34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  407c38:	4294      	cmp	r4, r2
  407c3a:	d0f7      	beq.n	407c2c <__mcmp+0x18>
  407c3c:	d302      	bcc.n	407c44 <__mcmp+0x30>
  407c3e:	2001      	movs	r0, #1
  407c40:	bc30      	pop	{r4, r5}
  407c42:	4770      	bx	lr
  407c44:	f04f 30ff 	mov.w	r0, #4294967295
  407c48:	e7fa      	b.n	407c40 <__mcmp+0x2c>
  407c4a:	bf00      	nop

00407c4c <__mdiff>:
  407c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407c50:	690f      	ldr	r7, [r1, #16]
  407c52:	460e      	mov	r6, r1
  407c54:	6911      	ldr	r1, [r2, #16]
  407c56:	1a7f      	subs	r7, r7, r1
  407c58:	2f00      	cmp	r7, #0
  407c5a:	4690      	mov	r8, r2
  407c5c:	d117      	bne.n	407c8e <__mdiff+0x42>
  407c5e:	0089      	lsls	r1, r1, #2
  407c60:	f106 0514 	add.w	r5, r6, #20
  407c64:	f102 0e14 	add.w	lr, r2, #20
  407c68:	186b      	adds	r3, r5, r1
  407c6a:	4471      	add	r1, lr
  407c6c:	e001      	b.n	407c72 <__mdiff+0x26>
  407c6e:	429d      	cmp	r5, r3
  407c70:	d25c      	bcs.n	407d2c <__mdiff+0xe0>
  407c72:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  407c76:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  407c7a:	42a2      	cmp	r2, r4
  407c7c:	d0f7      	beq.n	407c6e <__mdiff+0x22>
  407c7e:	d25e      	bcs.n	407d3e <__mdiff+0xf2>
  407c80:	4633      	mov	r3, r6
  407c82:	462c      	mov	r4, r5
  407c84:	4646      	mov	r6, r8
  407c86:	4675      	mov	r5, lr
  407c88:	4698      	mov	r8, r3
  407c8a:	2701      	movs	r7, #1
  407c8c:	e005      	b.n	407c9a <__mdiff+0x4e>
  407c8e:	db58      	blt.n	407d42 <__mdiff+0xf6>
  407c90:	f106 0514 	add.w	r5, r6, #20
  407c94:	f108 0414 	add.w	r4, r8, #20
  407c98:	2700      	movs	r7, #0
  407c9a:	6871      	ldr	r1, [r6, #4]
  407c9c:	f7ff fdbc 	bl	407818 <_Balloc>
  407ca0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  407ca4:	6936      	ldr	r6, [r6, #16]
  407ca6:	60c7      	str	r7, [r0, #12]
  407ca8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  407cac:	46a6      	mov	lr, r4
  407cae:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  407cb2:	f100 0414 	add.w	r4, r0, #20
  407cb6:	2300      	movs	r3, #0
  407cb8:	f85e 1b04 	ldr.w	r1, [lr], #4
  407cbc:	f855 8b04 	ldr.w	r8, [r5], #4
  407cc0:	b28a      	uxth	r2, r1
  407cc2:	fa13 f388 	uxtah	r3, r3, r8
  407cc6:	0c09      	lsrs	r1, r1, #16
  407cc8:	1a9a      	subs	r2, r3, r2
  407cca:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  407cce:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407cd2:	b292      	uxth	r2, r2
  407cd4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407cd8:	45f4      	cmp	ip, lr
  407cda:	f844 2b04 	str.w	r2, [r4], #4
  407cde:	ea4f 4323 	mov.w	r3, r3, asr #16
  407ce2:	d8e9      	bhi.n	407cb8 <__mdiff+0x6c>
  407ce4:	42af      	cmp	r7, r5
  407ce6:	d917      	bls.n	407d18 <__mdiff+0xcc>
  407ce8:	46a4      	mov	ip, r4
  407cea:	46ae      	mov	lr, r5
  407cec:	f85e 2b04 	ldr.w	r2, [lr], #4
  407cf0:	fa13 f382 	uxtah	r3, r3, r2
  407cf4:	1419      	asrs	r1, r3, #16
  407cf6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  407cfa:	b29b      	uxth	r3, r3
  407cfc:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  407d00:	4577      	cmp	r7, lr
  407d02:	f84c 2b04 	str.w	r2, [ip], #4
  407d06:	ea4f 4321 	mov.w	r3, r1, asr #16
  407d0a:	d8ef      	bhi.n	407cec <__mdiff+0xa0>
  407d0c:	43ed      	mvns	r5, r5
  407d0e:	442f      	add	r7, r5
  407d10:	f027 0703 	bic.w	r7, r7, #3
  407d14:	3704      	adds	r7, #4
  407d16:	443c      	add	r4, r7
  407d18:	3c04      	subs	r4, #4
  407d1a:	b922      	cbnz	r2, 407d26 <__mdiff+0xda>
  407d1c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407d20:	3e01      	subs	r6, #1
  407d22:	2b00      	cmp	r3, #0
  407d24:	d0fa      	beq.n	407d1c <__mdiff+0xd0>
  407d26:	6106      	str	r6, [r0, #16]
  407d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407d2c:	2100      	movs	r1, #0
  407d2e:	f7ff fd73 	bl	407818 <_Balloc>
  407d32:	2201      	movs	r2, #1
  407d34:	2300      	movs	r3, #0
  407d36:	6102      	str	r2, [r0, #16]
  407d38:	6143      	str	r3, [r0, #20]
  407d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407d3e:	4674      	mov	r4, lr
  407d40:	e7ab      	b.n	407c9a <__mdiff+0x4e>
  407d42:	4633      	mov	r3, r6
  407d44:	f106 0414 	add.w	r4, r6, #20
  407d48:	f102 0514 	add.w	r5, r2, #20
  407d4c:	4616      	mov	r6, r2
  407d4e:	2701      	movs	r7, #1
  407d50:	4698      	mov	r8, r3
  407d52:	e7a2      	b.n	407c9a <__mdiff+0x4e>

00407d54 <__d2b>:
  407d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407d58:	b082      	sub	sp, #8
  407d5a:	2101      	movs	r1, #1
  407d5c:	461c      	mov	r4, r3
  407d5e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  407d62:	4615      	mov	r5, r2
  407d64:	9e08      	ldr	r6, [sp, #32]
  407d66:	f7ff fd57 	bl	407818 <_Balloc>
  407d6a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  407d6e:	4680      	mov	r8, r0
  407d70:	b10f      	cbz	r7, 407d76 <__d2b+0x22>
  407d72:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  407d76:	9401      	str	r4, [sp, #4]
  407d78:	b31d      	cbz	r5, 407dc2 <__d2b+0x6e>
  407d7a:	a802      	add	r0, sp, #8
  407d7c:	f840 5d08 	str.w	r5, [r0, #-8]!
  407d80:	f7ff fdda 	bl	407938 <__lo0bits>
  407d84:	2800      	cmp	r0, #0
  407d86:	d134      	bne.n	407df2 <__d2b+0x9e>
  407d88:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407d8c:	f8c8 2014 	str.w	r2, [r8, #20]
  407d90:	2b00      	cmp	r3, #0
  407d92:	bf0c      	ite	eq
  407d94:	2101      	moveq	r1, #1
  407d96:	2102      	movne	r1, #2
  407d98:	f8c8 3018 	str.w	r3, [r8, #24]
  407d9c:	f8c8 1010 	str.w	r1, [r8, #16]
  407da0:	b9df      	cbnz	r7, 407dda <__d2b+0x86>
  407da2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  407da6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  407daa:	6030      	str	r0, [r6, #0]
  407dac:	6918      	ldr	r0, [r3, #16]
  407dae:	f7ff fda3 	bl	4078f8 <__hi0bits>
  407db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407db4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  407db8:	6018      	str	r0, [r3, #0]
  407dba:	4640      	mov	r0, r8
  407dbc:	b002      	add	sp, #8
  407dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407dc2:	a801      	add	r0, sp, #4
  407dc4:	f7ff fdb8 	bl	407938 <__lo0bits>
  407dc8:	9b01      	ldr	r3, [sp, #4]
  407dca:	f8c8 3014 	str.w	r3, [r8, #20]
  407dce:	2101      	movs	r1, #1
  407dd0:	3020      	adds	r0, #32
  407dd2:	f8c8 1010 	str.w	r1, [r8, #16]
  407dd6:	2f00      	cmp	r7, #0
  407dd8:	d0e3      	beq.n	407da2 <__d2b+0x4e>
  407dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407ddc:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  407de0:	4407      	add	r7, r0
  407de2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  407de6:	6037      	str	r7, [r6, #0]
  407de8:	6018      	str	r0, [r3, #0]
  407dea:	4640      	mov	r0, r8
  407dec:	b002      	add	sp, #8
  407dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407df2:	e89d 000a 	ldmia.w	sp, {r1, r3}
  407df6:	f1c0 0220 	rsb	r2, r0, #32
  407dfa:	fa03 f202 	lsl.w	r2, r3, r2
  407dfe:	430a      	orrs	r2, r1
  407e00:	40c3      	lsrs	r3, r0
  407e02:	9301      	str	r3, [sp, #4]
  407e04:	f8c8 2014 	str.w	r2, [r8, #20]
  407e08:	e7c2      	b.n	407d90 <__d2b+0x3c>
  407e0a:	bf00      	nop

00407e0c <_realloc_r>:
  407e0c:	2900      	cmp	r1, #0
  407e0e:	f000 8095 	beq.w	407f3c <_realloc_r+0x130>
  407e12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407e16:	460d      	mov	r5, r1
  407e18:	4616      	mov	r6, r2
  407e1a:	b083      	sub	sp, #12
  407e1c:	4680      	mov	r8, r0
  407e1e:	f106 070b 	add.w	r7, r6, #11
  407e22:	f7fb fc7f 	bl	403724 <__malloc_lock>
  407e26:	f855 ec04 	ldr.w	lr, [r5, #-4]
  407e2a:	2f16      	cmp	r7, #22
  407e2c:	f02e 0403 	bic.w	r4, lr, #3
  407e30:	f1a5 0908 	sub.w	r9, r5, #8
  407e34:	d83c      	bhi.n	407eb0 <_realloc_r+0xa4>
  407e36:	2210      	movs	r2, #16
  407e38:	4617      	mov	r7, r2
  407e3a:	42be      	cmp	r6, r7
  407e3c:	d83d      	bhi.n	407eba <_realloc_r+0xae>
  407e3e:	4294      	cmp	r4, r2
  407e40:	da43      	bge.n	407eca <_realloc_r+0xbe>
  407e42:	4bc4      	ldr	r3, [pc, #784]	; (408154 <_realloc_r+0x348>)
  407e44:	6899      	ldr	r1, [r3, #8]
  407e46:	eb09 0004 	add.w	r0, r9, r4
  407e4a:	4288      	cmp	r0, r1
  407e4c:	f000 80b4 	beq.w	407fb8 <_realloc_r+0x1ac>
  407e50:	6843      	ldr	r3, [r0, #4]
  407e52:	f023 0101 	bic.w	r1, r3, #1
  407e56:	4401      	add	r1, r0
  407e58:	6849      	ldr	r1, [r1, #4]
  407e5a:	07c9      	lsls	r1, r1, #31
  407e5c:	d54c      	bpl.n	407ef8 <_realloc_r+0xec>
  407e5e:	f01e 0f01 	tst.w	lr, #1
  407e62:	f000 809b 	beq.w	407f9c <_realloc_r+0x190>
  407e66:	4631      	mov	r1, r6
  407e68:	4640      	mov	r0, r8
  407e6a:	f7fb f8c3 	bl	402ff4 <_malloc_r>
  407e6e:	4606      	mov	r6, r0
  407e70:	2800      	cmp	r0, #0
  407e72:	d03a      	beq.n	407eea <_realloc_r+0xde>
  407e74:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407e78:	f023 0301 	bic.w	r3, r3, #1
  407e7c:	444b      	add	r3, r9
  407e7e:	f1a0 0208 	sub.w	r2, r0, #8
  407e82:	429a      	cmp	r2, r3
  407e84:	f000 8121 	beq.w	4080ca <_realloc_r+0x2be>
  407e88:	1f22      	subs	r2, r4, #4
  407e8a:	2a24      	cmp	r2, #36	; 0x24
  407e8c:	f200 8107 	bhi.w	40809e <_realloc_r+0x292>
  407e90:	2a13      	cmp	r2, #19
  407e92:	f200 80db 	bhi.w	40804c <_realloc_r+0x240>
  407e96:	4603      	mov	r3, r0
  407e98:	462a      	mov	r2, r5
  407e9a:	6811      	ldr	r1, [r2, #0]
  407e9c:	6019      	str	r1, [r3, #0]
  407e9e:	6851      	ldr	r1, [r2, #4]
  407ea0:	6059      	str	r1, [r3, #4]
  407ea2:	6892      	ldr	r2, [r2, #8]
  407ea4:	609a      	str	r2, [r3, #8]
  407ea6:	4629      	mov	r1, r5
  407ea8:	4640      	mov	r0, r8
  407eaa:	f7ff f8d1 	bl	407050 <_free_r>
  407eae:	e01c      	b.n	407eea <_realloc_r+0xde>
  407eb0:	f027 0707 	bic.w	r7, r7, #7
  407eb4:	2f00      	cmp	r7, #0
  407eb6:	463a      	mov	r2, r7
  407eb8:	dabf      	bge.n	407e3a <_realloc_r+0x2e>
  407eba:	2600      	movs	r6, #0
  407ebc:	230c      	movs	r3, #12
  407ebe:	4630      	mov	r0, r6
  407ec0:	f8c8 3000 	str.w	r3, [r8]
  407ec4:	b003      	add	sp, #12
  407ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407eca:	462e      	mov	r6, r5
  407ecc:	1be3      	subs	r3, r4, r7
  407ece:	2b0f      	cmp	r3, #15
  407ed0:	d81e      	bhi.n	407f10 <_realloc_r+0x104>
  407ed2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407ed6:	f003 0301 	and.w	r3, r3, #1
  407eda:	4323      	orrs	r3, r4
  407edc:	444c      	add	r4, r9
  407ede:	f8c9 3004 	str.w	r3, [r9, #4]
  407ee2:	6863      	ldr	r3, [r4, #4]
  407ee4:	f043 0301 	orr.w	r3, r3, #1
  407ee8:	6063      	str	r3, [r4, #4]
  407eea:	4640      	mov	r0, r8
  407eec:	f7fb fc1c 	bl	403728 <__malloc_unlock>
  407ef0:	4630      	mov	r0, r6
  407ef2:	b003      	add	sp, #12
  407ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ef8:	f023 0303 	bic.w	r3, r3, #3
  407efc:	18e1      	adds	r1, r4, r3
  407efe:	4291      	cmp	r1, r2
  407f00:	db1f      	blt.n	407f42 <_realloc_r+0x136>
  407f02:	68c3      	ldr	r3, [r0, #12]
  407f04:	6882      	ldr	r2, [r0, #8]
  407f06:	462e      	mov	r6, r5
  407f08:	60d3      	str	r3, [r2, #12]
  407f0a:	460c      	mov	r4, r1
  407f0c:	609a      	str	r2, [r3, #8]
  407f0e:	e7dd      	b.n	407ecc <_realloc_r+0xc0>
  407f10:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407f14:	eb09 0107 	add.w	r1, r9, r7
  407f18:	f002 0201 	and.w	r2, r2, #1
  407f1c:	444c      	add	r4, r9
  407f1e:	f043 0301 	orr.w	r3, r3, #1
  407f22:	4317      	orrs	r7, r2
  407f24:	f8c9 7004 	str.w	r7, [r9, #4]
  407f28:	604b      	str	r3, [r1, #4]
  407f2a:	6863      	ldr	r3, [r4, #4]
  407f2c:	f043 0301 	orr.w	r3, r3, #1
  407f30:	3108      	adds	r1, #8
  407f32:	6063      	str	r3, [r4, #4]
  407f34:	4640      	mov	r0, r8
  407f36:	f7ff f88b 	bl	407050 <_free_r>
  407f3a:	e7d6      	b.n	407eea <_realloc_r+0xde>
  407f3c:	4611      	mov	r1, r2
  407f3e:	f7fb b859 	b.w	402ff4 <_malloc_r>
  407f42:	f01e 0f01 	tst.w	lr, #1
  407f46:	d18e      	bne.n	407e66 <_realloc_r+0x5a>
  407f48:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407f4c:	eba9 0a01 	sub.w	sl, r9, r1
  407f50:	f8da 1004 	ldr.w	r1, [sl, #4]
  407f54:	f021 0103 	bic.w	r1, r1, #3
  407f58:	440b      	add	r3, r1
  407f5a:	4423      	add	r3, r4
  407f5c:	4293      	cmp	r3, r2
  407f5e:	db25      	blt.n	407fac <_realloc_r+0x1a0>
  407f60:	68c2      	ldr	r2, [r0, #12]
  407f62:	6881      	ldr	r1, [r0, #8]
  407f64:	4656      	mov	r6, sl
  407f66:	60ca      	str	r2, [r1, #12]
  407f68:	6091      	str	r1, [r2, #8]
  407f6a:	f8da 100c 	ldr.w	r1, [sl, #12]
  407f6e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407f72:	1f22      	subs	r2, r4, #4
  407f74:	2a24      	cmp	r2, #36	; 0x24
  407f76:	60c1      	str	r1, [r0, #12]
  407f78:	6088      	str	r0, [r1, #8]
  407f7a:	f200 8094 	bhi.w	4080a6 <_realloc_r+0x29a>
  407f7e:	2a13      	cmp	r2, #19
  407f80:	d96f      	bls.n	408062 <_realloc_r+0x256>
  407f82:	6829      	ldr	r1, [r5, #0]
  407f84:	f8ca 1008 	str.w	r1, [sl, #8]
  407f88:	6869      	ldr	r1, [r5, #4]
  407f8a:	f8ca 100c 	str.w	r1, [sl, #12]
  407f8e:	2a1b      	cmp	r2, #27
  407f90:	f200 80a2 	bhi.w	4080d8 <_realloc_r+0x2cc>
  407f94:	3508      	adds	r5, #8
  407f96:	f10a 0210 	add.w	r2, sl, #16
  407f9a:	e063      	b.n	408064 <_realloc_r+0x258>
  407f9c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407fa0:	eba9 0a03 	sub.w	sl, r9, r3
  407fa4:	f8da 1004 	ldr.w	r1, [sl, #4]
  407fa8:	f021 0103 	bic.w	r1, r1, #3
  407fac:	1863      	adds	r3, r4, r1
  407fae:	4293      	cmp	r3, r2
  407fb0:	f6ff af59 	blt.w	407e66 <_realloc_r+0x5a>
  407fb4:	4656      	mov	r6, sl
  407fb6:	e7d8      	b.n	407f6a <_realloc_r+0x15e>
  407fb8:	6841      	ldr	r1, [r0, #4]
  407fba:	f021 0b03 	bic.w	fp, r1, #3
  407fbe:	44a3      	add	fp, r4
  407fc0:	f107 0010 	add.w	r0, r7, #16
  407fc4:	4583      	cmp	fp, r0
  407fc6:	da56      	bge.n	408076 <_realloc_r+0x26a>
  407fc8:	f01e 0f01 	tst.w	lr, #1
  407fcc:	f47f af4b 	bne.w	407e66 <_realloc_r+0x5a>
  407fd0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407fd4:	eba9 0a01 	sub.w	sl, r9, r1
  407fd8:	f8da 1004 	ldr.w	r1, [sl, #4]
  407fdc:	f021 0103 	bic.w	r1, r1, #3
  407fe0:	448b      	add	fp, r1
  407fe2:	4558      	cmp	r0, fp
  407fe4:	dce2      	bgt.n	407fac <_realloc_r+0x1a0>
  407fe6:	4656      	mov	r6, sl
  407fe8:	f8da 100c 	ldr.w	r1, [sl, #12]
  407fec:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407ff0:	1f22      	subs	r2, r4, #4
  407ff2:	2a24      	cmp	r2, #36	; 0x24
  407ff4:	60c1      	str	r1, [r0, #12]
  407ff6:	6088      	str	r0, [r1, #8]
  407ff8:	f200 808f 	bhi.w	40811a <_realloc_r+0x30e>
  407ffc:	2a13      	cmp	r2, #19
  407ffe:	f240 808a 	bls.w	408116 <_realloc_r+0x30a>
  408002:	6829      	ldr	r1, [r5, #0]
  408004:	f8ca 1008 	str.w	r1, [sl, #8]
  408008:	6869      	ldr	r1, [r5, #4]
  40800a:	f8ca 100c 	str.w	r1, [sl, #12]
  40800e:	2a1b      	cmp	r2, #27
  408010:	f200 808a 	bhi.w	408128 <_realloc_r+0x31c>
  408014:	3508      	adds	r5, #8
  408016:	f10a 0210 	add.w	r2, sl, #16
  40801a:	6829      	ldr	r1, [r5, #0]
  40801c:	6011      	str	r1, [r2, #0]
  40801e:	6869      	ldr	r1, [r5, #4]
  408020:	6051      	str	r1, [r2, #4]
  408022:	68a9      	ldr	r1, [r5, #8]
  408024:	6091      	str	r1, [r2, #8]
  408026:	eb0a 0107 	add.w	r1, sl, r7
  40802a:	ebab 0207 	sub.w	r2, fp, r7
  40802e:	f042 0201 	orr.w	r2, r2, #1
  408032:	6099      	str	r1, [r3, #8]
  408034:	604a      	str	r2, [r1, #4]
  408036:	f8da 3004 	ldr.w	r3, [sl, #4]
  40803a:	f003 0301 	and.w	r3, r3, #1
  40803e:	431f      	orrs	r7, r3
  408040:	4640      	mov	r0, r8
  408042:	f8ca 7004 	str.w	r7, [sl, #4]
  408046:	f7fb fb6f 	bl	403728 <__malloc_unlock>
  40804a:	e751      	b.n	407ef0 <_realloc_r+0xe4>
  40804c:	682b      	ldr	r3, [r5, #0]
  40804e:	6003      	str	r3, [r0, #0]
  408050:	686b      	ldr	r3, [r5, #4]
  408052:	6043      	str	r3, [r0, #4]
  408054:	2a1b      	cmp	r2, #27
  408056:	d82d      	bhi.n	4080b4 <_realloc_r+0x2a8>
  408058:	f100 0308 	add.w	r3, r0, #8
  40805c:	f105 0208 	add.w	r2, r5, #8
  408060:	e71b      	b.n	407e9a <_realloc_r+0x8e>
  408062:	4632      	mov	r2, r6
  408064:	6829      	ldr	r1, [r5, #0]
  408066:	6011      	str	r1, [r2, #0]
  408068:	6869      	ldr	r1, [r5, #4]
  40806a:	6051      	str	r1, [r2, #4]
  40806c:	68a9      	ldr	r1, [r5, #8]
  40806e:	6091      	str	r1, [r2, #8]
  408070:	461c      	mov	r4, r3
  408072:	46d1      	mov	r9, sl
  408074:	e72a      	b.n	407ecc <_realloc_r+0xc0>
  408076:	eb09 0107 	add.w	r1, r9, r7
  40807a:	ebab 0b07 	sub.w	fp, fp, r7
  40807e:	f04b 0201 	orr.w	r2, fp, #1
  408082:	6099      	str	r1, [r3, #8]
  408084:	604a      	str	r2, [r1, #4]
  408086:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40808a:	f003 0301 	and.w	r3, r3, #1
  40808e:	431f      	orrs	r7, r3
  408090:	4640      	mov	r0, r8
  408092:	f845 7c04 	str.w	r7, [r5, #-4]
  408096:	f7fb fb47 	bl	403728 <__malloc_unlock>
  40809a:	462e      	mov	r6, r5
  40809c:	e728      	b.n	407ef0 <_realloc_r+0xe4>
  40809e:	4629      	mov	r1, r5
  4080a0:	f7ff fb56 	bl	407750 <memmove>
  4080a4:	e6ff      	b.n	407ea6 <_realloc_r+0x9a>
  4080a6:	4629      	mov	r1, r5
  4080a8:	4630      	mov	r0, r6
  4080aa:	461c      	mov	r4, r3
  4080ac:	46d1      	mov	r9, sl
  4080ae:	f7ff fb4f 	bl	407750 <memmove>
  4080b2:	e70b      	b.n	407ecc <_realloc_r+0xc0>
  4080b4:	68ab      	ldr	r3, [r5, #8]
  4080b6:	6083      	str	r3, [r0, #8]
  4080b8:	68eb      	ldr	r3, [r5, #12]
  4080ba:	60c3      	str	r3, [r0, #12]
  4080bc:	2a24      	cmp	r2, #36	; 0x24
  4080be:	d017      	beq.n	4080f0 <_realloc_r+0x2e4>
  4080c0:	f100 0310 	add.w	r3, r0, #16
  4080c4:	f105 0210 	add.w	r2, r5, #16
  4080c8:	e6e7      	b.n	407e9a <_realloc_r+0x8e>
  4080ca:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4080ce:	f023 0303 	bic.w	r3, r3, #3
  4080d2:	441c      	add	r4, r3
  4080d4:	462e      	mov	r6, r5
  4080d6:	e6f9      	b.n	407ecc <_realloc_r+0xc0>
  4080d8:	68a9      	ldr	r1, [r5, #8]
  4080da:	f8ca 1010 	str.w	r1, [sl, #16]
  4080de:	68e9      	ldr	r1, [r5, #12]
  4080e0:	f8ca 1014 	str.w	r1, [sl, #20]
  4080e4:	2a24      	cmp	r2, #36	; 0x24
  4080e6:	d00c      	beq.n	408102 <_realloc_r+0x2f6>
  4080e8:	3510      	adds	r5, #16
  4080ea:	f10a 0218 	add.w	r2, sl, #24
  4080ee:	e7b9      	b.n	408064 <_realloc_r+0x258>
  4080f0:	692b      	ldr	r3, [r5, #16]
  4080f2:	6103      	str	r3, [r0, #16]
  4080f4:	696b      	ldr	r3, [r5, #20]
  4080f6:	6143      	str	r3, [r0, #20]
  4080f8:	f105 0218 	add.w	r2, r5, #24
  4080fc:	f100 0318 	add.w	r3, r0, #24
  408100:	e6cb      	b.n	407e9a <_realloc_r+0x8e>
  408102:	692a      	ldr	r2, [r5, #16]
  408104:	f8ca 2018 	str.w	r2, [sl, #24]
  408108:	696a      	ldr	r2, [r5, #20]
  40810a:	f8ca 201c 	str.w	r2, [sl, #28]
  40810e:	3518      	adds	r5, #24
  408110:	f10a 0220 	add.w	r2, sl, #32
  408114:	e7a6      	b.n	408064 <_realloc_r+0x258>
  408116:	4632      	mov	r2, r6
  408118:	e77f      	b.n	40801a <_realloc_r+0x20e>
  40811a:	4629      	mov	r1, r5
  40811c:	4630      	mov	r0, r6
  40811e:	9301      	str	r3, [sp, #4]
  408120:	f7ff fb16 	bl	407750 <memmove>
  408124:	9b01      	ldr	r3, [sp, #4]
  408126:	e77e      	b.n	408026 <_realloc_r+0x21a>
  408128:	68a9      	ldr	r1, [r5, #8]
  40812a:	f8ca 1010 	str.w	r1, [sl, #16]
  40812e:	68e9      	ldr	r1, [r5, #12]
  408130:	f8ca 1014 	str.w	r1, [sl, #20]
  408134:	2a24      	cmp	r2, #36	; 0x24
  408136:	d003      	beq.n	408140 <_realloc_r+0x334>
  408138:	3510      	adds	r5, #16
  40813a:	f10a 0218 	add.w	r2, sl, #24
  40813e:	e76c      	b.n	40801a <_realloc_r+0x20e>
  408140:	692a      	ldr	r2, [r5, #16]
  408142:	f8ca 2018 	str.w	r2, [sl, #24]
  408146:	696a      	ldr	r2, [r5, #20]
  408148:	f8ca 201c 	str.w	r2, [sl, #28]
  40814c:	3518      	adds	r5, #24
  40814e:	f10a 0220 	add.w	r2, sl, #32
  408152:	e762      	b.n	40801a <_realloc_r+0x20e>
  408154:	20400438 	.word	0x20400438

00408158 <__sread>:
  408158:	b510      	push	{r4, lr}
  40815a:	460c      	mov	r4, r1
  40815c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408160:	f000 fa72 	bl	408648 <_read_r>
  408164:	2800      	cmp	r0, #0
  408166:	db03      	blt.n	408170 <__sread+0x18>
  408168:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40816a:	4403      	add	r3, r0
  40816c:	6523      	str	r3, [r4, #80]	; 0x50
  40816e:	bd10      	pop	{r4, pc}
  408170:	89a3      	ldrh	r3, [r4, #12]
  408172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  408176:	81a3      	strh	r3, [r4, #12]
  408178:	bd10      	pop	{r4, pc}
  40817a:	bf00      	nop

0040817c <__swrite>:
  40817c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408180:	4616      	mov	r6, r2
  408182:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  408186:	461f      	mov	r7, r3
  408188:	05d3      	lsls	r3, r2, #23
  40818a:	460c      	mov	r4, r1
  40818c:	4605      	mov	r5, r0
  40818e:	d507      	bpl.n	4081a0 <__swrite+0x24>
  408190:	2200      	movs	r2, #0
  408192:	2302      	movs	r3, #2
  408194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408198:	f000 fa40 	bl	40861c <_lseek_r>
  40819c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4081a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4081a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4081a8:	81a2      	strh	r2, [r4, #12]
  4081aa:	463b      	mov	r3, r7
  4081ac:	4632      	mov	r2, r6
  4081ae:	4628      	mov	r0, r5
  4081b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4081b4:	f000 b922 	b.w	4083fc <_write_r>

004081b8 <__sseek>:
  4081b8:	b510      	push	{r4, lr}
  4081ba:	460c      	mov	r4, r1
  4081bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4081c0:	f000 fa2c 	bl	40861c <_lseek_r>
  4081c4:	89a3      	ldrh	r3, [r4, #12]
  4081c6:	1c42      	adds	r2, r0, #1
  4081c8:	bf0e      	itee	eq
  4081ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4081ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4081d2:	6520      	strne	r0, [r4, #80]	; 0x50
  4081d4:	81a3      	strh	r3, [r4, #12]
  4081d6:	bd10      	pop	{r4, pc}

004081d8 <__sclose>:
  4081d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4081dc:	f000 b9a6 	b.w	40852c <_close_r>

004081e0 <__ssprint_r>:
  4081e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4081e4:	6893      	ldr	r3, [r2, #8]
  4081e6:	b083      	sub	sp, #12
  4081e8:	4690      	mov	r8, r2
  4081ea:	2b00      	cmp	r3, #0
  4081ec:	d070      	beq.n	4082d0 <__ssprint_r+0xf0>
  4081ee:	4682      	mov	sl, r0
  4081f0:	460c      	mov	r4, r1
  4081f2:	6817      	ldr	r7, [r2, #0]
  4081f4:	688d      	ldr	r5, [r1, #8]
  4081f6:	6808      	ldr	r0, [r1, #0]
  4081f8:	e042      	b.n	408280 <__ssprint_r+0xa0>
  4081fa:	89a3      	ldrh	r3, [r4, #12]
  4081fc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408200:	d02e      	beq.n	408260 <__ssprint_r+0x80>
  408202:	6965      	ldr	r5, [r4, #20]
  408204:	6921      	ldr	r1, [r4, #16]
  408206:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40820a:	eba0 0b01 	sub.w	fp, r0, r1
  40820e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  408212:	f10b 0001 	add.w	r0, fp, #1
  408216:	106d      	asrs	r5, r5, #1
  408218:	4430      	add	r0, r6
  40821a:	42a8      	cmp	r0, r5
  40821c:	462a      	mov	r2, r5
  40821e:	bf84      	itt	hi
  408220:	4605      	movhi	r5, r0
  408222:	462a      	movhi	r2, r5
  408224:	055b      	lsls	r3, r3, #21
  408226:	d538      	bpl.n	40829a <__ssprint_r+0xba>
  408228:	4611      	mov	r1, r2
  40822a:	4650      	mov	r0, sl
  40822c:	f7fa fee2 	bl	402ff4 <_malloc_r>
  408230:	2800      	cmp	r0, #0
  408232:	d03c      	beq.n	4082ae <__ssprint_r+0xce>
  408234:	465a      	mov	r2, fp
  408236:	6921      	ldr	r1, [r4, #16]
  408238:	9001      	str	r0, [sp, #4]
  40823a:	f7fb f98b 	bl	403554 <memcpy>
  40823e:	89a2      	ldrh	r2, [r4, #12]
  408240:	9b01      	ldr	r3, [sp, #4]
  408242:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  408246:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40824a:	81a2      	strh	r2, [r4, #12]
  40824c:	eba5 020b 	sub.w	r2, r5, fp
  408250:	eb03 000b 	add.w	r0, r3, fp
  408254:	6165      	str	r5, [r4, #20]
  408256:	6123      	str	r3, [r4, #16]
  408258:	6020      	str	r0, [r4, #0]
  40825a:	60a2      	str	r2, [r4, #8]
  40825c:	4635      	mov	r5, r6
  40825e:	46b3      	mov	fp, r6
  408260:	465a      	mov	r2, fp
  408262:	4649      	mov	r1, r9
  408264:	f7ff fa74 	bl	407750 <memmove>
  408268:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40826c:	68a2      	ldr	r2, [r4, #8]
  40826e:	6820      	ldr	r0, [r4, #0]
  408270:	1b55      	subs	r5, r2, r5
  408272:	4458      	add	r0, fp
  408274:	1b9e      	subs	r6, r3, r6
  408276:	60a5      	str	r5, [r4, #8]
  408278:	6020      	str	r0, [r4, #0]
  40827a:	f8c8 6008 	str.w	r6, [r8, #8]
  40827e:	b33e      	cbz	r6, 4082d0 <__ssprint_r+0xf0>
  408280:	687e      	ldr	r6, [r7, #4]
  408282:	463b      	mov	r3, r7
  408284:	3708      	adds	r7, #8
  408286:	2e00      	cmp	r6, #0
  408288:	d0fa      	beq.n	408280 <__ssprint_r+0xa0>
  40828a:	42ae      	cmp	r6, r5
  40828c:	f8d3 9000 	ldr.w	r9, [r3]
  408290:	46ab      	mov	fp, r5
  408292:	d2b2      	bcs.n	4081fa <__ssprint_r+0x1a>
  408294:	4635      	mov	r5, r6
  408296:	46b3      	mov	fp, r6
  408298:	e7e2      	b.n	408260 <__ssprint_r+0x80>
  40829a:	4650      	mov	r0, sl
  40829c:	f7ff fdb6 	bl	407e0c <_realloc_r>
  4082a0:	4603      	mov	r3, r0
  4082a2:	2800      	cmp	r0, #0
  4082a4:	d1d2      	bne.n	40824c <__ssprint_r+0x6c>
  4082a6:	6921      	ldr	r1, [r4, #16]
  4082a8:	4650      	mov	r0, sl
  4082aa:	f7fe fed1 	bl	407050 <_free_r>
  4082ae:	230c      	movs	r3, #12
  4082b0:	f8ca 3000 	str.w	r3, [sl]
  4082b4:	89a3      	ldrh	r3, [r4, #12]
  4082b6:	2200      	movs	r2, #0
  4082b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4082bc:	f04f 30ff 	mov.w	r0, #4294967295
  4082c0:	81a3      	strh	r3, [r4, #12]
  4082c2:	f8c8 2008 	str.w	r2, [r8, #8]
  4082c6:	f8c8 2004 	str.w	r2, [r8, #4]
  4082ca:	b003      	add	sp, #12
  4082cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4082d0:	2000      	movs	r0, #0
  4082d2:	f8c8 0004 	str.w	r0, [r8, #4]
  4082d6:	b003      	add	sp, #12
  4082d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004082dc <__swbuf_r>:
  4082dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4082de:	460d      	mov	r5, r1
  4082e0:	4614      	mov	r4, r2
  4082e2:	4606      	mov	r6, r0
  4082e4:	b110      	cbz	r0, 4082ec <__swbuf_r+0x10>
  4082e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4082e8:	2b00      	cmp	r3, #0
  4082ea:	d04b      	beq.n	408384 <__swbuf_r+0xa8>
  4082ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4082f0:	69a3      	ldr	r3, [r4, #24]
  4082f2:	60a3      	str	r3, [r4, #8]
  4082f4:	b291      	uxth	r1, r2
  4082f6:	0708      	lsls	r0, r1, #28
  4082f8:	d539      	bpl.n	40836e <__swbuf_r+0x92>
  4082fa:	6923      	ldr	r3, [r4, #16]
  4082fc:	2b00      	cmp	r3, #0
  4082fe:	d036      	beq.n	40836e <__swbuf_r+0x92>
  408300:	b2ed      	uxtb	r5, r5
  408302:	0489      	lsls	r1, r1, #18
  408304:	462f      	mov	r7, r5
  408306:	d515      	bpl.n	408334 <__swbuf_r+0x58>
  408308:	6822      	ldr	r2, [r4, #0]
  40830a:	6961      	ldr	r1, [r4, #20]
  40830c:	1ad3      	subs	r3, r2, r3
  40830e:	428b      	cmp	r3, r1
  408310:	da1c      	bge.n	40834c <__swbuf_r+0x70>
  408312:	3301      	adds	r3, #1
  408314:	68a1      	ldr	r1, [r4, #8]
  408316:	1c50      	adds	r0, r2, #1
  408318:	3901      	subs	r1, #1
  40831a:	60a1      	str	r1, [r4, #8]
  40831c:	6020      	str	r0, [r4, #0]
  40831e:	7015      	strb	r5, [r2, #0]
  408320:	6962      	ldr	r2, [r4, #20]
  408322:	429a      	cmp	r2, r3
  408324:	d01a      	beq.n	40835c <__swbuf_r+0x80>
  408326:	89a3      	ldrh	r3, [r4, #12]
  408328:	07db      	lsls	r3, r3, #31
  40832a:	d501      	bpl.n	408330 <__swbuf_r+0x54>
  40832c:	2d0a      	cmp	r5, #10
  40832e:	d015      	beq.n	40835c <__swbuf_r+0x80>
  408330:	4638      	mov	r0, r7
  408332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408334:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408336:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40833a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40833e:	81a2      	strh	r2, [r4, #12]
  408340:	6822      	ldr	r2, [r4, #0]
  408342:	6661      	str	r1, [r4, #100]	; 0x64
  408344:	6961      	ldr	r1, [r4, #20]
  408346:	1ad3      	subs	r3, r2, r3
  408348:	428b      	cmp	r3, r1
  40834a:	dbe2      	blt.n	408312 <__swbuf_r+0x36>
  40834c:	4621      	mov	r1, r4
  40834e:	4630      	mov	r0, r6
  408350:	f7fe fd14 	bl	406d7c <_fflush_r>
  408354:	b940      	cbnz	r0, 408368 <__swbuf_r+0x8c>
  408356:	6822      	ldr	r2, [r4, #0]
  408358:	2301      	movs	r3, #1
  40835a:	e7db      	b.n	408314 <__swbuf_r+0x38>
  40835c:	4621      	mov	r1, r4
  40835e:	4630      	mov	r0, r6
  408360:	f7fe fd0c 	bl	406d7c <_fflush_r>
  408364:	2800      	cmp	r0, #0
  408366:	d0e3      	beq.n	408330 <__swbuf_r+0x54>
  408368:	f04f 37ff 	mov.w	r7, #4294967295
  40836c:	e7e0      	b.n	408330 <__swbuf_r+0x54>
  40836e:	4621      	mov	r1, r4
  408370:	4630      	mov	r0, r6
  408372:	f7fd fc2f 	bl	405bd4 <__swsetup_r>
  408376:	2800      	cmp	r0, #0
  408378:	d1f6      	bne.n	408368 <__swbuf_r+0x8c>
  40837a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40837e:	6923      	ldr	r3, [r4, #16]
  408380:	b291      	uxth	r1, r2
  408382:	e7bd      	b.n	408300 <__swbuf_r+0x24>
  408384:	f7fe fd8e 	bl	406ea4 <__sinit>
  408388:	e7b0      	b.n	4082ec <__swbuf_r+0x10>
  40838a:	bf00      	nop

0040838c <_wcrtomb_r>:
  40838c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40838e:	4606      	mov	r6, r0
  408390:	b085      	sub	sp, #20
  408392:	461f      	mov	r7, r3
  408394:	b189      	cbz	r1, 4083ba <_wcrtomb_r+0x2e>
  408396:	4c10      	ldr	r4, [pc, #64]	; (4083d8 <_wcrtomb_r+0x4c>)
  408398:	4d10      	ldr	r5, [pc, #64]	; (4083dc <_wcrtomb_r+0x50>)
  40839a:	6824      	ldr	r4, [r4, #0]
  40839c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40839e:	2c00      	cmp	r4, #0
  4083a0:	bf08      	it	eq
  4083a2:	462c      	moveq	r4, r5
  4083a4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4083a8:	47a0      	blx	r4
  4083aa:	1c43      	adds	r3, r0, #1
  4083ac:	d103      	bne.n	4083b6 <_wcrtomb_r+0x2a>
  4083ae:	2200      	movs	r2, #0
  4083b0:	238a      	movs	r3, #138	; 0x8a
  4083b2:	603a      	str	r2, [r7, #0]
  4083b4:	6033      	str	r3, [r6, #0]
  4083b6:	b005      	add	sp, #20
  4083b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4083ba:	460c      	mov	r4, r1
  4083bc:	4906      	ldr	r1, [pc, #24]	; (4083d8 <_wcrtomb_r+0x4c>)
  4083be:	4a07      	ldr	r2, [pc, #28]	; (4083dc <_wcrtomb_r+0x50>)
  4083c0:	6809      	ldr	r1, [r1, #0]
  4083c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4083c4:	2900      	cmp	r1, #0
  4083c6:	bf08      	it	eq
  4083c8:	4611      	moveq	r1, r2
  4083ca:	4622      	mov	r2, r4
  4083cc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4083d0:	a901      	add	r1, sp, #4
  4083d2:	47a0      	blx	r4
  4083d4:	e7e9      	b.n	4083aa <_wcrtomb_r+0x1e>
  4083d6:	bf00      	nop
  4083d8:	2040000c 	.word	0x2040000c
  4083dc:	20400848 	.word	0x20400848

004083e0 <__ascii_wctomb>:
  4083e0:	b121      	cbz	r1, 4083ec <__ascii_wctomb+0xc>
  4083e2:	2aff      	cmp	r2, #255	; 0xff
  4083e4:	d804      	bhi.n	4083f0 <__ascii_wctomb+0x10>
  4083e6:	700a      	strb	r2, [r1, #0]
  4083e8:	2001      	movs	r0, #1
  4083ea:	4770      	bx	lr
  4083ec:	4608      	mov	r0, r1
  4083ee:	4770      	bx	lr
  4083f0:	238a      	movs	r3, #138	; 0x8a
  4083f2:	6003      	str	r3, [r0, #0]
  4083f4:	f04f 30ff 	mov.w	r0, #4294967295
  4083f8:	4770      	bx	lr
  4083fa:	bf00      	nop

004083fc <_write_r>:
  4083fc:	b570      	push	{r4, r5, r6, lr}
  4083fe:	460d      	mov	r5, r1
  408400:	4c08      	ldr	r4, [pc, #32]	; (408424 <_write_r+0x28>)
  408402:	4611      	mov	r1, r2
  408404:	4606      	mov	r6, r0
  408406:	461a      	mov	r2, r3
  408408:	4628      	mov	r0, r5
  40840a:	2300      	movs	r3, #0
  40840c:	6023      	str	r3, [r4, #0]
  40840e:	f7f7 ff23 	bl	400258 <_write>
  408412:	1c43      	adds	r3, r0, #1
  408414:	d000      	beq.n	408418 <_write_r+0x1c>
  408416:	bd70      	pop	{r4, r5, r6, pc}
  408418:	6823      	ldr	r3, [r4, #0]
  40841a:	2b00      	cmp	r3, #0
  40841c:	d0fb      	beq.n	408416 <_write_r+0x1a>
  40841e:	6033      	str	r3, [r6, #0]
  408420:	bd70      	pop	{r4, r5, r6, pc}
  408422:	bf00      	nop
  408424:	20400d08 	.word	0x20400d08

00408428 <__register_exitproc>:
  408428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40842c:	4c25      	ldr	r4, [pc, #148]	; (4084c4 <__register_exitproc+0x9c>)
  40842e:	6825      	ldr	r5, [r4, #0]
  408430:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  408434:	4606      	mov	r6, r0
  408436:	4688      	mov	r8, r1
  408438:	4692      	mov	sl, r2
  40843a:	4699      	mov	r9, r3
  40843c:	b3c4      	cbz	r4, 4084b0 <__register_exitproc+0x88>
  40843e:	6860      	ldr	r0, [r4, #4]
  408440:	281f      	cmp	r0, #31
  408442:	dc17      	bgt.n	408474 <__register_exitproc+0x4c>
  408444:	1c43      	adds	r3, r0, #1
  408446:	b176      	cbz	r6, 408466 <__register_exitproc+0x3e>
  408448:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40844c:	2201      	movs	r2, #1
  40844e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  408452:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  408456:	4082      	lsls	r2, r0
  408458:	4311      	orrs	r1, r2
  40845a:	2e02      	cmp	r6, #2
  40845c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  408460:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  408464:	d01e      	beq.n	4084a4 <__register_exitproc+0x7c>
  408466:	3002      	adds	r0, #2
  408468:	6063      	str	r3, [r4, #4]
  40846a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40846e:	2000      	movs	r0, #0
  408470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408474:	4b14      	ldr	r3, [pc, #80]	; (4084c8 <__register_exitproc+0xa0>)
  408476:	b303      	cbz	r3, 4084ba <__register_exitproc+0x92>
  408478:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40847c:	f7fa fdaa 	bl	402fd4 <malloc>
  408480:	4604      	mov	r4, r0
  408482:	b1d0      	cbz	r0, 4084ba <__register_exitproc+0x92>
  408484:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  408488:	2700      	movs	r7, #0
  40848a:	e880 0088 	stmia.w	r0, {r3, r7}
  40848e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  408492:	4638      	mov	r0, r7
  408494:	2301      	movs	r3, #1
  408496:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40849a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40849e:	2e00      	cmp	r6, #0
  4084a0:	d0e1      	beq.n	408466 <__register_exitproc+0x3e>
  4084a2:	e7d1      	b.n	408448 <__register_exitproc+0x20>
  4084a4:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4084a8:	430a      	orrs	r2, r1
  4084aa:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4084ae:	e7da      	b.n	408466 <__register_exitproc+0x3e>
  4084b0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4084b4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4084b8:	e7c1      	b.n	40843e <__register_exitproc+0x16>
  4084ba:	f04f 30ff 	mov.w	r0, #4294967295
  4084be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4084c2:	bf00      	nop
  4084c4:	00409458 	.word	0x00409458
  4084c8:	00402fd5 	.word	0x00402fd5

004084cc <_calloc_r>:
  4084cc:	b510      	push	{r4, lr}
  4084ce:	fb02 f101 	mul.w	r1, r2, r1
  4084d2:	f7fa fd8f 	bl	402ff4 <_malloc_r>
  4084d6:	4604      	mov	r4, r0
  4084d8:	b1d8      	cbz	r0, 408512 <_calloc_r+0x46>
  4084da:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4084de:	f022 0203 	bic.w	r2, r2, #3
  4084e2:	3a04      	subs	r2, #4
  4084e4:	2a24      	cmp	r2, #36	; 0x24
  4084e6:	d818      	bhi.n	40851a <_calloc_r+0x4e>
  4084e8:	2a13      	cmp	r2, #19
  4084ea:	d914      	bls.n	408516 <_calloc_r+0x4a>
  4084ec:	2300      	movs	r3, #0
  4084ee:	2a1b      	cmp	r2, #27
  4084f0:	6003      	str	r3, [r0, #0]
  4084f2:	6043      	str	r3, [r0, #4]
  4084f4:	d916      	bls.n	408524 <_calloc_r+0x58>
  4084f6:	2a24      	cmp	r2, #36	; 0x24
  4084f8:	6083      	str	r3, [r0, #8]
  4084fa:	60c3      	str	r3, [r0, #12]
  4084fc:	bf11      	iteee	ne
  4084fe:	f100 0210 	addne.w	r2, r0, #16
  408502:	6103      	streq	r3, [r0, #16]
  408504:	6143      	streq	r3, [r0, #20]
  408506:	f100 0218 	addeq.w	r2, r0, #24
  40850a:	2300      	movs	r3, #0
  40850c:	6013      	str	r3, [r2, #0]
  40850e:	6053      	str	r3, [r2, #4]
  408510:	6093      	str	r3, [r2, #8]
  408512:	4620      	mov	r0, r4
  408514:	bd10      	pop	{r4, pc}
  408516:	4602      	mov	r2, r0
  408518:	e7f7      	b.n	40850a <_calloc_r+0x3e>
  40851a:	2100      	movs	r1, #0
  40851c:	f7fb f8b4 	bl	403688 <memset>
  408520:	4620      	mov	r0, r4
  408522:	bd10      	pop	{r4, pc}
  408524:	f100 0208 	add.w	r2, r0, #8
  408528:	e7ef      	b.n	40850a <_calloc_r+0x3e>
  40852a:	bf00      	nop

0040852c <_close_r>:
  40852c:	b538      	push	{r3, r4, r5, lr}
  40852e:	4c07      	ldr	r4, [pc, #28]	; (40854c <_close_r+0x20>)
  408530:	2300      	movs	r3, #0
  408532:	4605      	mov	r5, r0
  408534:	4608      	mov	r0, r1
  408536:	6023      	str	r3, [r4, #0]
  408538:	f7f8 fac8 	bl	400acc <_close>
  40853c:	1c43      	adds	r3, r0, #1
  40853e:	d000      	beq.n	408542 <_close_r+0x16>
  408540:	bd38      	pop	{r3, r4, r5, pc}
  408542:	6823      	ldr	r3, [r4, #0]
  408544:	2b00      	cmp	r3, #0
  408546:	d0fb      	beq.n	408540 <_close_r+0x14>
  408548:	602b      	str	r3, [r5, #0]
  40854a:	bd38      	pop	{r3, r4, r5, pc}
  40854c:	20400d08 	.word	0x20400d08

00408550 <_fclose_r>:
  408550:	b570      	push	{r4, r5, r6, lr}
  408552:	b139      	cbz	r1, 408564 <_fclose_r+0x14>
  408554:	4605      	mov	r5, r0
  408556:	460c      	mov	r4, r1
  408558:	b108      	cbz	r0, 40855e <_fclose_r+0xe>
  40855a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40855c:	b383      	cbz	r3, 4085c0 <_fclose_r+0x70>
  40855e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408562:	b913      	cbnz	r3, 40856a <_fclose_r+0x1a>
  408564:	2600      	movs	r6, #0
  408566:	4630      	mov	r0, r6
  408568:	bd70      	pop	{r4, r5, r6, pc}
  40856a:	4621      	mov	r1, r4
  40856c:	4628      	mov	r0, r5
  40856e:	f7fe fb65 	bl	406c3c <__sflush_r>
  408572:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  408574:	4606      	mov	r6, r0
  408576:	b133      	cbz	r3, 408586 <_fclose_r+0x36>
  408578:	69e1      	ldr	r1, [r4, #28]
  40857a:	4628      	mov	r0, r5
  40857c:	4798      	blx	r3
  40857e:	2800      	cmp	r0, #0
  408580:	bfb8      	it	lt
  408582:	f04f 36ff 	movlt.w	r6, #4294967295
  408586:	89a3      	ldrh	r3, [r4, #12]
  408588:	061b      	lsls	r3, r3, #24
  40858a:	d41c      	bmi.n	4085c6 <_fclose_r+0x76>
  40858c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40858e:	b141      	cbz	r1, 4085a2 <_fclose_r+0x52>
  408590:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408594:	4299      	cmp	r1, r3
  408596:	d002      	beq.n	40859e <_fclose_r+0x4e>
  408598:	4628      	mov	r0, r5
  40859a:	f7fe fd59 	bl	407050 <_free_r>
  40859e:	2300      	movs	r3, #0
  4085a0:	6323      	str	r3, [r4, #48]	; 0x30
  4085a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4085a4:	b121      	cbz	r1, 4085b0 <_fclose_r+0x60>
  4085a6:	4628      	mov	r0, r5
  4085a8:	f7fe fd52 	bl	407050 <_free_r>
  4085ac:	2300      	movs	r3, #0
  4085ae:	6463      	str	r3, [r4, #68]	; 0x44
  4085b0:	f7fe fc7e 	bl	406eb0 <__sfp_lock_acquire>
  4085b4:	2300      	movs	r3, #0
  4085b6:	81a3      	strh	r3, [r4, #12]
  4085b8:	f7fe fc7c 	bl	406eb4 <__sfp_lock_release>
  4085bc:	4630      	mov	r0, r6
  4085be:	bd70      	pop	{r4, r5, r6, pc}
  4085c0:	f7fe fc70 	bl	406ea4 <__sinit>
  4085c4:	e7cb      	b.n	40855e <_fclose_r+0xe>
  4085c6:	6921      	ldr	r1, [r4, #16]
  4085c8:	4628      	mov	r0, r5
  4085ca:	f7fe fd41 	bl	407050 <_free_r>
  4085ce:	e7dd      	b.n	40858c <_fclose_r+0x3c>

004085d0 <_fstat_r>:
  4085d0:	b538      	push	{r3, r4, r5, lr}
  4085d2:	460b      	mov	r3, r1
  4085d4:	4c07      	ldr	r4, [pc, #28]	; (4085f4 <_fstat_r+0x24>)
  4085d6:	4605      	mov	r5, r0
  4085d8:	4611      	mov	r1, r2
  4085da:	4618      	mov	r0, r3
  4085dc:	2300      	movs	r3, #0
  4085de:	6023      	str	r3, [r4, #0]
  4085e0:	f7f8 fa77 	bl	400ad2 <_fstat>
  4085e4:	1c43      	adds	r3, r0, #1
  4085e6:	d000      	beq.n	4085ea <_fstat_r+0x1a>
  4085e8:	bd38      	pop	{r3, r4, r5, pc}
  4085ea:	6823      	ldr	r3, [r4, #0]
  4085ec:	2b00      	cmp	r3, #0
  4085ee:	d0fb      	beq.n	4085e8 <_fstat_r+0x18>
  4085f0:	602b      	str	r3, [r5, #0]
  4085f2:	bd38      	pop	{r3, r4, r5, pc}
  4085f4:	20400d08 	.word	0x20400d08

004085f8 <_isatty_r>:
  4085f8:	b538      	push	{r3, r4, r5, lr}
  4085fa:	4c07      	ldr	r4, [pc, #28]	; (408618 <_isatty_r+0x20>)
  4085fc:	2300      	movs	r3, #0
  4085fe:	4605      	mov	r5, r0
  408600:	4608      	mov	r0, r1
  408602:	6023      	str	r3, [r4, #0]
  408604:	f7f8 fa6a 	bl	400adc <_isatty>
  408608:	1c43      	adds	r3, r0, #1
  40860a:	d000      	beq.n	40860e <_isatty_r+0x16>
  40860c:	bd38      	pop	{r3, r4, r5, pc}
  40860e:	6823      	ldr	r3, [r4, #0]
  408610:	2b00      	cmp	r3, #0
  408612:	d0fb      	beq.n	40860c <_isatty_r+0x14>
  408614:	602b      	str	r3, [r5, #0]
  408616:	bd38      	pop	{r3, r4, r5, pc}
  408618:	20400d08 	.word	0x20400d08

0040861c <_lseek_r>:
  40861c:	b570      	push	{r4, r5, r6, lr}
  40861e:	460d      	mov	r5, r1
  408620:	4c08      	ldr	r4, [pc, #32]	; (408644 <_lseek_r+0x28>)
  408622:	4611      	mov	r1, r2
  408624:	4606      	mov	r6, r0
  408626:	461a      	mov	r2, r3
  408628:	4628      	mov	r0, r5
  40862a:	2300      	movs	r3, #0
  40862c:	6023      	str	r3, [r4, #0]
  40862e:	f7f8 fa57 	bl	400ae0 <_lseek>
  408632:	1c43      	adds	r3, r0, #1
  408634:	d000      	beq.n	408638 <_lseek_r+0x1c>
  408636:	bd70      	pop	{r4, r5, r6, pc}
  408638:	6823      	ldr	r3, [r4, #0]
  40863a:	2b00      	cmp	r3, #0
  40863c:	d0fb      	beq.n	408636 <_lseek_r+0x1a>
  40863e:	6033      	str	r3, [r6, #0]
  408640:	bd70      	pop	{r4, r5, r6, pc}
  408642:	bf00      	nop
  408644:	20400d08 	.word	0x20400d08

00408648 <_read_r>:
  408648:	b570      	push	{r4, r5, r6, lr}
  40864a:	460d      	mov	r5, r1
  40864c:	4c08      	ldr	r4, [pc, #32]	; (408670 <_read_r+0x28>)
  40864e:	4611      	mov	r1, r2
  408650:	4606      	mov	r6, r0
  408652:	461a      	mov	r2, r3
  408654:	4628      	mov	r0, r5
  408656:	2300      	movs	r3, #0
  408658:	6023      	str	r3, [r4, #0]
  40865a:	f7f7 fddf 	bl	40021c <_read>
  40865e:	1c43      	adds	r3, r0, #1
  408660:	d000      	beq.n	408664 <_read_r+0x1c>
  408662:	bd70      	pop	{r4, r5, r6, pc}
  408664:	6823      	ldr	r3, [r4, #0]
  408666:	2b00      	cmp	r3, #0
  408668:	d0fb      	beq.n	408662 <_read_r+0x1a>
  40866a:	6033      	str	r3, [r6, #0]
  40866c:	bd70      	pop	{r4, r5, r6, pc}
  40866e:	bf00      	nop
  408670:	20400d08 	.word	0x20400d08

00408674 <__aeabi_drsub>:
  408674:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  408678:	e002      	b.n	408680 <__adddf3>
  40867a:	bf00      	nop

0040867c <__aeabi_dsub>:
  40867c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00408680 <__adddf3>:
  408680:	b530      	push	{r4, r5, lr}
  408682:	ea4f 0441 	mov.w	r4, r1, lsl #1
  408686:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40868a:	ea94 0f05 	teq	r4, r5
  40868e:	bf08      	it	eq
  408690:	ea90 0f02 	teqeq	r0, r2
  408694:	bf1f      	itttt	ne
  408696:	ea54 0c00 	orrsne.w	ip, r4, r0
  40869a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40869e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4086a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4086a6:	f000 80e2 	beq.w	40886e <__adddf3+0x1ee>
  4086aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4086ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4086b2:	bfb8      	it	lt
  4086b4:	426d      	neglt	r5, r5
  4086b6:	dd0c      	ble.n	4086d2 <__adddf3+0x52>
  4086b8:	442c      	add	r4, r5
  4086ba:	ea80 0202 	eor.w	r2, r0, r2
  4086be:	ea81 0303 	eor.w	r3, r1, r3
  4086c2:	ea82 0000 	eor.w	r0, r2, r0
  4086c6:	ea83 0101 	eor.w	r1, r3, r1
  4086ca:	ea80 0202 	eor.w	r2, r0, r2
  4086ce:	ea81 0303 	eor.w	r3, r1, r3
  4086d2:	2d36      	cmp	r5, #54	; 0x36
  4086d4:	bf88      	it	hi
  4086d6:	bd30      	pophi	{r4, r5, pc}
  4086d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4086dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4086e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4086e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4086e8:	d002      	beq.n	4086f0 <__adddf3+0x70>
  4086ea:	4240      	negs	r0, r0
  4086ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4086f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4086f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4086f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4086fc:	d002      	beq.n	408704 <__adddf3+0x84>
  4086fe:	4252      	negs	r2, r2
  408700:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  408704:	ea94 0f05 	teq	r4, r5
  408708:	f000 80a7 	beq.w	40885a <__adddf3+0x1da>
  40870c:	f1a4 0401 	sub.w	r4, r4, #1
  408710:	f1d5 0e20 	rsbs	lr, r5, #32
  408714:	db0d      	blt.n	408732 <__adddf3+0xb2>
  408716:	fa02 fc0e 	lsl.w	ip, r2, lr
  40871a:	fa22 f205 	lsr.w	r2, r2, r5
  40871e:	1880      	adds	r0, r0, r2
  408720:	f141 0100 	adc.w	r1, r1, #0
  408724:	fa03 f20e 	lsl.w	r2, r3, lr
  408728:	1880      	adds	r0, r0, r2
  40872a:	fa43 f305 	asr.w	r3, r3, r5
  40872e:	4159      	adcs	r1, r3
  408730:	e00e      	b.n	408750 <__adddf3+0xd0>
  408732:	f1a5 0520 	sub.w	r5, r5, #32
  408736:	f10e 0e20 	add.w	lr, lr, #32
  40873a:	2a01      	cmp	r2, #1
  40873c:	fa03 fc0e 	lsl.w	ip, r3, lr
  408740:	bf28      	it	cs
  408742:	f04c 0c02 	orrcs.w	ip, ip, #2
  408746:	fa43 f305 	asr.w	r3, r3, r5
  40874a:	18c0      	adds	r0, r0, r3
  40874c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  408750:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408754:	d507      	bpl.n	408766 <__adddf3+0xe6>
  408756:	f04f 0e00 	mov.w	lr, #0
  40875a:	f1dc 0c00 	rsbs	ip, ip, #0
  40875e:	eb7e 0000 	sbcs.w	r0, lr, r0
  408762:	eb6e 0101 	sbc.w	r1, lr, r1
  408766:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40876a:	d31b      	bcc.n	4087a4 <__adddf3+0x124>
  40876c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  408770:	d30c      	bcc.n	40878c <__adddf3+0x10c>
  408772:	0849      	lsrs	r1, r1, #1
  408774:	ea5f 0030 	movs.w	r0, r0, rrx
  408778:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40877c:	f104 0401 	add.w	r4, r4, #1
  408780:	ea4f 5244 	mov.w	r2, r4, lsl #21
  408784:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  408788:	f080 809a 	bcs.w	4088c0 <__adddf3+0x240>
  40878c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  408790:	bf08      	it	eq
  408792:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408796:	f150 0000 	adcs.w	r0, r0, #0
  40879a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40879e:	ea41 0105 	orr.w	r1, r1, r5
  4087a2:	bd30      	pop	{r4, r5, pc}
  4087a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4087a8:	4140      	adcs	r0, r0
  4087aa:	eb41 0101 	adc.w	r1, r1, r1
  4087ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4087b2:	f1a4 0401 	sub.w	r4, r4, #1
  4087b6:	d1e9      	bne.n	40878c <__adddf3+0x10c>
  4087b8:	f091 0f00 	teq	r1, #0
  4087bc:	bf04      	itt	eq
  4087be:	4601      	moveq	r1, r0
  4087c0:	2000      	moveq	r0, #0
  4087c2:	fab1 f381 	clz	r3, r1
  4087c6:	bf08      	it	eq
  4087c8:	3320      	addeq	r3, #32
  4087ca:	f1a3 030b 	sub.w	r3, r3, #11
  4087ce:	f1b3 0220 	subs.w	r2, r3, #32
  4087d2:	da0c      	bge.n	4087ee <__adddf3+0x16e>
  4087d4:	320c      	adds	r2, #12
  4087d6:	dd08      	ble.n	4087ea <__adddf3+0x16a>
  4087d8:	f102 0c14 	add.w	ip, r2, #20
  4087dc:	f1c2 020c 	rsb	r2, r2, #12
  4087e0:	fa01 f00c 	lsl.w	r0, r1, ip
  4087e4:	fa21 f102 	lsr.w	r1, r1, r2
  4087e8:	e00c      	b.n	408804 <__adddf3+0x184>
  4087ea:	f102 0214 	add.w	r2, r2, #20
  4087ee:	bfd8      	it	le
  4087f0:	f1c2 0c20 	rsble	ip, r2, #32
  4087f4:	fa01 f102 	lsl.w	r1, r1, r2
  4087f8:	fa20 fc0c 	lsr.w	ip, r0, ip
  4087fc:	bfdc      	itt	le
  4087fe:	ea41 010c 	orrle.w	r1, r1, ip
  408802:	4090      	lslle	r0, r2
  408804:	1ae4      	subs	r4, r4, r3
  408806:	bfa2      	ittt	ge
  408808:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40880c:	4329      	orrge	r1, r5
  40880e:	bd30      	popge	{r4, r5, pc}
  408810:	ea6f 0404 	mvn.w	r4, r4
  408814:	3c1f      	subs	r4, #31
  408816:	da1c      	bge.n	408852 <__adddf3+0x1d2>
  408818:	340c      	adds	r4, #12
  40881a:	dc0e      	bgt.n	40883a <__adddf3+0x1ba>
  40881c:	f104 0414 	add.w	r4, r4, #20
  408820:	f1c4 0220 	rsb	r2, r4, #32
  408824:	fa20 f004 	lsr.w	r0, r0, r4
  408828:	fa01 f302 	lsl.w	r3, r1, r2
  40882c:	ea40 0003 	orr.w	r0, r0, r3
  408830:	fa21 f304 	lsr.w	r3, r1, r4
  408834:	ea45 0103 	orr.w	r1, r5, r3
  408838:	bd30      	pop	{r4, r5, pc}
  40883a:	f1c4 040c 	rsb	r4, r4, #12
  40883e:	f1c4 0220 	rsb	r2, r4, #32
  408842:	fa20 f002 	lsr.w	r0, r0, r2
  408846:	fa01 f304 	lsl.w	r3, r1, r4
  40884a:	ea40 0003 	orr.w	r0, r0, r3
  40884e:	4629      	mov	r1, r5
  408850:	bd30      	pop	{r4, r5, pc}
  408852:	fa21 f004 	lsr.w	r0, r1, r4
  408856:	4629      	mov	r1, r5
  408858:	bd30      	pop	{r4, r5, pc}
  40885a:	f094 0f00 	teq	r4, #0
  40885e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  408862:	bf06      	itte	eq
  408864:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  408868:	3401      	addeq	r4, #1
  40886a:	3d01      	subne	r5, #1
  40886c:	e74e      	b.n	40870c <__adddf3+0x8c>
  40886e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  408872:	bf18      	it	ne
  408874:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  408878:	d029      	beq.n	4088ce <__adddf3+0x24e>
  40887a:	ea94 0f05 	teq	r4, r5
  40887e:	bf08      	it	eq
  408880:	ea90 0f02 	teqeq	r0, r2
  408884:	d005      	beq.n	408892 <__adddf3+0x212>
  408886:	ea54 0c00 	orrs.w	ip, r4, r0
  40888a:	bf04      	itt	eq
  40888c:	4619      	moveq	r1, r3
  40888e:	4610      	moveq	r0, r2
  408890:	bd30      	pop	{r4, r5, pc}
  408892:	ea91 0f03 	teq	r1, r3
  408896:	bf1e      	ittt	ne
  408898:	2100      	movne	r1, #0
  40889a:	2000      	movne	r0, #0
  40889c:	bd30      	popne	{r4, r5, pc}
  40889e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4088a2:	d105      	bne.n	4088b0 <__adddf3+0x230>
  4088a4:	0040      	lsls	r0, r0, #1
  4088a6:	4149      	adcs	r1, r1
  4088a8:	bf28      	it	cs
  4088aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4088ae:	bd30      	pop	{r4, r5, pc}
  4088b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4088b4:	bf3c      	itt	cc
  4088b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4088ba:	bd30      	popcc	{r4, r5, pc}
  4088bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4088c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4088c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4088c8:	f04f 0000 	mov.w	r0, #0
  4088cc:	bd30      	pop	{r4, r5, pc}
  4088ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4088d2:	bf1a      	itte	ne
  4088d4:	4619      	movne	r1, r3
  4088d6:	4610      	movne	r0, r2
  4088d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4088dc:	bf1c      	itt	ne
  4088de:	460b      	movne	r3, r1
  4088e0:	4602      	movne	r2, r0
  4088e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4088e6:	bf06      	itte	eq
  4088e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4088ec:	ea91 0f03 	teqeq	r1, r3
  4088f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4088f4:	bd30      	pop	{r4, r5, pc}
  4088f6:	bf00      	nop

004088f8 <__aeabi_ui2d>:
  4088f8:	f090 0f00 	teq	r0, #0
  4088fc:	bf04      	itt	eq
  4088fe:	2100      	moveq	r1, #0
  408900:	4770      	bxeq	lr
  408902:	b530      	push	{r4, r5, lr}
  408904:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408908:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40890c:	f04f 0500 	mov.w	r5, #0
  408910:	f04f 0100 	mov.w	r1, #0
  408914:	e750      	b.n	4087b8 <__adddf3+0x138>
  408916:	bf00      	nop

00408918 <__aeabi_i2d>:
  408918:	f090 0f00 	teq	r0, #0
  40891c:	bf04      	itt	eq
  40891e:	2100      	moveq	r1, #0
  408920:	4770      	bxeq	lr
  408922:	b530      	push	{r4, r5, lr}
  408924:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408928:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40892c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  408930:	bf48      	it	mi
  408932:	4240      	negmi	r0, r0
  408934:	f04f 0100 	mov.w	r1, #0
  408938:	e73e      	b.n	4087b8 <__adddf3+0x138>
  40893a:	bf00      	nop

0040893c <__aeabi_f2d>:
  40893c:	0042      	lsls	r2, r0, #1
  40893e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  408942:	ea4f 0131 	mov.w	r1, r1, rrx
  408946:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40894a:	bf1f      	itttt	ne
  40894c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  408950:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408954:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  408958:	4770      	bxne	lr
  40895a:	f092 0f00 	teq	r2, #0
  40895e:	bf14      	ite	ne
  408960:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408964:	4770      	bxeq	lr
  408966:	b530      	push	{r4, r5, lr}
  408968:	f44f 7460 	mov.w	r4, #896	; 0x380
  40896c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408970:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408974:	e720      	b.n	4087b8 <__adddf3+0x138>
  408976:	bf00      	nop

00408978 <__aeabi_ul2d>:
  408978:	ea50 0201 	orrs.w	r2, r0, r1
  40897c:	bf08      	it	eq
  40897e:	4770      	bxeq	lr
  408980:	b530      	push	{r4, r5, lr}
  408982:	f04f 0500 	mov.w	r5, #0
  408986:	e00a      	b.n	40899e <__aeabi_l2d+0x16>

00408988 <__aeabi_l2d>:
  408988:	ea50 0201 	orrs.w	r2, r0, r1
  40898c:	bf08      	it	eq
  40898e:	4770      	bxeq	lr
  408990:	b530      	push	{r4, r5, lr}
  408992:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  408996:	d502      	bpl.n	40899e <__aeabi_l2d+0x16>
  408998:	4240      	negs	r0, r0
  40899a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40899e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4089a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4089a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4089aa:	f43f aedc 	beq.w	408766 <__adddf3+0xe6>
  4089ae:	f04f 0203 	mov.w	r2, #3
  4089b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4089b6:	bf18      	it	ne
  4089b8:	3203      	addne	r2, #3
  4089ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4089be:	bf18      	it	ne
  4089c0:	3203      	addne	r2, #3
  4089c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4089c6:	f1c2 0320 	rsb	r3, r2, #32
  4089ca:	fa00 fc03 	lsl.w	ip, r0, r3
  4089ce:	fa20 f002 	lsr.w	r0, r0, r2
  4089d2:	fa01 fe03 	lsl.w	lr, r1, r3
  4089d6:	ea40 000e 	orr.w	r0, r0, lr
  4089da:	fa21 f102 	lsr.w	r1, r1, r2
  4089de:	4414      	add	r4, r2
  4089e0:	e6c1      	b.n	408766 <__adddf3+0xe6>
  4089e2:	bf00      	nop

004089e4 <__aeabi_dmul>:
  4089e4:	b570      	push	{r4, r5, r6, lr}
  4089e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4089ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4089ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4089f2:	bf1d      	ittte	ne
  4089f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4089f8:	ea94 0f0c 	teqne	r4, ip
  4089fc:	ea95 0f0c 	teqne	r5, ip
  408a00:	f000 f8de 	bleq	408bc0 <__aeabi_dmul+0x1dc>
  408a04:	442c      	add	r4, r5
  408a06:	ea81 0603 	eor.w	r6, r1, r3
  408a0a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  408a0e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  408a12:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  408a16:	bf18      	it	ne
  408a18:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  408a1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408a20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  408a24:	d038      	beq.n	408a98 <__aeabi_dmul+0xb4>
  408a26:	fba0 ce02 	umull	ip, lr, r0, r2
  408a2a:	f04f 0500 	mov.w	r5, #0
  408a2e:	fbe1 e502 	umlal	lr, r5, r1, r2
  408a32:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  408a36:	fbe0 e503 	umlal	lr, r5, r0, r3
  408a3a:	f04f 0600 	mov.w	r6, #0
  408a3e:	fbe1 5603 	umlal	r5, r6, r1, r3
  408a42:	f09c 0f00 	teq	ip, #0
  408a46:	bf18      	it	ne
  408a48:	f04e 0e01 	orrne.w	lr, lr, #1
  408a4c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  408a50:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  408a54:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  408a58:	d204      	bcs.n	408a64 <__aeabi_dmul+0x80>
  408a5a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  408a5e:	416d      	adcs	r5, r5
  408a60:	eb46 0606 	adc.w	r6, r6, r6
  408a64:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  408a68:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  408a6c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  408a70:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  408a74:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  408a78:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408a7c:	bf88      	it	hi
  408a7e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408a82:	d81e      	bhi.n	408ac2 <__aeabi_dmul+0xde>
  408a84:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  408a88:	bf08      	it	eq
  408a8a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  408a8e:	f150 0000 	adcs.w	r0, r0, #0
  408a92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408a96:	bd70      	pop	{r4, r5, r6, pc}
  408a98:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  408a9c:	ea46 0101 	orr.w	r1, r6, r1
  408aa0:	ea40 0002 	orr.w	r0, r0, r2
  408aa4:	ea81 0103 	eor.w	r1, r1, r3
  408aa8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  408aac:	bfc2      	ittt	gt
  408aae:	ebd4 050c 	rsbsgt	r5, r4, ip
  408ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408ab6:	bd70      	popgt	{r4, r5, r6, pc}
  408ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408abc:	f04f 0e00 	mov.w	lr, #0
  408ac0:	3c01      	subs	r4, #1
  408ac2:	f300 80ab 	bgt.w	408c1c <__aeabi_dmul+0x238>
  408ac6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  408aca:	bfde      	ittt	le
  408acc:	2000      	movle	r0, #0
  408ace:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  408ad2:	bd70      	pople	{r4, r5, r6, pc}
  408ad4:	f1c4 0400 	rsb	r4, r4, #0
  408ad8:	3c20      	subs	r4, #32
  408ada:	da35      	bge.n	408b48 <__aeabi_dmul+0x164>
  408adc:	340c      	adds	r4, #12
  408ade:	dc1b      	bgt.n	408b18 <__aeabi_dmul+0x134>
  408ae0:	f104 0414 	add.w	r4, r4, #20
  408ae4:	f1c4 0520 	rsb	r5, r4, #32
  408ae8:	fa00 f305 	lsl.w	r3, r0, r5
  408aec:	fa20 f004 	lsr.w	r0, r0, r4
  408af0:	fa01 f205 	lsl.w	r2, r1, r5
  408af4:	ea40 0002 	orr.w	r0, r0, r2
  408af8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  408afc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408b00:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408b04:	fa21 f604 	lsr.w	r6, r1, r4
  408b08:	eb42 0106 	adc.w	r1, r2, r6
  408b0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408b10:	bf08      	it	eq
  408b12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408b16:	bd70      	pop	{r4, r5, r6, pc}
  408b18:	f1c4 040c 	rsb	r4, r4, #12
  408b1c:	f1c4 0520 	rsb	r5, r4, #32
  408b20:	fa00 f304 	lsl.w	r3, r0, r4
  408b24:	fa20 f005 	lsr.w	r0, r0, r5
  408b28:	fa01 f204 	lsl.w	r2, r1, r4
  408b2c:	ea40 0002 	orr.w	r0, r0, r2
  408b30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408b34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408b38:	f141 0100 	adc.w	r1, r1, #0
  408b3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408b40:	bf08      	it	eq
  408b42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408b46:	bd70      	pop	{r4, r5, r6, pc}
  408b48:	f1c4 0520 	rsb	r5, r4, #32
  408b4c:	fa00 f205 	lsl.w	r2, r0, r5
  408b50:	ea4e 0e02 	orr.w	lr, lr, r2
  408b54:	fa20 f304 	lsr.w	r3, r0, r4
  408b58:	fa01 f205 	lsl.w	r2, r1, r5
  408b5c:	ea43 0302 	orr.w	r3, r3, r2
  408b60:	fa21 f004 	lsr.w	r0, r1, r4
  408b64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408b68:	fa21 f204 	lsr.w	r2, r1, r4
  408b6c:	ea20 0002 	bic.w	r0, r0, r2
  408b70:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  408b74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408b78:	bf08      	it	eq
  408b7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408b7e:	bd70      	pop	{r4, r5, r6, pc}
  408b80:	f094 0f00 	teq	r4, #0
  408b84:	d10f      	bne.n	408ba6 <__aeabi_dmul+0x1c2>
  408b86:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  408b8a:	0040      	lsls	r0, r0, #1
  408b8c:	eb41 0101 	adc.w	r1, r1, r1
  408b90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408b94:	bf08      	it	eq
  408b96:	3c01      	subeq	r4, #1
  408b98:	d0f7      	beq.n	408b8a <__aeabi_dmul+0x1a6>
  408b9a:	ea41 0106 	orr.w	r1, r1, r6
  408b9e:	f095 0f00 	teq	r5, #0
  408ba2:	bf18      	it	ne
  408ba4:	4770      	bxne	lr
  408ba6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  408baa:	0052      	lsls	r2, r2, #1
  408bac:	eb43 0303 	adc.w	r3, r3, r3
  408bb0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  408bb4:	bf08      	it	eq
  408bb6:	3d01      	subeq	r5, #1
  408bb8:	d0f7      	beq.n	408baa <__aeabi_dmul+0x1c6>
  408bba:	ea43 0306 	orr.w	r3, r3, r6
  408bbe:	4770      	bx	lr
  408bc0:	ea94 0f0c 	teq	r4, ip
  408bc4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408bc8:	bf18      	it	ne
  408bca:	ea95 0f0c 	teqne	r5, ip
  408bce:	d00c      	beq.n	408bea <__aeabi_dmul+0x206>
  408bd0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408bd4:	bf18      	it	ne
  408bd6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408bda:	d1d1      	bne.n	408b80 <__aeabi_dmul+0x19c>
  408bdc:	ea81 0103 	eor.w	r1, r1, r3
  408be0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408be4:	f04f 0000 	mov.w	r0, #0
  408be8:	bd70      	pop	{r4, r5, r6, pc}
  408bea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408bee:	bf06      	itte	eq
  408bf0:	4610      	moveq	r0, r2
  408bf2:	4619      	moveq	r1, r3
  408bf4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408bf8:	d019      	beq.n	408c2e <__aeabi_dmul+0x24a>
  408bfa:	ea94 0f0c 	teq	r4, ip
  408bfe:	d102      	bne.n	408c06 <__aeabi_dmul+0x222>
  408c00:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  408c04:	d113      	bne.n	408c2e <__aeabi_dmul+0x24a>
  408c06:	ea95 0f0c 	teq	r5, ip
  408c0a:	d105      	bne.n	408c18 <__aeabi_dmul+0x234>
  408c0c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  408c10:	bf1c      	itt	ne
  408c12:	4610      	movne	r0, r2
  408c14:	4619      	movne	r1, r3
  408c16:	d10a      	bne.n	408c2e <__aeabi_dmul+0x24a>
  408c18:	ea81 0103 	eor.w	r1, r1, r3
  408c1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408c20:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408c24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408c28:	f04f 0000 	mov.w	r0, #0
  408c2c:	bd70      	pop	{r4, r5, r6, pc}
  408c2e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408c32:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  408c36:	bd70      	pop	{r4, r5, r6, pc}

00408c38 <__aeabi_ddiv>:
  408c38:	b570      	push	{r4, r5, r6, lr}
  408c3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408c3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408c42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408c46:	bf1d      	ittte	ne
  408c48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408c4c:	ea94 0f0c 	teqne	r4, ip
  408c50:	ea95 0f0c 	teqne	r5, ip
  408c54:	f000 f8a7 	bleq	408da6 <__aeabi_ddiv+0x16e>
  408c58:	eba4 0405 	sub.w	r4, r4, r5
  408c5c:	ea81 0e03 	eor.w	lr, r1, r3
  408c60:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408c64:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408c68:	f000 8088 	beq.w	408d7c <__aeabi_ddiv+0x144>
  408c6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408c70:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408c74:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408c78:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  408c7c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408c80:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408c84:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408c88:	ea4f 2600 	mov.w	r6, r0, lsl #8
  408c8c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408c90:	429d      	cmp	r5, r3
  408c92:	bf08      	it	eq
  408c94:	4296      	cmpeq	r6, r2
  408c96:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  408c9a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  408c9e:	d202      	bcs.n	408ca6 <__aeabi_ddiv+0x6e>
  408ca0:	085b      	lsrs	r3, r3, #1
  408ca2:	ea4f 0232 	mov.w	r2, r2, rrx
  408ca6:	1ab6      	subs	r6, r6, r2
  408ca8:	eb65 0503 	sbc.w	r5, r5, r3
  408cac:	085b      	lsrs	r3, r3, #1
  408cae:	ea4f 0232 	mov.w	r2, r2, rrx
  408cb2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  408cb6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  408cba:	ebb6 0e02 	subs.w	lr, r6, r2
  408cbe:	eb75 0e03 	sbcs.w	lr, r5, r3
  408cc2:	bf22      	ittt	cs
  408cc4:	1ab6      	subcs	r6, r6, r2
  408cc6:	4675      	movcs	r5, lr
  408cc8:	ea40 000c 	orrcs.w	r0, r0, ip
  408ccc:	085b      	lsrs	r3, r3, #1
  408cce:	ea4f 0232 	mov.w	r2, r2, rrx
  408cd2:	ebb6 0e02 	subs.w	lr, r6, r2
  408cd6:	eb75 0e03 	sbcs.w	lr, r5, r3
  408cda:	bf22      	ittt	cs
  408cdc:	1ab6      	subcs	r6, r6, r2
  408cde:	4675      	movcs	r5, lr
  408ce0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  408ce4:	085b      	lsrs	r3, r3, #1
  408ce6:	ea4f 0232 	mov.w	r2, r2, rrx
  408cea:	ebb6 0e02 	subs.w	lr, r6, r2
  408cee:	eb75 0e03 	sbcs.w	lr, r5, r3
  408cf2:	bf22      	ittt	cs
  408cf4:	1ab6      	subcs	r6, r6, r2
  408cf6:	4675      	movcs	r5, lr
  408cf8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  408cfc:	085b      	lsrs	r3, r3, #1
  408cfe:	ea4f 0232 	mov.w	r2, r2, rrx
  408d02:	ebb6 0e02 	subs.w	lr, r6, r2
  408d06:	eb75 0e03 	sbcs.w	lr, r5, r3
  408d0a:	bf22      	ittt	cs
  408d0c:	1ab6      	subcs	r6, r6, r2
  408d0e:	4675      	movcs	r5, lr
  408d10:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  408d14:	ea55 0e06 	orrs.w	lr, r5, r6
  408d18:	d018      	beq.n	408d4c <__aeabi_ddiv+0x114>
  408d1a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  408d1e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  408d22:	ea4f 1606 	mov.w	r6, r6, lsl #4
  408d26:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  408d2a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  408d2e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408d32:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  408d36:	d1c0      	bne.n	408cba <__aeabi_ddiv+0x82>
  408d38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408d3c:	d10b      	bne.n	408d56 <__aeabi_ddiv+0x11e>
  408d3e:	ea41 0100 	orr.w	r1, r1, r0
  408d42:	f04f 0000 	mov.w	r0, #0
  408d46:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  408d4a:	e7b6      	b.n	408cba <__aeabi_ddiv+0x82>
  408d4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408d50:	bf04      	itt	eq
  408d52:	4301      	orreq	r1, r0
  408d54:	2000      	moveq	r0, #0
  408d56:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408d5a:	bf88      	it	hi
  408d5c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408d60:	f63f aeaf 	bhi.w	408ac2 <__aeabi_dmul+0xde>
  408d64:	ebb5 0c03 	subs.w	ip, r5, r3
  408d68:	bf04      	itt	eq
  408d6a:	ebb6 0c02 	subseq.w	ip, r6, r2
  408d6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408d72:	f150 0000 	adcs.w	r0, r0, #0
  408d76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408d7a:	bd70      	pop	{r4, r5, r6, pc}
  408d7c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408d80:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408d84:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408d88:	bfc2      	ittt	gt
  408d8a:	ebd4 050c 	rsbsgt	r5, r4, ip
  408d8e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408d92:	bd70      	popgt	{r4, r5, r6, pc}
  408d94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408d98:	f04f 0e00 	mov.w	lr, #0
  408d9c:	3c01      	subs	r4, #1
  408d9e:	e690      	b.n	408ac2 <__aeabi_dmul+0xde>
  408da0:	ea45 0e06 	orr.w	lr, r5, r6
  408da4:	e68d      	b.n	408ac2 <__aeabi_dmul+0xde>
  408da6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408daa:	ea94 0f0c 	teq	r4, ip
  408dae:	bf08      	it	eq
  408db0:	ea95 0f0c 	teqeq	r5, ip
  408db4:	f43f af3b 	beq.w	408c2e <__aeabi_dmul+0x24a>
  408db8:	ea94 0f0c 	teq	r4, ip
  408dbc:	d10a      	bne.n	408dd4 <__aeabi_ddiv+0x19c>
  408dbe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408dc2:	f47f af34 	bne.w	408c2e <__aeabi_dmul+0x24a>
  408dc6:	ea95 0f0c 	teq	r5, ip
  408dca:	f47f af25 	bne.w	408c18 <__aeabi_dmul+0x234>
  408dce:	4610      	mov	r0, r2
  408dd0:	4619      	mov	r1, r3
  408dd2:	e72c      	b.n	408c2e <__aeabi_dmul+0x24a>
  408dd4:	ea95 0f0c 	teq	r5, ip
  408dd8:	d106      	bne.n	408de8 <__aeabi_ddiv+0x1b0>
  408dda:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408dde:	f43f aefd 	beq.w	408bdc <__aeabi_dmul+0x1f8>
  408de2:	4610      	mov	r0, r2
  408de4:	4619      	mov	r1, r3
  408de6:	e722      	b.n	408c2e <__aeabi_dmul+0x24a>
  408de8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408dec:	bf18      	it	ne
  408dee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408df2:	f47f aec5 	bne.w	408b80 <__aeabi_dmul+0x19c>
  408df6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  408dfa:	f47f af0d 	bne.w	408c18 <__aeabi_dmul+0x234>
  408dfe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  408e02:	f47f aeeb 	bne.w	408bdc <__aeabi_dmul+0x1f8>
  408e06:	e712      	b.n	408c2e <__aeabi_dmul+0x24a>

00408e08 <__gedf2>:
  408e08:	f04f 3cff 	mov.w	ip, #4294967295
  408e0c:	e006      	b.n	408e1c <__cmpdf2+0x4>
  408e0e:	bf00      	nop

00408e10 <__ledf2>:
  408e10:	f04f 0c01 	mov.w	ip, #1
  408e14:	e002      	b.n	408e1c <__cmpdf2+0x4>
  408e16:	bf00      	nop

00408e18 <__cmpdf2>:
  408e18:	f04f 0c01 	mov.w	ip, #1
  408e1c:	f84d cd04 	str.w	ip, [sp, #-4]!
  408e20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408e24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408e28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408e2c:	bf18      	it	ne
  408e2e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408e32:	d01b      	beq.n	408e6c <__cmpdf2+0x54>
  408e34:	b001      	add	sp, #4
  408e36:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  408e3a:	bf0c      	ite	eq
  408e3c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408e40:	ea91 0f03 	teqne	r1, r3
  408e44:	bf02      	ittt	eq
  408e46:	ea90 0f02 	teqeq	r0, r2
  408e4a:	2000      	moveq	r0, #0
  408e4c:	4770      	bxeq	lr
  408e4e:	f110 0f00 	cmn.w	r0, #0
  408e52:	ea91 0f03 	teq	r1, r3
  408e56:	bf58      	it	pl
  408e58:	4299      	cmppl	r1, r3
  408e5a:	bf08      	it	eq
  408e5c:	4290      	cmpeq	r0, r2
  408e5e:	bf2c      	ite	cs
  408e60:	17d8      	asrcs	r0, r3, #31
  408e62:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408e66:	f040 0001 	orr.w	r0, r0, #1
  408e6a:	4770      	bx	lr
  408e6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408e70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408e74:	d102      	bne.n	408e7c <__cmpdf2+0x64>
  408e76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408e7a:	d107      	bne.n	408e8c <__cmpdf2+0x74>
  408e7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408e80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408e84:	d1d6      	bne.n	408e34 <__cmpdf2+0x1c>
  408e86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408e8a:	d0d3      	beq.n	408e34 <__cmpdf2+0x1c>
  408e8c:	f85d 0b04 	ldr.w	r0, [sp], #4
  408e90:	4770      	bx	lr
  408e92:	bf00      	nop

00408e94 <__aeabi_cdrcmple>:
  408e94:	4684      	mov	ip, r0
  408e96:	4610      	mov	r0, r2
  408e98:	4662      	mov	r2, ip
  408e9a:	468c      	mov	ip, r1
  408e9c:	4619      	mov	r1, r3
  408e9e:	4663      	mov	r3, ip
  408ea0:	e000      	b.n	408ea4 <__aeabi_cdcmpeq>
  408ea2:	bf00      	nop

00408ea4 <__aeabi_cdcmpeq>:
  408ea4:	b501      	push	{r0, lr}
  408ea6:	f7ff ffb7 	bl	408e18 <__cmpdf2>
  408eaa:	2800      	cmp	r0, #0
  408eac:	bf48      	it	mi
  408eae:	f110 0f00 	cmnmi.w	r0, #0
  408eb2:	bd01      	pop	{r0, pc}

00408eb4 <__aeabi_dcmpeq>:
  408eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
  408eb8:	f7ff fff4 	bl	408ea4 <__aeabi_cdcmpeq>
  408ebc:	bf0c      	ite	eq
  408ebe:	2001      	moveq	r0, #1
  408ec0:	2000      	movne	r0, #0
  408ec2:	f85d fb08 	ldr.w	pc, [sp], #8
  408ec6:	bf00      	nop

00408ec8 <__aeabi_dcmplt>:
  408ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
  408ecc:	f7ff ffea 	bl	408ea4 <__aeabi_cdcmpeq>
  408ed0:	bf34      	ite	cc
  408ed2:	2001      	movcc	r0, #1
  408ed4:	2000      	movcs	r0, #0
  408ed6:	f85d fb08 	ldr.w	pc, [sp], #8
  408eda:	bf00      	nop

00408edc <__aeabi_dcmple>:
  408edc:	f84d ed08 	str.w	lr, [sp, #-8]!
  408ee0:	f7ff ffe0 	bl	408ea4 <__aeabi_cdcmpeq>
  408ee4:	bf94      	ite	ls
  408ee6:	2001      	movls	r0, #1
  408ee8:	2000      	movhi	r0, #0
  408eea:	f85d fb08 	ldr.w	pc, [sp], #8
  408eee:	bf00      	nop

00408ef0 <__aeabi_dcmpge>:
  408ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
  408ef4:	f7ff ffce 	bl	408e94 <__aeabi_cdrcmple>
  408ef8:	bf94      	ite	ls
  408efa:	2001      	movls	r0, #1
  408efc:	2000      	movhi	r0, #0
  408efe:	f85d fb08 	ldr.w	pc, [sp], #8
  408f02:	bf00      	nop

00408f04 <__aeabi_dcmpgt>:
  408f04:	f84d ed08 	str.w	lr, [sp, #-8]!
  408f08:	f7ff ffc4 	bl	408e94 <__aeabi_cdrcmple>
  408f0c:	bf34      	ite	cc
  408f0e:	2001      	movcc	r0, #1
  408f10:	2000      	movcs	r0, #0
  408f12:	f85d fb08 	ldr.w	pc, [sp], #8
  408f16:	bf00      	nop

00408f18 <__aeabi_dcmpun>:
  408f18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408f1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408f20:	d102      	bne.n	408f28 <__aeabi_dcmpun+0x10>
  408f22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408f26:	d10a      	bne.n	408f3e <__aeabi_dcmpun+0x26>
  408f28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408f2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408f30:	d102      	bne.n	408f38 <__aeabi_dcmpun+0x20>
  408f32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408f36:	d102      	bne.n	408f3e <__aeabi_dcmpun+0x26>
  408f38:	f04f 0000 	mov.w	r0, #0
  408f3c:	4770      	bx	lr
  408f3e:	f04f 0001 	mov.w	r0, #1
  408f42:	4770      	bx	lr

00408f44 <__aeabi_d2iz>:
  408f44:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408f48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408f4c:	d215      	bcs.n	408f7a <__aeabi_d2iz+0x36>
  408f4e:	d511      	bpl.n	408f74 <__aeabi_d2iz+0x30>
  408f50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408f54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408f58:	d912      	bls.n	408f80 <__aeabi_d2iz+0x3c>
  408f5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408f5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408f62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408f66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408f6a:	fa23 f002 	lsr.w	r0, r3, r2
  408f6e:	bf18      	it	ne
  408f70:	4240      	negne	r0, r0
  408f72:	4770      	bx	lr
  408f74:	f04f 0000 	mov.w	r0, #0
  408f78:	4770      	bx	lr
  408f7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408f7e:	d105      	bne.n	408f8c <__aeabi_d2iz+0x48>
  408f80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408f84:	bf08      	it	eq
  408f86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408f8a:	4770      	bx	lr
  408f8c:	f04f 0000 	mov.w	r0, #0
  408f90:	4770      	bx	lr
  408f92:	bf00      	nop

00408f94 <__aeabi_uldivmod>:
  408f94:	b953      	cbnz	r3, 408fac <__aeabi_uldivmod+0x18>
  408f96:	b94a      	cbnz	r2, 408fac <__aeabi_uldivmod+0x18>
  408f98:	2900      	cmp	r1, #0
  408f9a:	bf08      	it	eq
  408f9c:	2800      	cmpeq	r0, #0
  408f9e:	bf1c      	itt	ne
  408fa0:	f04f 31ff 	movne.w	r1, #4294967295
  408fa4:	f04f 30ff 	movne.w	r0, #4294967295
  408fa8:	f000 b97a 	b.w	4092a0 <__aeabi_idiv0>
  408fac:	f1ad 0c08 	sub.w	ip, sp, #8
  408fb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408fb4:	f000 f806 	bl	408fc4 <__udivmoddi4>
  408fb8:	f8dd e004 	ldr.w	lr, [sp, #4]
  408fbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408fc0:	b004      	add	sp, #16
  408fc2:	4770      	bx	lr

00408fc4 <__udivmoddi4>:
  408fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408fc8:	468c      	mov	ip, r1
  408fca:	460d      	mov	r5, r1
  408fcc:	4604      	mov	r4, r0
  408fce:	9e08      	ldr	r6, [sp, #32]
  408fd0:	2b00      	cmp	r3, #0
  408fd2:	d151      	bne.n	409078 <__udivmoddi4+0xb4>
  408fd4:	428a      	cmp	r2, r1
  408fd6:	4617      	mov	r7, r2
  408fd8:	d96d      	bls.n	4090b6 <__udivmoddi4+0xf2>
  408fda:	fab2 fe82 	clz	lr, r2
  408fde:	f1be 0f00 	cmp.w	lr, #0
  408fe2:	d00b      	beq.n	408ffc <__udivmoddi4+0x38>
  408fe4:	f1ce 0c20 	rsb	ip, lr, #32
  408fe8:	fa01 f50e 	lsl.w	r5, r1, lr
  408fec:	fa20 fc0c 	lsr.w	ip, r0, ip
  408ff0:	fa02 f70e 	lsl.w	r7, r2, lr
  408ff4:	ea4c 0c05 	orr.w	ip, ip, r5
  408ff8:	fa00 f40e 	lsl.w	r4, r0, lr
  408ffc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  409000:	0c25      	lsrs	r5, r4, #16
  409002:	fbbc f8fa 	udiv	r8, ip, sl
  409006:	fa1f f987 	uxth.w	r9, r7
  40900a:	fb0a cc18 	mls	ip, sl, r8, ip
  40900e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  409012:	fb08 f309 	mul.w	r3, r8, r9
  409016:	42ab      	cmp	r3, r5
  409018:	d90a      	bls.n	409030 <__udivmoddi4+0x6c>
  40901a:	19ed      	adds	r5, r5, r7
  40901c:	f108 32ff 	add.w	r2, r8, #4294967295
  409020:	f080 8123 	bcs.w	40926a <__udivmoddi4+0x2a6>
  409024:	42ab      	cmp	r3, r5
  409026:	f240 8120 	bls.w	40926a <__udivmoddi4+0x2a6>
  40902a:	f1a8 0802 	sub.w	r8, r8, #2
  40902e:	443d      	add	r5, r7
  409030:	1aed      	subs	r5, r5, r3
  409032:	b2a4      	uxth	r4, r4
  409034:	fbb5 f0fa 	udiv	r0, r5, sl
  409038:	fb0a 5510 	mls	r5, sl, r0, r5
  40903c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  409040:	fb00 f909 	mul.w	r9, r0, r9
  409044:	45a1      	cmp	r9, r4
  409046:	d909      	bls.n	40905c <__udivmoddi4+0x98>
  409048:	19e4      	adds	r4, r4, r7
  40904a:	f100 33ff 	add.w	r3, r0, #4294967295
  40904e:	f080 810a 	bcs.w	409266 <__udivmoddi4+0x2a2>
  409052:	45a1      	cmp	r9, r4
  409054:	f240 8107 	bls.w	409266 <__udivmoddi4+0x2a2>
  409058:	3802      	subs	r0, #2
  40905a:	443c      	add	r4, r7
  40905c:	eba4 0409 	sub.w	r4, r4, r9
  409060:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409064:	2100      	movs	r1, #0
  409066:	2e00      	cmp	r6, #0
  409068:	d061      	beq.n	40912e <__udivmoddi4+0x16a>
  40906a:	fa24 f40e 	lsr.w	r4, r4, lr
  40906e:	2300      	movs	r3, #0
  409070:	6034      	str	r4, [r6, #0]
  409072:	6073      	str	r3, [r6, #4]
  409074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409078:	428b      	cmp	r3, r1
  40907a:	d907      	bls.n	40908c <__udivmoddi4+0xc8>
  40907c:	2e00      	cmp	r6, #0
  40907e:	d054      	beq.n	40912a <__udivmoddi4+0x166>
  409080:	2100      	movs	r1, #0
  409082:	e886 0021 	stmia.w	r6, {r0, r5}
  409086:	4608      	mov	r0, r1
  409088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40908c:	fab3 f183 	clz	r1, r3
  409090:	2900      	cmp	r1, #0
  409092:	f040 808e 	bne.w	4091b2 <__udivmoddi4+0x1ee>
  409096:	42ab      	cmp	r3, r5
  409098:	d302      	bcc.n	4090a0 <__udivmoddi4+0xdc>
  40909a:	4282      	cmp	r2, r0
  40909c:	f200 80fa 	bhi.w	409294 <__udivmoddi4+0x2d0>
  4090a0:	1a84      	subs	r4, r0, r2
  4090a2:	eb65 0503 	sbc.w	r5, r5, r3
  4090a6:	2001      	movs	r0, #1
  4090a8:	46ac      	mov	ip, r5
  4090aa:	2e00      	cmp	r6, #0
  4090ac:	d03f      	beq.n	40912e <__udivmoddi4+0x16a>
  4090ae:	e886 1010 	stmia.w	r6, {r4, ip}
  4090b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4090b6:	b912      	cbnz	r2, 4090be <__udivmoddi4+0xfa>
  4090b8:	2701      	movs	r7, #1
  4090ba:	fbb7 f7f2 	udiv	r7, r7, r2
  4090be:	fab7 fe87 	clz	lr, r7
  4090c2:	f1be 0f00 	cmp.w	lr, #0
  4090c6:	d134      	bne.n	409132 <__udivmoddi4+0x16e>
  4090c8:	1beb      	subs	r3, r5, r7
  4090ca:	0c3a      	lsrs	r2, r7, #16
  4090cc:	fa1f fc87 	uxth.w	ip, r7
  4090d0:	2101      	movs	r1, #1
  4090d2:	fbb3 f8f2 	udiv	r8, r3, r2
  4090d6:	0c25      	lsrs	r5, r4, #16
  4090d8:	fb02 3318 	mls	r3, r2, r8, r3
  4090dc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4090e0:	fb0c f308 	mul.w	r3, ip, r8
  4090e4:	42ab      	cmp	r3, r5
  4090e6:	d907      	bls.n	4090f8 <__udivmoddi4+0x134>
  4090e8:	19ed      	adds	r5, r5, r7
  4090ea:	f108 30ff 	add.w	r0, r8, #4294967295
  4090ee:	d202      	bcs.n	4090f6 <__udivmoddi4+0x132>
  4090f0:	42ab      	cmp	r3, r5
  4090f2:	f200 80d1 	bhi.w	409298 <__udivmoddi4+0x2d4>
  4090f6:	4680      	mov	r8, r0
  4090f8:	1aed      	subs	r5, r5, r3
  4090fa:	b2a3      	uxth	r3, r4
  4090fc:	fbb5 f0f2 	udiv	r0, r5, r2
  409100:	fb02 5510 	mls	r5, r2, r0, r5
  409104:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  409108:	fb0c fc00 	mul.w	ip, ip, r0
  40910c:	45a4      	cmp	ip, r4
  40910e:	d907      	bls.n	409120 <__udivmoddi4+0x15c>
  409110:	19e4      	adds	r4, r4, r7
  409112:	f100 33ff 	add.w	r3, r0, #4294967295
  409116:	d202      	bcs.n	40911e <__udivmoddi4+0x15a>
  409118:	45a4      	cmp	ip, r4
  40911a:	f200 80b8 	bhi.w	40928e <__udivmoddi4+0x2ca>
  40911e:	4618      	mov	r0, r3
  409120:	eba4 040c 	sub.w	r4, r4, ip
  409124:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409128:	e79d      	b.n	409066 <__udivmoddi4+0xa2>
  40912a:	4631      	mov	r1, r6
  40912c:	4630      	mov	r0, r6
  40912e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409132:	f1ce 0420 	rsb	r4, lr, #32
  409136:	fa05 f30e 	lsl.w	r3, r5, lr
  40913a:	fa07 f70e 	lsl.w	r7, r7, lr
  40913e:	fa20 f804 	lsr.w	r8, r0, r4
  409142:	0c3a      	lsrs	r2, r7, #16
  409144:	fa25 f404 	lsr.w	r4, r5, r4
  409148:	ea48 0803 	orr.w	r8, r8, r3
  40914c:	fbb4 f1f2 	udiv	r1, r4, r2
  409150:	ea4f 4518 	mov.w	r5, r8, lsr #16
  409154:	fb02 4411 	mls	r4, r2, r1, r4
  409158:	fa1f fc87 	uxth.w	ip, r7
  40915c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  409160:	fb01 f30c 	mul.w	r3, r1, ip
  409164:	42ab      	cmp	r3, r5
  409166:	fa00 f40e 	lsl.w	r4, r0, lr
  40916a:	d909      	bls.n	409180 <__udivmoddi4+0x1bc>
  40916c:	19ed      	adds	r5, r5, r7
  40916e:	f101 30ff 	add.w	r0, r1, #4294967295
  409172:	f080 808a 	bcs.w	40928a <__udivmoddi4+0x2c6>
  409176:	42ab      	cmp	r3, r5
  409178:	f240 8087 	bls.w	40928a <__udivmoddi4+0x2c6>
  40917c:	3902      	subs	r1, #2
  40917e:	443d      	add	r5, r7
  409180:	1aeb      	subs	r3, r5, r3
  409182:	fa1f f588 	uxth.w	r5, r8
  409186:	fbb3 f0f2 	udiv	r0, r3, r2
  40918a:	fb02 3310 	mls	r3, r2, r0, r3
  40918e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409192:	fb00 f30c 	mul.w	r3, r0, ip
  409196:	42ab      	cmp	r3, r5
  409198:	d907      	bls.n	4091aa <__udivmoddi4+0x1e6>
  40919a:	19ed      	adds	r5, r5, r7
  40919c:	f100 38ff 	add.w	r8, r0, #4294967295
  4091a0:	d26f      	bcs.n	409282 <__udivmoddi4+0x2be>
  4091a2:	42ab      	cmp	r3, r5
  4091a4:	d96d      	bls.n	409282 <__udivmoddi4+0x2be>
  4091a6:	3802      	subs	r0, #2
  4091a8:	443d      	add	r5, r7
  4091aa:	1aeb      	subs	r3, r5, r3
  4091ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4091b0:	e78f      	b.n	4090d2 <__udivmoddi4+0x10e>
  4091b2:	f1c1 0720 	rsb	r7, r1, #32
  4091b6:	fa22 f807 	lsr.w	r8, r2, r7
  4091ba:	408b      	lsls	r3, r1
  4091bc:	fa05 f401 	lsl.w	r4, r5, r1
  4091c0:	ea48 0303 	orr.w	r3, r8, r3
  4091c4:	fa20 fe07 	lsr.w	lr, r0, r7
  4091c8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4091cc:	40fd      	lsrs	r5, r7
  4091ce:	ea4e 0e04 	orr.w	lr, lr, r4
  4091d2:	fbb5 f9fc 	udiv	r9, r5, ip
  4091d6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4091da:	fb0c 5519 	mls	r5, ip, r9, r5
  4091de:	fa1f f883 	uxth.w	r8, r3
  4091e2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4091e6:	fb09 f408 	mul.w	r4, r9, r8
  4091ea:	42ac      	cmp	r4, r5
  4091ec:	fa02 f201 	lsl.w	r2, r2, r1
  4091f0:	fa00 fa01 	lsl.w	sl, r0, r1
  4091f4:	d908      	bls.n	409208 <__udivmoddi4+0x244>
  4091f6:	18ed      	adds	r5, r5, r3
  4091f8:	f109 30ff 	add.w	r0, r9, #4294967295
  4091fc:	d243      	bcs.n	409286 <__udivmoddi4+0x2c2>
  4091fe:	42ac      	cmp	r4, r5
  409200:	d941      	bls.n	409286 <__udivmoddi4+0x2c2>
  409202:	f1a9 0902 	sub.w	r9, r9, #2
  409206:	441d      	add	r5, r3
  409208:	1b2d      	subs	r5, r5, r4
  40920a:	fa1f fe8e 	uxth.w	lr, lr
  40920e:	fbb5 f0fc 	udiv	r0, r5, ip
  409212:	fb0c 5510 	mls	r5, ip, r0, r5
  409216:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40921a:	fb00 f808 	mul.w	r8, r0, r8
  40921e:	45a0      	cmp	r8, r4
  409220:	d907      	bls.n	409232 <__udivmoddi4+0x26e>
  409222:	18e4      	adds	r4, r4, r3
  409224:	f100 35ff 	add.w	r5, r0, #4294967295
  409228:	d229      	bcs.n	40927e <__udivmoddi4+0x2ba>
  40922a:	45a0      	cmp	r8, r4
  40922c:	d927      	bls.n	40927e <__udivmoddi4+0x2ba>
  40922e:	3802      	subs	r0, #2
  409230:	441c      	add	r4, r3
  409232:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  409236:	eba4 0408 	sub.w	r4, r4, r8
  40923a:	fba0 8902 	umull	r8, r9, r0, r2
  40923e:	454c      	cmp	r4, r9
  409240:	46c6      	mov	lr, r8
  409242:	464d      	mov	r5, r9
  409244:	d315      	bcc.n	409272 <__udivmoddi4+0x2ae>
  409246:	d012      	beq.n	40926e <__udivmoddi4+0x2aa>
  409248:	b156      	cbz	r6, 409260 <__udivmoddi4+0x29c>
  40924a:	ebba 030e 	subs.w	r3, sl, lr
  40924e:	eb64 0405 	sbc.w	r4, r4, r5
  409252:	fa04 f707 	lsl.w	r7, r4, r7
  409256:	40cb      	lsrs	r3, r1
  409258:	431f      	orrs	r7, r3
  40925a:	40cc      	lsrs	r4, r1
  40925c:	6037      	str	r7, [r6, #0]
  40925e:	6074      	str	r4, [r6, #4]
  409260:	2100      	movs	r1, #0
  409262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409266:	4618      	mov	r0, r3
  409268:	e6f8      	b.n	40905c <__udivmoddi4+0x98>
  40926a:	4690      	mov	r8, r2
  40926c:	e6e0      	b.n	409030 <__udivmoddi4+0x6c>
  40926e:	45c2      	cmp	sl, r8
  409270:	d2ea      	bcs.n	409248 <__udivmoddi4+0x284>
  409272:	ebb8 0e02 	subs.w	lr, r8, r2
  409276:	eb69 0503 	sbc.w	r5, r9, r3
  40927a:	3801      	subs	r0, #1
  40927c:	e7e4      	b.n	409248 <__udivmoddi4+0x284>
  40927e:	4628      	mov	r0, r5
  409280:	e7d7      	b.n	409232 <__udivmoddi4+0x26e>
  409282:	4640      	mov	r0, r8
  409284:	e791      	b.n	4091aa <__udivmoddi4+0x1e6>
  409286:	4681      	mov	r9, r0
  409288:	e7be      	b.n	409208 <__udivmoddi4+0x244>
  40928a:	4601      	mov	r1, r0
  40928c:	e778      	b.n	409180 <__udivmoddi4+0x1bc>
  40928e:	3802      	subs	r0, #2
  409290:	443c      	add	r4, r7
  409292:	e745      	b.n	409120 <__udivmoddi4+0x15c>
  409294:	4608      	mov	r0, r1
  409296:	e708      	b.n	4090aa <__udivmoddi4+0xe6>
  409298:	f1a8 0802 	sub.w	r8, r8, #2
  40929c:	443d      	add	r5, r7
  40929e:	e72b      	b.n	4090f8 <__udivmoddi4+0x134>

004092a0 <__aeabi_idiv0>:
  4092a0:	4770      	bx	lr
  4092a2:	bf00      	nop
  4092a4:	09632509 	.word	0x09632509
  4092a8:	25097525 	.word	0x25097525
  4092ac:	75250975 	.word	0x75250975
  4092b0:	00000a0d 	.word	0x00000a0d
  4092b4:	454c4449 	.word	0x454c4449
  4092b8:	00000000 	.word	0x00000000
  4092bc:	51726d54 	.word	0x51726d54
  4092c0:	00000000 	.word	0x00000000
  4092c4:	20726d54 	.word	0x20726d54
  4092c8:	00637653 	.word	0x00637653
  4092cc:	46202d2d 	.word	0x46202d2d
  4092d0:	72656572 	.word	0x72656572
  4092d4:	20736f74 	.word	0x20736f74
  4092d8:	6d617845 	.word	0x6d617845
  4092dc:	20656c70 	.word	0x20656c70
  4092e0:	0d0a2d2d 	.word	0x0d0a2d2d
  4092e4:	00000000 	.word	0x00000000
  4092e8:	454d4153 	.word	0x454d4153
  4092ec:	582d3037 	.word	0x582d3037
  4092f0:	00444c50 	.word	0x00444c50
  4092f4:	25202d2d 	.word	0x25202d2d
  4092f8:	000d0a73 	.word	0x000d0a73
  4092fc:	333a3132 	.word	0x333a3132
  409300:	33353a34 	.word	0x33353a34
  409304:	00000000 	.word	0x00000000
  409308:	2079614d 	.word	0x2079614d
  40930c:	32203232 	.word	0x32203232
  409310:	00373130 	.word	0x00373130
  409314:	43202d2d 	.word	0x43202d2d
  409318:	69706d6f 	.word	0x69706d6f
  40931c:	3a64656c 	.word	0x3a64656c
  409320:	20732520 	.word	0x20732520
  409324:	2d207325 	.word	0x2d207325
  409328:	000d0a2d 	.word	0x000d0a2d
  40932c:	696e6f4d 	.word	0x696e6f4d
  409330:	00726f74 	.word	0x00726f74
  409334:	6c696146 	.word	0x6c696146
  409338:	74206465 	.word	0x74206465
  40933c:	7263206f 	.word	0x7263206f
  409340:	65746165 	.word	0x65746165
  409344:	6e6f4d20 	.word	0x6e6f4d20
  409348:	726f7469 	.word	0x726f7469
  40934c:	73617420 	.word	0x73617420
  409350:	000a0d6b 	.word	0x000a0d6b
  409354:	0064654c 	.word	0x0064654c
  409358:	6c696146 	.word	0x6c696146
  40935c:	74206465 	.word	0x74206465
  409360:	7263206f 	.word	0x7263206f
  409364:	65746165 	.word	0x65746165
  409368:	73657420 	.word	0x73657420
  40936c:	656c2074 	.word	0x656c2074
  409370:	61742064 	.word	0x61742064
  409374:	0a0d6b73 	.word	0x0a0d6b73
  409378:	00000000 	.word	0x00000000
  40937c:	3164654c 	.word	0x3164654c
  409380:	00000000 	.word	0x00000000
  409384:	6c696146 	.word	0x6c696146
  409388:	74206465 	.word	0x74206465
  40938c:	7263206f 	.word	0x7263206f
  409390:	65746165 	.word	0x65746165
  409394:	73657420 	.word	0x73657420
  409398:	656c2074 	.word	0x656c2074
  40939c:	74203164 	.word	0x74203164
  4093a0:	0d6b7361 	.word	0x0d6b7361
  4093a4:	0000000a 	.word	0x0000000a
  4093a8:	3264654c 	.word	0x3264654c
  4093ac:	00000000 	.word	0x00000000
  4093b0:	6c696146 	.word	0x6c696146
  4093b4:	74206465 	.word	0x74206465
  4093b8:	7263206f 	.word	0x7263206f
  4093bc:	65746165 	.word	0x65746165
  4093c0:	73657420 	.word	0x73657420
  4093c4:	656c2074 	.word	0x656c2074
  4093c8:	74203264 	.word	0x74203264
  4093cc:	0d6b7361 	.word	0x0d6b7361
  4093d0:	0000000a 	.word	0x0000000a
  4093d4:	3364654c 	.word	0x3364654c
  4093d8:	00000000 	.word	0x00000000
  4093dc:	6c696146 	.word	0x6c696146
  4093e0:	74206465 	.word	0x74206465
  4093e4:	7263206f 	.word	0x7263206f
  4093e8:	65746165 	.word	0x65746165
  4093ec:	73657420 	.word	0x73657420
  4093f0:	656c2074 	.word	0x656c2074
  4093f4:	74203364 	.word	0x74203364
  4093f8:	0d6b7361 	.word	0x0d6b7361
  4093fc:	0000000a 	.word	0x0000000a
  409400:	00747542 	.word	0x00747542
  409404:	6c696146 	.word	0x6c696146
  409408:	74206465 	.word	0x74206465
  40940c:	7263206f 	.word	0x7263206f
  409410:	65746165 	.word	0x65746165
  409414:	73657420 	.word	0x73657420
  409418:	55422074 	.word	0x55422074
  40941c:	61742054 	.word	0x61742054
  409420:	0a0d6b73 	.word	0x0a0d6b73
  409424:	00000000 	.word	0x00000000
  409428:	0a206425 	.word	0x0a206425
  40942c:	00000000 	.word	0x00000000
  409430:	202d2d2d 	.word	0x202d2d2d
  409434:	6b736174 	.word	0x6b736174
  409438:	20232320 	.word	0x20232320
  40943c:	00007525 	.word	0x00007525
  409440:	63617473 	.word	0x63617473
  409444:	766f206b 	.word	0x766f206b
  409448:	6c667265 	.word	0x6c667265
  40944c:	2520776f 	.word	0x2520776f
  409450:	73252078 	.word	0x73252078
  409454:	00000a0d 	.word	0x00000a0d

00409458 <_global_impure_ptr>:
  409458:	20400010 00464e49 00666e69 004e414e     ..@ INF.inf.NAN.
  409468:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  409478:	46454443 00000000 33323130 37363534     CDEF....01234567
  409488:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  409498:	0000296c 00000030                       l)..0...

004094a0 <blanks.7208>:
  4094a0:	20202020 20202020 20202020 20202020                     

004094b0 <zeroes.7209>:
  4094b0:	30303030 30303030 30303030 30303030     0000000000000000

004094c0 <blanks.7202>:
  4094c0:	20202020 20202020 20202020 20202020                     

004094d0 <zeroes.7203>:
  4094d0:	30303030 30303030 30303030 30303030     0000000000000000
  4094e0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  4094f0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00409500 <__mprec_bigtens>:
  409500:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  409510:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  409520:	7f73bf3c 75154fdd                       <.s..O.u

00409528 <__mprec_tens>:
  409528:	00000000 3ff00000 00000000 40240000     .......?......$@
  409538:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  409548:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  409558:	00000000 412e8480 00000000 416312d0     .......A......cA
  409568:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  409578:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  409588:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  409598:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  4095a8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  4095b8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  4095c8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  4095d8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  4095e8:	79d99db4 44ea7843                       ...yCx.D

004095f0 <p05.6040>:
  4095f0:	00000005 00000019 0000007d              ........}...

004095fc <_ctype_>:
  4095fc:	20202000 20202020 28282020 20282828     .         ((((( 
  40960c:	20202020 20202020 20202020 20202020                     
  40961c:	10108820 10101010 10101010 10101010      ...............
  40962c:	04040410 04040404 10040404 10101010     ................
  40963c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40964c:	01010101 01010101 01010101 10101010     ................
  40965c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40966c:	02020202 02020202 02020202 10101010     ................
  40967c:	00000020 00000000 00000000 00000000      ...............
	...

00409700 <_init>:
  409700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409702:	bf00      	nop
  409704:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409706:	bc08      	pop	{r3}
  409708:	469e      	mov	lr, r3
  40970a:	4770      	bx	lr

0040970c <__init_array_start>:
  40970c:	00405c9d 	.word	0x00405c9d

00409710 <__frame_dummy_init_array_entry>:
  409710:	00400165                                e.@.

00409714 <_fini>:
  409714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409716:	bf00      	nop
  409718:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40971a:	bc08      	pop	{r3}
  40971c:	469e      	mov	lr, r3
  40971e:	4770      	bx	lr

00409720 <__fini_array_start>:
  409720:	00400141 	.word	0x00400141
