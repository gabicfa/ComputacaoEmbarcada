
Aula5-Pisca-Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004010  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404010  00404010  00014010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009bc  20400000  00404018  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000e0  204009bc  004049d4  000209bc  2**2
                  ALLOC
  4 .stack        00002004  20400a9c  00404ab4  000209bc  2**0
                  ALLOC
  5 .heap         00000200  20402aa0  00406ab8  000209bc  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   00012d69  00000000  00000000  00020a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002832  00000000  00000000  000337ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003ebc  00000000  00000000  00035fde  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000998  00000000  00000000  00039e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a30  00000000  00000000  0003a832  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001e0da  00000000  00000000  0003b262  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a0c2  00000000  00000000  0005933c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008b004  00000000  00000000  000633fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002038  00000000  00000000  000ee404  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	a0 2a 40 20 f1 08 40 00 ef 08 40 00 ef 08 40 00     .*@ ..@...@...@.
  400010:	ef 08 40 00 ef 08 40 00 ef 08 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	ef 08 40 00 ef 08 40 00 00 00 00 00 ef 08 40 00     ..@...@.......@.
  40003c:	8d 0d 40 00 ef 08 40 00 ef 08 40 00 ef 08 40 00     ..@...@...@...@.
  40004c:	ef 08 40 00 ef 08 40 00 ef 08 40 00 ef 08 40 00     ..@...@...@...@.
  40005c:	ef 08 40 00 ef 08 40 00 00 00 00 00 5d 05 40 00     ..@...@.....].@.
  40006c:	71 05 40 00 85 05 40 00 ef 08 40 00 ef 08 40 00     q.@...@...@...@.
  40007c:	ef 08 40 00 99 05 40 00 ad 05 40 00 ef 08 40 00     ..@...@...@...@.
  40008c:	ef 08 40 00 ef 08 40 00 ef 08 40 00 ef 08 40 00     ..@...@...@...@.
  40009c:	ef 08 40 00 ef 08 40 00 ef 08 40 00 ef 08 40 00     ..@...@...@...@.
  4000ac:	ef 08 40 00 ef 08 40 00 ef 08 40 00 ef 08 40 00     ..@...@...@...@.
  4000bc:	ef 08 40 00 ef 08 40 00 ef 08 40 00 ef 08 40 00     ..@...@...@...@.
  4000cc:	ef 08 40 00 00 00 00 00 ef 08 40 00 00 00 00 00     ..@.......@.....
  4000dc:	ef 08 40 00 ef 08 40 00 ef 08 40 00 ef 08 40 00     ..@...@...@...@.
  4000ec:	ef 08 40 00 ef 08 40 00 ef 08 40 00 ef 08 40 00     ..@...@...@...@.
  4000fc:	ef 08 40 00 ef 08 40 00 ef 08 40 00 ef 08 40 00     ..@...@...@...@.
  40010c:	ef 08 40 00 ef 08 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 ef 08 40 00 ef 08 40 00 ef 08 40 00     ......@...@...@.
  40012c:	ef 08 40 00 ef 08 40 00 00 00 00 00 ef 08 40 00     ..@...@.......@.
  40013c:	ef 08 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009bc 	.word	0x204009bc
  40015c:	00000000 	.word	0x00000000
  400160:	00404018 	.word	0x00404018

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00404018 	.word	0x00404018
  4001a0:	204009c0 	.word	0x204009c0
  4001a4:	00404018 	.word	0x00404018
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400ac5 	.word	0x00400ac5
  4001f8:	004006e1 	.word	0x004006e1
  4001fc:	00400735 	.word	0x00400735
  400200:	00400745 	.word	0x00400745
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400755 	.word	0x00400755
  400210:	00400645 	.word	0x00400645
  400214:	0040067d 	.word	0x0040067d
  400218:	004009b9 	.word	0x004009b9

0040021c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40021c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400220:	b980      	cbnz	r0, 400244 <_read+0x28>
  400222:	460c      	mov	r4, r1
  400224:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400226:	2a00      	cmp	r2, #0
  400228:	dd0f      	ble.n	40024a <_read+0x2e>
  40022a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40022c:	4e08      	ldr	r6, [pc, #32]	; (400250 <_read+0x34>)
  40022e:	4d09      	ldr	r5, [pc, #36]	; (400254 <_read+0x38>)
  400230:	6830      	ldr	r0, [r6, #0]
  400232:	4621      	mov	r1, r4
  400234:	682b      	ldr	r3, [r5, #0]
  400236:	4798      	blx	r3
		ptr++;
  400238:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40023a:	42bc      	cmp	r4, r7
  40023c:	d1f8      	bne.n	400230 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40023e:	4640      	mov	r0, r8
  400240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400244:	f04f 38ff 	mov.w	r8, #4294967295
  400248:	e7f9      	b.n	40023e <_read+0x22>
	for (; len > 0; --len) {
  40024a:	4680      	mov	r8, r0
  40024c:	e7f7      	b.n	40023e <_read+0x22>
  40024e:	bf00      	nop
  400250:	20400a94 	.word	0x20400a94
  400254:	20400a8c 	.word	0x20400a8c

00400258 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400258:	3801      	subs	r0, #1
  40025a:	2802      	cmp	r0, #2
  40025c:	d815      	bhi.n	40028a <_write+0x32>
{
  40025e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400262:	460e      	mov	r6, r1
  400264:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400266:	b19a      	cbz	r2, 400290 <_write+0x38>
  400268:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40026a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002a4 <_write+0x4c>
  40026e:	4f0c      	ldr	r7, [pc, #48]	; (4002a0 <_write+0x48>)
  400270:	f8d8 0000 	ldr.w	r0, [r8]
  400274:	f815 1b01 	ldrb.w	r1, [r5], #1
  400278:	683b      	ldr	r3, [r7, #0]
  40027a:	4798      	blx	r3
  40027c:	2800      	cmp	r0, #0
  40027e:	db0a      	blt.n	400296 <_write+0x3e>
  400280:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400282:	3c01      	subs	r4, #1
  400284:	d1f4      	bne.n	400270 <_write+0x18>
  400286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40028a:	f04f 30ff 	mov.w	r0, #4294967295
  40028e:	4770      	bx	lr
	for (; len != 0; --len) {
  400290:	4610      	mov	r0, r2
  400292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400296:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40029a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40029e:	bf00      	nop
  4002a0:	20400a90 	.word	0x20400a90
  4002a4:	20400a94 	.word	0x20400a94

004002a8 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002ae:	4b5c      	ldr	r3, [pc, #368]	; (400420 <board_init+0x178>)
  4002b0:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002b6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4002ba:	4b5a      	ldr	r3, [pc, #360]	; (400424 <board_init+0x17c>)
  4002bc:	2200      	movs	r2, #0
  4002be:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4002c2:	695a      	ldr	r2, [r3, #20]
  4002c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002c8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4002ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002ce:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4002d2:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4002d6:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4002da:	f007 0007 	and.w	r0, r7, #7
  4002de:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4002e0:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4002e4:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4002e8:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4002ec:	f3bf 8f4f 	dsb	sy
  4002f0:	f04f 34ff 	mov.w	r4, #4294967295
  4002f4:	fa04 fc00 	lsl.w	ip, r4, r0
  4002f8:	fa06 f000 	lsl.w	r0, r6, r0
  4002fc:	fa04 f40e 	lsl.w	r4, r4, lr
  400300:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400304:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400306:	463a      	mov	r2, r7
  400308:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40030a:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  40030e:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400312:	3a01      	subs	r2, #1
  400314:	4423      	add	r3, r4
  400316:	f1b2 3fff 	cmp.w	r2, #4294967295
  40031a:	d1f6      	bne.n	40030a <board_init+0x62>
        } while(sets--);
  40031c:	3e01      	subs	r6, #1
  40031e:	4460      	add	r0, ip
  400320:	f1b6 3fff 	cmp.w	r6, #4294967295
  400324:	d1ef      	bne.n	400306 <board_init+0x5e>
  400326:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40032a:	4b3e      	ldr	r3, [pc, #248]	; (400424 <board_init+0x17c>)
  40032c:	695a      	ldr	r2, [r3, #20]
  40032e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400332:	615a      	str	r2, [r3, #20]
  400334:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400338:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40033c:	4a3a      	ldr	r2, [pc, #232]	; (400428 <board_init+0x180>)
  40033e:	493b      	ldr	r1, [pc, #236]	; (40042c <board_init+0x184>)
  400340:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400342:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400346:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40034c:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400350:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400354:	f022 0201 	bic.w	r2, r2, #1
  400358:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40035c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400360:	f022 0201 	bic.w	r2, r2, #1
  400364:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400368:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40036c:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400370:	200a      	movs	r0, #10
  400372:	4c2f      	ldr	r4, [pc, #188]	; (400430 <board_init+0x188>)
  400374:	47a0      	blx	r4
  400376:	200b      	movs	r0, #11
  400378:	47a0      	blx	r4
  40037a:	200c      	movs	r0, #12
  40037c:	47a0      	blx	r4
  40037e:	2010      	movs	r0, #16
  400380:	47a0      	blx	r4
  400382:	2011      	movs	r0, #17
  400384:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400386:	4b2b      	ldr	r3, [pc, #172]	; (400434 <board_init+0x18c>)
  400388:	f44f 7280 	mov.w	r2, #256	; 0x100
  40038c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40038e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400392:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400394:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400398:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40039c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40039e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003a2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003a8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003aa:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003b2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003b6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003b8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003ba:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003be:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003c0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003d0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003d6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003d8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003de:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003e0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003e4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003e6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003e8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003ec:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003ee:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4003f0:	4a11      	ldr	r2, [pc, #68]	; (400438 <board_init+0x190>)
  4003f2:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4003f6:	f043 0310 	orr.w	r3, r3, #16
  4003fa:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4003fe:	4b0f      	ldr	r3, [pc, #60]	; (40043c <board_init+0x194>)
  400400:	2210      	movs	r2, #16
  400402:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400404:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400408:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40040a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40040c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400410:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400412:	4311      	orrs	r1, r2
  400414:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400416:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400418:	4311      	orrs	r1, r2
  40041a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40041c:	605a      	str	r2, [r3, #4]
  40041e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400420:	400e1850 	.word	0x400e1850
  400424:	e000ed00 	.word	0xe000ed00
  400428:	400e0c00 	.word	0x400e0c00
  40042c:	5a00080c 	.word	0x5a00080c
  400430:	00400765 	.word	0x00400765
  400434:	400e1200 	.word	0x400e1200
  400438:	40088000 	.word	0x40088000
  40043c:	400e1000 	.word	0x400e1000

00400440 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400440:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400444:	0053      	lsls	r3, r2, #1
  400446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40044a:	fbb2 f2f3 	udiv	r2, r2, r3
  40044e:	3a01      	subs	r2, #1
  400450:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400454:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400458:	4770      	bx	lr

0040045a <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  40045a:	f012 0f10 	tst.w	r2, #16
  40045e:	d012      	beq.n	400486 <pio_configure_interrupt+0x2c>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400460:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400464:	f012 0f20 	tst.w	r2, #32
  400468:	d007      	beq.n	40047a <pio_configure_interrupt+0x20>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40046a:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40046e:	f012 0f40 	tst.w	r2, #64	; 0x40
  400472:	d005      	beq.n	400480 <pio_configure_interrupt+0x26>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400474:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400478:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  40047a:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  40047e:	e7f6      	b.n	40046e <pio_configure_interrupt+0x14>
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  400480:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400484:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400486:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40048a:	4770      	bx	lr

0040048c <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  40048c:	6401      	str	r1, [r0, #64]	; 0x40
  40048e:	4770      	bx	lr

00400490 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400490:	6441      	str	r1, [r0, #68]	; 0x44
  400492:	4770      	bx	lr

00400494 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400494:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400496:	4770      	bx	lr

00400498 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400498:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40049a:	4770      	bx	lr

0040049c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40049c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004a0:	4604      	mov	r4, r0
  4004a2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4004a4:	4b0e      	ldr	r3, [pc, #56]	; (4004e0 <pio_handler_process+0x44>)
  4004a6:	4798      	blx	r3
  4004a8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4004aa:	4620      	mov	r0, r4
  4004ac:	4b0d      	ldr	r3, [pc, #52]	; (4004e4 <pio_handler_process+0x48>)
  4004ae:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4004b0:	4005      	ands	r5, r0
  4004b2:	d013      	beq.n	4004dc <pio_handler_process+0x40>
  4004b4:	4c0c      	ldr	r4, [pc, #48]	; (4004e8 <pio_handler_process+0x4c>)
  4004b6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4004ba:	e003      	b.n	4004c4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4004bc:	42b4      	cmp	r4, r6
  4004be:	d00d      	beq.n	4004dc <pio_handler_process+0x40>
  4004c0:	3410      	adds	r4, #16
		while (status != 0) {
  4004c2:	b15d      	cbz	r5, 4004dc <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4004c4:	6820      	ldr	r0, [r4, #0]
  4004c6:	4540      	cmp	r0, r8
  4004c8:	d1f8      	bne.n	4004bc <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4004ca:	6861      	ldr	r1, [r4, #4]
  4004cc:	4229      	tst	r1, r5
  4004ce:	d0f5      	beq.n	4004bc <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4004d0:	68e3      	ldr	r3, [r4, #12]
  4004d2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4004d4:	6863      	ldr	r3, [r4, #4]
  4004d6:	ea25 0503 	bic.w	r5, r5, r3
  4004da:	e7ef      	b.n	4004bc <pio_handler_process+0x20>
  4004dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004e0:	00400495 	.word	0x00400495
  4004e4:	00400499 	.word	0x00400499
  4004e8:	204009d8 	.word	0x204009d8

004004ec <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4004ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4004ee:	4c18      	ldr	r4, [pc, #96]	; (400550 <pio_handler_set+0x64>)
  4004f0:	6826      	ldr	r6, [r4, #0]
  4004f2:	2e06      	cmp	r6, #6
  4004f4:	d82a      	bhi.n	40054c <pio_handler_set+0x60>
  4004f6:	f04f 0c00 	mov.w	ip, #0
  4004fa:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4004fc:	4f15      	ldr	r7, [pc, #84]	; (400554 <pio_handler_set+0x68>)
  4004fe:	e004      	b.n	40050a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400500:	3401      	adds	r4, #1
  400502:	b2e4      	uxtb	r4, r4
  400504:	46a4      	mov	ip, r4
  400506:	42a6      	cmp	r6, r4
  400508:	d309      	bcc.n	40051e <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40050a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40050c:	0125      	lsls	r5, r4, #4
  40050e:	597d      	ldr	r5, [r7, r5]
  400510:	428d      	cmp	r5, r1
  400512:	d1f5      	bne.n	400500 <pio_handler_set+0x14>
  400514:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400518:	686d      	ldr	r5, [r5, #4]
  40051a:	4295      	cmp	r5, r2
  40051c:	d1f0      	bne.n	400500 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40051e:	4d0d      	ldr	r5, [pc, #52]	; (400554 <pio_handler_set+0x68>)
  400520:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400524:	eb05 040e 	add.w	r4, r5, lr
  400528:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  40052c:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  40052e:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400530:	9906      	ldr	r1, [sp, #24]
  400532:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400534:	3601      	adds	r6, #1
  400536:	4566      	cmp	r6, ip
  400538:	d005      	beq.n	400546 <pio_handler_set+0x5a>
  40053a:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40053c:	461a      	mov	r2, r3
  40053e:	4b06      	ldr	r3, [pc, #24]	; (400558 <pio_handler_set+0x6c>)
  400540:	4798      	blx	r3

	return 0;
  400542:	2000      	movs	r0, #0
  400544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400546:	4902      	ldr	r1, [pc, #8]	; (400550 <pio_handler_set+0x64>)
  400548:	600e      	str	r6, [r1, #0]
  40054a:	e7f6      	b.n	40053a <pio_handler_set+0x4e>
		return 1;
  40054c:	2001      	movs	r0, #1
}
  40054e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400550:	20400a48 	.word	0x20400a48
  400554:	204009d8 	.word	0x204009d8
  400558:	0040045b 	.word	0x0040045b

0040055c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40055c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40055e:	210a      	movs	r1, #10
  400560:	4801      	ldr	r0, [pc, #4]	; (400568 <PIOA_Handler+0xc>)
  400562:	4b02      	ldr	r3, [pc, #8]	; (40056c <PIOA_Handler+0x10>)
  400564:	4798      	blx	r3
  400566:	bd08      	pop	{r3, pc}
  400568:	400e0e00 	.word	0x400e0e00
  40056c:	0040049d 	.word	0x0040049d

00400570 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400570:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400572:	210b      	movs	r1, #11
  400574:	4801      	ldr	r0, [pc, #4]	; (40057c <PIOB_Handler+0xc>)
  400576:	4b02      	ldr	r3, [pc, #8]	; (400580 <PIOB_Handler+0x10>)
  400578:	4798      	blx	r3
  40057a:	bd08      	pop	{r3, pc}
  40057c:	400e1000 	.word	0x400e1000
  400580:	0040049d 	.word	0x0040049d

00400584 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400584:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400586:	210c      	movs	r1, #12
  400588:	4801      	ldr	r0, [pc, #4]	; (400590 <PIOC_Handler+0xc>)
  40058a:	4b02      	ldr	r3, [pc, #8]	; (400594 <PIOC_Handler+0x10>)
  40058c:	4798      	blx	r3
  40058e:	bd08      	pop	{r3, pc}
  400590:	400e1200 	.word	0x400e1200
  400594:	0040049d 	.word	0x0040049d

00400598 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400598:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40059a:	2110      	movs	r1, #16
  40059c:	4801      	ldr	r0, [pc, #4]	; (4005a4 <PIOD_Handler+0xc>)
  40059e:	4b02      	ldr	r3, [pc, #8]	; (4005a8 <PIOD_Handler+0x10>)
  4005a0:	4798      	blx	r3
  4005a2:	bd08      	pop	{r3, pc}
  4005a4:	400e1400 	.word	0x400e1400
  4005a8:	0040049d 	.word	0x0040049d

004005ac <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4005ac:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4005ae:	2111      	movs	r1, #17
  4005b0:	4801      	ldr	r0, [pc, #4]	; (4005b8 <PIOE_Handler+0xc>)
  4005b2:	4b02      	ldr	r3, [pc, #8]	; (4005bc <PIOE_Handler+0x10>)
  4005b4:	4798      	blx	r3
  4005b6:	bd08      	pop	{r3, pc}
  4005b8:	400e1600 	.word	0x400e1600
  4005bc:	0040049d 	.word	0x0040049d

004005c0 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  4005c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4005c2:	4606      	mov	r6, r0
  4005c4:	460d      	mov	r5, r1
  4005c6:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  4005c8:	4b17      	ldr	r3, [pc, #92]	; (400628 <pio_handler_set_priority+0x68>)
  4005ca:	4798      	blx	r3
  4005cc:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  4005ce:	f04f 31ff 	mov.w	r1, #4294967295
  4005d2:	4630      	mov	r0, r6
  4005d4:	4b15      	ldr	r3, [pc, #84]	; (40062c <pio_handler_set_priority+0x6c>)
  4005d6:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  4005d8:	4630      	mov	r0, r6
  4005da:	4b15      	ldr	r3, [pc, #84]	; (400630 <pio_handler_set_priority+0x70>)
  4005dc:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4005de:	fa5f fe85 	uxtb.w	lr, r5
  4005e2:	f00e 031f 	and.w	r3, lr, #31
  4005e6:	2201      	movs	r2, #1
  4005e8:	fa02 f303 	lsl.w	r3, r2, r3
  4005ec:	0968      	lsrs	r0, r5, #5
  4005ee:	4911      	ldr	r1, [pc, #68]	; (400634 <pio_handler_set_priority+0x74>)
  4005f0:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  4005f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4005f8:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  if(IRQn < 0) {
  4005fc:	2d00      	cmp	r5, #0
  4005fe:	db0a      	blt.n	400616 <pio_handler_set_priority+0x56>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400600:	0164      	lsls	r4, r4, #5
  400602:	b2e4      	uxtb	r4, r4
  400604:	4a0c      	ldr	r2, [pc, #48]	; (400638 <pio_handler_set_priority+0x78>)
  400606:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400608:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  40060c:	4639      	mov	r1, r7
  40060e:	4630      	mov	r0, r6
  400610:	4b0a      	ldr	r3, [pc, #40]	; (40063c <pio_handler_set_priority+0x7c>)
  400612:	4798      	blx	r3
  400614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400616:	f00e 0e0f 	and.w	lr, lr, #15
  40061a:	0164      	lsls	r4, r4, #5
  40061c:	b2e4      	uxtb	r4, r4
  40061e:	4a08      	ldr	r2, [pc, #32]	; (400640 <pio_handler_set_priority+0x80>)
  400620:	f802 400e 	strb.w	r4, [r2, lr]
  400624:	e7f0      	b.n	400608 <pio_handler_set_priority+0x48>
  400626:	bf00      	nop
  400628:	00400499 	.word	0x00400499
  40062c:	00400491 	.word	0x00400491
  400630:	00400495 	.word	0x00400495
  400634:	e000e100 	.word	0xe000e100
  400638:	e000e400 	.word	0xe000e400
  40063c:	0040048d 	.word	0x0040048d
  400640:	e000ed14 	.word	0xe000ed14

00400644 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400644:	2803      	cmp	r0, #3
  400646:	d011      	beq.n	40066c <pmc_mck_set_division+0x28>
  400648:	2804      	cmp	r0, #4
  40064a:	d012      	beq.n	400672 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40064c:	2802      	cmp	r0, #2
  40064e:	bf0c      	ite	eq
  400650:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400654:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400656:	4a08      	ldr	r2, [pc, #32]	; (400678 <pmc_mck_set_division+0x34>)
  400658:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40065a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40065e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400660:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400662:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400664:	f013 0f08 	tst.w	r3, #8
  400668:	d0fb      	beq.n	400662 <pmc_mck_set_division+0x1e>
}
  40066a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40066c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400670:	e7f1      	b.n	400656 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400672:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400676:	e7ee      	b.n	400656 <pmc_mck_set_division+0x12>
  400678:	400e0600 	.word	0x400e0600

0040067c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40067c:	4a17      	ldr	r2, [pc, #92]	; (4006dc <pmc_switch_mck_to_pllack+0x60>)
  40067e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400684:	4318      	orrs	r0, r3
  400686:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400688:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40068a:	f013 0f08 	tst.w	r3, #8
  40068e:	d10a      	bne.n	4006a6 <pmc_switch_mck_to_pllack+0x2a>
  400690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400694:	4911      	ldr	r1, [pc, #68]	; (4006dc <pmc_switch_mck_to_pllack+0x60>)
  400696:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400698:	f012 0f08 	tst.w	r2, #8
  40069c:	d103      	bne.n	4006a6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40069e:	3b01      	subs	r3, #1
  4006a0:	d1f9      	bne.n	400696 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4006a2:	2001      	movs	r0, #1
  4006a4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4006a6:	4a0d      	ldr	r2, [pc, #52]	; (4006dc <pmc_switch_mck_to_pllack+0x60>)
  4006a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006aa:	f023 0303 	bic.w	r3, r3, #3
  4006ae:	f043 0302 	orr.w	r3, r3, #2
  4006b2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006b6:	f013 0f08 	tst.w	r3, #8
  4006ba:	d10a      	bne.n	4006d2 <pmc_switch_mck_to_pllack+0x56>
  4006bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4006c0:	4906      	ldr	r1, [pc, #24]	; (4006dc <pmc_switch_mck_to_pllack+0x60>)
  4006c2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4006c4:	f012 0f08 	tst.w	r2, #8
  4006c8:	d105      	bne.n	4006d6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4006ca:	3b01      	subs	r3, #1
  4006cc:	d1f9      	bne.n	4006c2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4006ce:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4006d0:	4770      	bx	lr
	return 0;
  4006d2:	2000      	movs	r0, #0
  4006d4:	4770      	bx	lr
  4006d6:	2000      	movs	r0, #0
  4006d8:	4770      	bx	lr
  4006da:	bf00      	nop
  4006dc:	400e0600 	.word	0x400e0600

004006e0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4006e0:	b9a0      	cbnz	r0, 40070c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4006e2:	480e      	ldr	r0, [pc, #56]	; (40071c <pmc_switch_mainck_to_xtal+0x3c>)
  4006e4:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4006e6:	0209      	lsls	r1, r1, #8
  4006e8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4006ea:	4a0d      	ldr	r2, [pc, #52]	; (400720 <pmc_switch_mainck_to_xtal+0x40>)
  4006ec:	401a      	ands	r2, r3
  4006ee:	4b0d      	ldr	r3, [pc, #52]	; (400724 <pmc_switch_mainck_to_xtal+0x44>)
  4006f0:	4313      	orrs	r3, r2
  4006f2:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4006f4:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4006f6:	4602      	mov	r2, r0
  4006f8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006fa:	f013 0f01 	tst.w	r3, #1
  4006fe:	d0fb      	beq.n	4006f8 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400700:	4a06      	ldr	r2, [pc, #24]	; (40071c <pmc_switch_mainck_to_xtal+0x3c>)
  400702:	6a11      	ldr	r1, [r2, #32]
  400704:	4b08      	ldr	r3, [pc, #32]	; (400728 <pmc_switch_mainck_to_xtal+0x48>)
  400706:	430b      	orrs	r3, r1
  400708:	6213      	str	r3, [r2, #32]
  40070a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40070c:	4903      	ldr	r1, [pc, #12]	; (40071c <pmc_switch_mainck_to_xtal+0x3c>)
  40070e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400710:	4a06      	ldr	r2, [pc, #24]	; (40072c <pmc_switch_mainck_to_xtal+0x4c>)
  400712:	401a      	ands	r2, r3
  400714:	4b06      	ldr	r3, [pc, #24]	; (400730 <pmc_switch_mainck_to_xtal+0x50>)
  400716:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400718:	620b      	str	r3, [r1, #32]
  40071a:	4770      	bx	lr
  40071c:	400e0600 	.word	0x400e0600
  400720:	ffc8fffc 	.word	0xffc8fffc
  400724:	00370001 	.word	0x00370001
  400728:	01370000 	.word	0x01370000
  40072c:	fec8fffc 	.word	0xfec8fffc
  400730:	01370002 	.word	0x01370002

00400734 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400734:	4b02      	ldr	r3, [pc, #8]	; (400740 <pmc_osc_is_ready_mainck+0xc>)
  400736:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400738:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40073c:	4770      	bx	lr
  40073e:	bf00      	nop
  400740:	400e0600 	.word	0x400e0600

00400744 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400744:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400748:	4b01      	ldr	r3, [pc, #4]	; (400750 <pmc_disable_pllack+0xc>)
  40074a:	629a      	str	r2, [r3, #40]	; 0x28
  40074c:	4770      	bx	lr
  40074e:	bf00      	nop
  400750:	400e0600 	.word	0x400e0600

00400754 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400754:	4b02      	ldr	r3, [pc, #8]	; (400760 <pmc_is_locked_pllack+0xc>)
  400756:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400758:	f000 0002 	and.w	r0, r0, #2
  40075c:	4770      	bx	lr
  40075e:	bf00      	nop
  400760:	400e0600 	.word	0x400e0600

00400764 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400764:	283f      	cmp	r0, #63	; 0x3f
  400766:	d81e      	bhi.n	4007a6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400768:	281f      	cmp	r0, #31
  40076a:	d80c      	bhi.n	400786 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40076c:	4b11      	ldr	r3, [pc, #68]	; (4007b4 <pmc_enable_periph_clk+0x50>)
  40076e:	699a      	ldr	r2, [r3, #24]
  400770:	2301      	movs	r3, #1
  400772:	4083      	lsls	r3, r0
  400774:	4393      	bics	r3, r2
  400776:	d018      	beq.n	4007aa <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400778:	2301      	movs	r3, #1
  40077a:	fa03 f000 	lsl.w	r0, r3, r0
  40077e:	4b0d      	ldr	r3, [pc, #52]	; (4007b4 <pmc_enable_periph_clk+0x50>)
  400780:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400782:	2000      	movs	r0, #0
  400784:	4770      	bx	lr
		ul_id -= 32;
  400786:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400788:	4b0a      	ldr	r3, [pc, #40]	; (4007b4 <pmc_enable_periph_clk+0x50>)
  40078a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40078e:	2301      	movs	r3, #1
  400790:	4083      	lsls	r3, r0
  400792:	4393      	bics	r3, r2
  400794:	d00b      	beq.n	4007ae <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400796:	2301      	movs	r3, #1
  400798:	fa03 f000 	lsl.w	r0, r3, r0
  40079c:	4b05      	ldr	r3, [pc, #20]	; (4007b4 <pmc_enable_periph_clk+0x50>)
  40079e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4007a2:	2000      	movs	r0, #0
  4007a4:	4770      	bx	lr
		return 1;
  4007a6:	2001      	movs	r0, #1
  4007a8:	4770      	bx	lr
	return 0;
  4007aa:	2000      	movs	r0, #0
  4007ac:	4770      	bx	lr
  4007ae:	2000      	movs	r0, #0
}
  4007b0:	4770      	bx	lr
  4007b2:	bf00      	nop
  4007b4:	400e0600 	.word	0x400e0600

004007b8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4007b8:	6943      	ldr	r3, [r0, #20]
  4007ba:	f013 0f02 	tst.w	r3, #2
  4007be:	d002      	beq.n	4007c6 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4007c0:	61c1      	str	r1, [r0, #28]
	return 0;
  4007c2:	2000      	movs	r0, #0
  4007c4:	4770      	bx	lr
		return 1;
  4007c6:	2001      	movs	r0, #1
}
  4007c8:	4770      	bx	lr

004007ca <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4007ca:	6943      	ldr	r3, [r0, #20]
  4007cc:	f013 0f01 	tst.w	r3, #1
  4007d0:	d003      	beq.n	4007da <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4007d2:	6983      	ldr	r3, [r0, #24]
  4007d4:	700b      	strb	r3, [r1, #0]
	return 0;
  4007d6:	2000      	movs	r0, #0
  4007d8:	4770      	bx	lr
		return 1;
  4007da:	2001      	movs	r0, #1
}
  4007dc:	4770      	bx	lr

004007de <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4007de:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4007e0:	010b      	lsls	r3, r1, #4
  4007e2:	4293      	cmp	r3, r2
  4007e4:	d914      	bls.n	400810 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4007e6:	00c9      	lsls	r1, r1, #3
  4007e8:	084b      	lsrs	r3, r1, #1
  4007ea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4007ee:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4007f2:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4007f4:	1e5c      	subs	r4, r3, #1
  4007f6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4007fa:	428c      	cmp	r4, r1
  4007fc:	d901      	bls.n	400802 <usart_set_async_baudrate+0x24>
		return 1;
  4007fe:	2001      	movs	r0, #1
  400800:	e017      	b.n	400832 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400802:	6841      	ldr	r1, [r0, #4]
  400804:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400808:	6041      	str	r1, [r0, #4]
  40080a:	e00c      	b.n	400826 <usart_set_async_baudrate+0x48>
		return 1;
  40080c:	2001      	movs	r0, #1
  40080e:	e010      	b.n	400832 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400810:	0859      	lsrs	r1, r3, #1
  400812:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400816:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40081a:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40081c:	1e5c      	subs	r4, r3, #1
  40081e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400822:	428c      	cmp	r4, r1
  400824:	d8f2      	bhi.n	40080c <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400826:	0412      	lsls	r2, r2, #16
  400828:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40082c:	431a      	orrs	r2, r3
  40082e:	6202      	str	r2, [r0, #32]

	return 0;
  400830:	2000      	movs	r0, #0
}
  400832:	f85d 4b04 	ldr.w	r4, [sp], #4
  400836:	4770      	bx	lr

00400838 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400838:	4b08      	ldr	r3, [pc, #32]	; (40085c <usart_reset+0x24>)
  40083a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40083e:	2300      	movs	r3, #0
  400840:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400842:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400844:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400846:	2388      	movs	r3, #136	; 0x88
  400848:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40084a:	2324      	movs	r3, #36	; 0x24
  40084c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40084e:	f44f 7380 	mov.w	r3, #256	; 0x100
  400852:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400854:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400858:	6003      	str	r3, [r0, #0]
  40085a:	4770      	bx	lr
  40085c:	55534100 	.word	0x55534100

00400860 <usart_init_rs232>:
{
  400860:	b570      	push	{r4, r5, r6, lr}
  400862:	4605      	mov	r5, r0
  400864:	460c      	mov	r4, r1
  400866:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400868:	4b0f      	ldr	r3, [pc, #60]	; (4008a8 <usart_init_rs232+0x48>)
  40086a:	4798      	blx	r3
	ul_reg_val = 0;
  40086c:	2200      	movs	r2, #0
  40086e:	4b0f      	ldr	r3, [pc, #60]	; (4008ac <usart_init_rs232+0x4c>)
  400870:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400872:	b1a4      	cbz	r4, 40089e <usart_init_rs232+0x3e>
  400874:	4632      	mov	r2, r6
  400876:	6821      	ldr	r1, [r4, #0]
  400878:	4628      	mov	r0, r5
  40087a:	4b0d      	ldr	r3, [pc, #52]	; (4008b0 <usart_init_rs232+0x50>)
  40087c:	4798      	blx	r3
  40087e:	4602      	mov	r2, r0
  400880:	b978      	cbnz	r0, 4008a2 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400882:	6863      	ldr	r3, [r4, #4]
  400884:	68a1      	ldr	r1, [r4, #8]
  400886:	430b      	orrs	r3, r1
  400888:	6921      	ldr	r1, [r4, #16]
  40088a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40088c:	68e1      	ldr	r1, [r4, #12]
  40088e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400890:	4906      	ldr	r1, [pc, #24]	; (4008ac <usart_init_rs232+0x4c>)
  400892:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400894:	6869      	ldr	r1, [r5, #4]
  400896:	430b      	orrs	r3, r1
  400898:	606b      	str	r3, [r5, #4]
}
  40089a:	4610      	mov	r0, r2
  40089c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  40089e:	2201      	movs	r2, #1
  4008a0:	e7fb      	b.n	40089a <usart_init_rs232+0x3a>
  4008a2:	2201      	movs	r2, #1
  4008a4:	e7f9      	b.n	40089a <usart_init_rs232+0x3a>
  4008a6:	bf00      	nop
  4008a8:	00400839 	.word	0x00400839
  4008ac:	20400a4c 	.word	0x20400a4c
  4008b0:	004007df 	.word	0x004007df

004008b4 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4008b4:	2340      	movs	r3, #64	; 0x40
  4008b6:	6003      	str	r3, [r0, #0]
  4008b8:	4770      	bx	lr

004008ba <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4008ba:	2310      	movs	r3, #16
  4008bc:	6003      	str	r3, [r0, #0]
  4008be:	4770      	bx	lr

004008c0 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4008c0:	6943      	ldr	r3, [r0, #20]
  4008c2:	f013 0f02 	tst.w	r3, #2
  4008c6:	d004      	beq.n	4008d2 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4008c8:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4008cc:	61c1      	str	r1, [r0, #28]
	return 0;
  4008ce:	2000      	movs	r0, #0
  4008d0:	4770      	bx	lr
		return 1;
  4008d2:	2001      	movs	r0, #1
}
  4008d4:	4770      	bx	lr

004008d6 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4008d6:	6943      	ldr	r3, [r0, #20]
  4008d8:	f013 0f01 	tst.w	r3, #1
  4008dc:	d005      	beq.n	4008ea <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4008de:	6983      	ldr	r3, [r0, #24]
  4008e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4008e4:	600b      	str	r3, [r1, #0]
	return 0;
  4008e6:	2000      	movs	r0, #0
  4008e8:	4770      	bx	lr
		return 1;
  4008ea:	2001      	movs	r0, #1
}
  4008ec:	4770      	bx	lr

004008ee <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4008ee:	e7fe      	b.n	4008ee <Dummy_Handler>

004008f0 <Reset_Handler>:
{
  4008f0:	b500      	push	{lr}
  4008f2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4008f4:	4b25      	ldr	r3, [pc, #148]	; (40098c <Reset_Handler+0x9c>)
  4008f6:	4a26      	ldr	r2, [pc, #152]	; (400990 <Reset_Handler+0xa0>)
  4008f8:	429a      	cmp	r2, r3
  4008fa:	d010      	beq.n	40091e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4008fc:	4b25      	ldr	r3, [pc, #148]	; (400994 <Reset_Handler+0xa4>)
  4008fe:	4a23      	ldr	r2, [pc, #140]	; (40098c <Reset_Handler+0x9c>)
  400900:	429a      	cmp	r2, r3
  400902:	d20c      	bcs.n	40091e <Reset_Handler+0x2e>
  400904:	3b01      	subs	r3, #1
  400906:	1a9b      	subs	r3, r3, r2
  400908:	f023 0303 	bic.w	r3, r3, #3
  40090c:	3304      	adds	r3, #4
  40090e:	4413      	add	r3, r2
  400910:	491f      	ldr	r1, [pc, #124]	; (400990 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400912:	f851 0b04 	ldr.w	r0, [r1], #4
  400916:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40091a:	429a      	cmp	r2, r3
  40091c:	d1f9      	bne.n	400912 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40091e:	4b1e      	ldr	r3, [pc, #120]	; (400998 <Reset_Handler+0xa8>)
  400920:	4a1e      	ldr	r2, [pc, #120]	; (40099c <Reset_Handler+0xac>)
  400922:	429a      	cmp	r2, r3
  400924:	d20a      	bcs.n	40093c <Reset_Handler+0x4c>
  400926:	3b01      	subs	r3, #1
  400928:	1a9b      	subs	r3, r3, r2
  40092a:	f023 0303 	bic.w	r3, r3, #3
  40092e:	3304      	adds	r3, #4
  400930:	4413      	add	r3, r2
                *pDest++ = 0;
  400932:	2100      	movs	r1, #0
  400934:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400938:	4293      	cmp	r3, r2
  40093a:	d1fb      	bne.n	400934 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40093c:	4a18      	ldr	r2, [pc, #96]	; (4009a0 <Reset_Handler+0xb0>)
  40093e:	4b19      	ldr	r3, [pc, #100]	; (4009a4 <Reset_Handler+0xb4>)
  400940:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400944:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400946:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40094a:	fab3 f383 	clz	r3, r3
  40094e:	095b      	lsrs	r3, r3, #5
  400950:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400952:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400954:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400958:	2200      	movs	r2, #0
  40095a:	4b13      	ldr	r3, [pc, #76]	; (4009a8 <Reset_Handler+0xb8>)
  40095c:	701a      	strb	r2, [r3, #0]
	return flags;
  40095e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400960:	4a12      	ldr	r2, [pc, #72]	; (4009ac <Reset_Handler+0xbc>)
  400962:	6813      	ldr	r3, [r2, #0]
  400964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400968:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40096a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40096e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400972:	b129      	cbz	r1, 400980 <Reset_Handler+0x90>
		cpu_irq_enable();
  400974:	2201      	movs	r2, #1
  400976:	4b0c      	ldr	r3, [pc, #48]	; (4009a8 <Reset_Handler+0xb8>)
  400978:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40097a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40097e:	b662      	cpsie	i
        __libc_init_array();
  400980:	4b0b      	ldr	r3, [pc, #44]	; (4009b0 <Reset_Handler+0xc0>)
  400982:	4798      	blx	r3
        main();
  400984:	4b0b      	ldr	r3, [pc, #44]	; (4009b4 <Reset_Handler+0xc4>)
  400986:	4798      	blx	r3
  400988:	e7fe      	b.n	400988 <Reset_Handler+0x98>
  40098a:	bf00      	nop
  40098c:	20400000 	.word	0x20400000
  400990:	00404018 	.word	0x00404018
  400994:	204009bc 	.word	0x204009bc
  400998:	20400a9c 	.word	0x20400a9c
  40099c:	204009bc 	.word	0x204009bc
  4009a0:	e000ed00 	.word	0xe000ed00
  4009a4:	00400000 	.word	0x00400000
  4009a8:	20400000 	.word	0x20400000
  4009ac:	e000ed88 	.word	0xe000ed88
  4009b0:	00400f49 	.word	0x00400f49
  4009b4:	00400d9d 	.word	0x00400d9d

004009b8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4009b8:	4b3b      	ldr	r3, [pc, #236]	; (400aa8 <SystemCoreClockUpdate+0xf0>)
  4009ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009bc:	f003 0303 	and.w	r3, r3, #3
  4009c0:	2b01      	cmp	r3, #1
  4009c2:	d01d      	beq.n	400a00 <SystemCoreClockUpdate+0x48>
  4009c4:	b183      	cbz	r3, 4009e8 <SystemCoreClockUpdate+0x30>
  4009c6:	2b02      	cmp	r3, #2
  4009c8:	d036      	beq.n	400a38 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4009ca:	4b37      	ldr	r3, [pc, #220]	; (400aa8 <SystemCoreClockUpdate+0xf0>)
  4009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009d2:	2b70      	cmp	r3, #112	; 0x70
  4009d4:	d05f      	beq.n	400a96 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4009d6:	4b34      	ldr	r3, [pc, #208]	; (400aa8 <SystemCoreClockUpdate+0xf0>)
  4009d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4009da:	4934      	ldr	r1, [pc, #208]	; (400aac <SystemCoreClockUpdate+0xf4>)
  4009dc:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4009e0:	680b      	ldr	r3, [r1, #0]
  4009e2:	40d3      	lsrs	r3, r2
  4009e4:	600b      	str	r3, [r1, #0]
  4009e6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4009e8:	4b31      	ldr	r3, [pc, #196]	; (400ab0 <SystemCoreClockUpdate+0xf8>)
  4009ea:	695b      	ldr	r3, [r3, #20]
  4009ec:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4009f0:	bf14      	ite	ne
  4009f2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4009f6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4009fa:	4b2c      	ldr	r3, [pc, #176]	; (400aac <SystemCoreClockUpdate+0xf4>)
  4009fc:	601a      	str	r2, [r3, #0]
  4009fe:	e7e4      	b.n	4009ca <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400a00:	4b29      	ldr	r3, [pc, #164]	; (400aa8 <SystemCoreClockUpdate+0xf0>)
  400a02:	6a1b      	ldr	r3, [r3, #32]
  400a04:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a08:	d003      	beq.n	400a12 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400a0a:	4a2a      	ldr	r2, [pc, #168]	; (400ab4 <SystemCoreClockUpdate+0xfc>)
  400a0c:	4b27      	ldr	r3, [pc, #156]	; (400aac <SystemCoreClockUpdate+0xf4>)
  400a0e:	601a      	str	r2, [r3, #0]
  400a10:	e7db      	b.n	4009ca <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400a12:	4a29      	ldr	r2, [pc, #164]	; (400ab8 <SystemCoreClockUpdate+0x100>)
  400a14:	4b25      	ldr	r3, [pc, #148]	; (400aac <SystemCoreClockUpdate+0xf4>)
  400a16:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400a18:	4b23      	ldr	r3, [pc, #140]	; (400aa8 <SystemCoreClockUpdate+0xf0>)
  400a1a:	6a1b      	ldr	r3, [r3, #32]
  400a1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a20:	2b10      	cmp	r3, #16
  400a22:	d005      	beq.n	400a30 <SystemCoreClockUpdate+0x78>
  400a24:	2b20      	cmp	r3, #32
  400a26:	d1d0      	bne.n	4009ca <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400a28:	4a22      	ldr	r2, [pc, #136]	; (400ab4 <SystemCoreClockUpdate+0xfc>)
  400a2a:	4b20      	ldr	r3, [pc, #128]	; (400aac <SystemCoreClockUpdate+0xf4>)
  400a2c:	601a      	str	r2, [r3, #0]
          break;
  400a2e:	e7cc      	b.n	4009ca <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400a30:	4a22      	ldr	r2, [pc, #136]	; (400abc <SystemCoreClockUpdate+0x104>)
  400a32:	4b1e      	ldr	r3, [pc, #120]	; (400aac <SystemCoreClockUpdate+0xf4>)
  400a34:	601a      	str	r2, [r3, #0]
          break;
  400a36:	e7c8      	b.n	4009ca <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400a38:	4b1b      	ldr	r3, [pc, #108]	; (400aa8 <SystemCoreClockUpdate+0xf0>)
  400a3a:	6a1b      	ldr	r3, [r3, #32]
  400a3c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a40:	d016      	beq.n	400a70 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400a42:	4a1c      	ldr	r2, [pc, #112]	; (400ab4 <SystemCoreClockUpdate+0xfc>)
  400a44:	4b19      	ldr	r3, [pc, #100]	; (400aac <SystemCoreClockUpdate+0xf4>)
  400a46:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400a48:	4b17      	ldr	r3, [pc, #92]	; (400aa8 <SystemCoreClockUpdate+0xf0>)
  400a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a4c:	f003 0303 	and.w	r3, r3, #3
  400a50:	2b02      	cmp	r3, #2
  400a52:	d1ba      	bne.n	4009ca <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400a54:	4a14      	ldr	r2, [pc, #80]	; (400aa8 <SystemCoreClockUpdate+0xf0>)
  400a56:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400a58:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400a5a:	4814      	ldr	r0, [pc, #80]	; (400aac <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400a5c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400a60:	6803      	ldr	r3, [r0, #0]
  400a62:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400a66:	b2d2      	uxtb	r2, r2
  400a68:	fbb3 f3f2 	udiv	r3, r3, r2
  400a6c:	6003      	str	r3, [r0, #0]
  400a6e:	e7ac      	b.n	4009ca <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400a70:	4a11      	ldr	r2, [pc, #68]	; (400ab8 <SystemCoreClockUpdate+0x100>)
  400a72:	4b0e      	ldr	r3, [pc, #56]	; (400aac <SystemCoreClockUpdate+0xf4>)
  400a74:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400a76:	4b0c      	ldr	r3, [pc, #48]	; (400aa8 <SystemCoreClockUpdate+0xf0>)
  400a78:	6a1b      	ldr	r3, [r3, #32]
  400a7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a7e:	2b10      	cmp	r3, #16
  400a80:	d005      	beq.n	400a8e <SystemCoreClockUpdate+0xd6>
  400a82:	2b20      	cmp	r3, #32
  400a84:	d1e0      	bne.n	400a48 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400a86:	4a0b      	ldr	r2, [pc, #44]	; (400ab4 <SystemCoreClockUpdate+0xfc>)
  400a88:	4b08      	ldr	r3, [pc, #32]	; (400aac <SystemCoreClockUpdate+0xf4>)
  400a8a:	601a      	str	r2, [r3, #0]
          break;
  400a8c:	e7dc      	b.n	400a48 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400a8e:	4a0b      	ldr	r2, [pc, #44]	; (400abc <SystemCoreClockUpdate+0x104>)
  400a90:	4b06      	ldr	r3, [pc, #24]	; (400aac <SystemCoreClockUpdate+0xf4>)
  400a92:	601a      	str	r2, [r3, #0]
          break;
  400a94:	e7d8      	b.n	400a48 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400a96:	4a05      	ldr	r2, [pc, #20]	; (400aac <SystemCoreClockUpdate+0xf4>)
  400a98:	6813      	ldr	r3, [r2, #0]
  400a9a:	4909      	ldr	r1, [pc, #36]	; (400ac0 <SystemCoreClockUpdate+0x108>)
  400a9c:	fba1 1303 	umull	r1, r3, r1, r3
  400aa0:	085b      	lsrs	r3, r3, #1
  400aa2:	6013      	str	r3, [r2, #0]
  400aa4:	4770      	bx	lr
  400aa6:	bf00      	nop
  400aa8:	400e0600 	.word	0x400e0600
  400aac:	20400004 	.word	0x20400004
  400ab0:	400e1810 	.word	0x400e1810
  400ab4:	00b71b00 	.word	0x00b71b00
  400ab8:	003d0900 	.word	0x003d0900
  400abc:	007a1200 	.word	0x007a1200
  400ac0:	aaaaaaab 	.word	0xaaaaaaab

00400ac4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400ac4:	4b16      	ldr	r3, [pc, #88]	; (400b20 <system_init_flash+0x5c>)
  400ac6:	4298      	cmp	r0, r3
  400ac8:	d913      	bls.n	400af2 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400aca:	4b16      	ldr	r3, [pc, #88]	; (400b24 <system_init_flash+0x60>)
  400acc:	4298      	cmp	r0, r3
  400ace:	d915      	bls.n	400afc <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400ad0:	4b15      	ldr	r3, [pc, #84]	; (400b28 <system_init_flash+0x64>)
  400ad2:	4298      	cmp	r0, r3
  400ad4:	d916      	bls.n	400b04 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400ad6:	4b15      	ldr	r3, [pc, #84]	; (400b2c <system_init_flash+0x68>)
  400ad8:	4298      	cmp	r0, r3
  400ada:	d917      	bls.n	400b0c <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400adc:	4b14      	ldr	r3, [pc, #80]	; (400b30 <system_init_flash+0x6c>)
  400ade:	4298      	cmp	r0, r3
  400ae0:	d918      	bls.n	400b14 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400ae2:	4b14      	ldr	r3, [pc, #80]	; (400b34 <system_init_flash+0x70>)
  400ae4:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400ae6:	bf94      	ite	ls
  400ae8:	4a13      	ldrls	r2, [pc, #76]	; (400b38 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400aea:	4a14      	ldrhi	r2, [pc, #80]	; (400b3c <system_init_flash+0x78>)
  400aec:	4b14      	ldr	r3, [pc, #80]	; (400b40 <system_init_flash+0x7c>)
  400aee:	601a      	str	r2, [r3, #0]
  400af0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400af2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400af6:	4b12      	ldr	r3, [pc, #72]	; (400b40 <system_init_flash+0x7c>)
  400af8:	601a      	str	r2, [r3, #0]
  400afa:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400afc:	4a11      	ldr	r2, [pc, #68]	; (400b44 <system_init_flash+0x80>)
  400afe:	4b10      	ldr	r3, [pc, #64]	; (400b40 <system_init_flash+0x7c>)
  400b00:	601a      	str	r2, [r3, #0]
  400b02:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400b04:	4a10      	ldr	r2, [pc, #64]	; (400b48 <system_init_flash+0x84>)
  400b06:	4b0e      	ldr	r3, [pc, #56]	; (400b40 <system_init_flash+0x7c>)
  400b08:	601a      	str	r2, [r3, #0]
  400b0a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400b0c:	4a0f      	ldr	r2, [pc, #60]	; (400b4c <system_init_flash+0x88>)
  400b0e:	4b0c      	ldr	r3, [pc, #48]	; (400b40 <system_init_flash+0x7c>)
  400b10:	601a      	str	r2, [r3, #0]
  400b12:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400b14:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400b18:	4b09      	ldr	r3, [pc, #36]	; (400b40 <system_init_flash+0x7c>)
  400b1a:	601a      	str	r2, [r3, #0]
  400b1c:	4770      	bx	lr
  400b1e:	bf00      	nop
  400b20:	015ef3bf 	.word	0x015ef3bf
  400b24:	02bde77f 	.word	0x02bde77f
  400b28:	041cdb3f 	.word	0x041cdb3f
  400b2c:	057bceff 	.word	0x057bceff
  400b30:	06dac2bf 	.word	0x06dac2bf
  400b34:	0839b67f 	.word	0x0839b67f
  400b38:	04000500 	.word	0x04000500
  400b3c:	04000600 	.word	0x04000600
  400b40:	400e0c00 	.word	0x400e0c00
  400b44:	04000100 	.word	0x04000100
  400b48:	04000200 	.word	0x04000200
  400b4c:	04000300 	.word	0x04000300

00400b50 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400b50:	4b0a      	ldr	r3, [pc, #40]	; (400b7c <_sbrk+0x2c>)
  400b52:	681b      	ldr	r3, [r3, #0]
  400b54:	b153      	cbz	r3, 400b6c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400b56:	4b09      	ldr	r3, [pc, #36]	; (400b7c <_sbrk+0x2c>)
  400b58:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400b5a:	181a      	adds	r2, r3, r0
  400b5c:	4908      	ldr	r1, [pc, #32]	; (400b80 <_sbrk+0x30>)
  400b5e:	4291      	cmp	r1, r2
  400b60:	db08      	blt.n	400b74 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400b62:	4610      	mov	r0, r2
  400b64:	4a05      	ldr	r2, [pc, #20]	; (400b7c <_sbrk+0x2c>)
  400b66:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400b68:	4618      	mov	r0, r3
  400b6a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400b6c:	4a05      	ldr	r2, [pc, #20]	; (400b84 <_sbrk+0x34>)
  400b6e:	4b03      	ldr	r3, [pc, #12]	; (400b7c <_sbrk+0x2c>)
  400b70:	601a      	str	r2, [r3, #0]
  400b72:	e7f0      	b.n	400b56 <_sbrk+0x6>
		return (caddr_t) -1;	
  400b74:	f04f 30ff 	mov.w	r0, #4294967295
}
  400b78:	4770      	bx	lr
  400b7a:	bf00      	nop
  400b7c:	20400a50 	.word	0x20400a50
  400b80:	2045fffc 	.word	0x2045fffc
  400b84:	20402ca0 	.word	0x20402ca0

00400b88 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400b88:	f04f 30ff 	mov.w	r0, #4294967295
  400b8c:	4770      	bx	lr

00400b8e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400b8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400b92:	604b      	str	r3, [r1, #4]

	return 0;
}
  400b94:	2000      	movs	r0, #0
  400b96:	4770      	bx	lr

00400b98 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400b98:	2001      	movs	r0, #1
  400b9a:	4770      	bx	lr

00400b9c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400b9c:	2000      	movs	r0, #0
  400b9e:	4770      	bx	lr

00400ba0 <Button1_Handler>:
 *  Handle process led1 status change.
 */
// [main_button1_handler]
static void Button1_Handler(uint32_t id, uint32_t mask)
{
	if (PIN_PUSHBUTTON_1_ID == id && PIN_PUSHBUTTON_1_MASK == mask) {
  400ba0:	280a      	cmp	r0, #10
  400ba2:	d113      	bne.n	400bcc <Button1_Handler+0x2c>
  400ba4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  400ba8:	d110      	bne.n	400bcc <Button1_Handler+0x2c>
		if(mseconds_to_wait == 500){
  400baa:	4b09      	ldr	r3, [pc, #36]	; (400bd0 <Button1_Handler+0x30>)
  400bac:	681b      	ldr	r3, [r3, #0]
  400bae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
			mseconds_to_wait= 100;
  400bb2:	bf0c      	ite	eq
  400bb4:	2264      	moveq	r2, #100	; 0x64
			mseconds_to_wait=500;
  400bb6:	f44f 72fa 	movne.w	r2, #500	; 0x1f4
  400bba:	4b05      	ldr	r3, [pc, #20]	; (400bd0 <Button1_Handler+0x30>)
  400bbc:	601a      	str	r2, [r3, #0]
		if (!g_b_led0_active) {
  400bbe:	4b05      	ldr	r3, [pc, #20]	; (400bd4 <Button1_Handler+0x34>)
  400bc0:	781b      	ldrb	r3, [r3, #0]
  400bc2:	b91b      	cbnz	r3, 400bcc <Button1_Handler+0x2c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
  400bc8:	4b03      	ldr	r3, [pc, #12]	; (400bd8 <Button1_Handler+0x38>)
  400bca:	631a      	str	r2, [r3, #48]	; 0x30
  400bcc:	4770      	bx	lr
  400bce:	bf00      	nop
  400bd0:	2040000c 	.word	0x2040000c
  400bd4:	20400008 	.word	0x20400008
  400bd8:	400e1200 	.word	0x400e1200

00400bdc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  400bde:	b083      	sub	sp, #12
  400be0:	4605      	mov	r5, r0
  400be2:	460c      	mov	r4, r1
	uint32_t val = 0;
  400be4:	2300      	movs	r3, #0
  400be6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400be8:	4b2a      	ldr	r3, [pc, #168]	; (400c94 <usart_serial_getchar+0xb8>)
  400bea:	4298      	cmp	r0, r3
  400bec:	d013      	beq.n	400c16 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400bee:	4b2a      	ldr	r3, [pc, #168]	; (400c98 <usart_serial_getchar+0xbc>)
  400bf0:	4298      	cmp	r0, r3
  400bf2:	d018      	beq.n	400c26 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400bf4:	4b29      	ldr	r3, [pc, #164]	; (400c9c <usart_serial_getchar+0xc0>)
  400bf6:	4298      	cmp	r0, r3
  400bf8:	d01d      	beq.n	400c36 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400bfa:	4b29      	ldr	r3, [pc, #164]	; (400ca0 <usart_serial_getchar+0xc4>)
  400bfc:	429d      	cmp	r5, r3
  400bfe:	d022      	beq.n	400c46 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400c00:	4b28      	ldr	r3, [pc, #160]	; (400ca4 <usart_serial_getchar+0xc8>)
  400c02:	429d      	cmp	r5, r3
  400c04:	d027      	beq.n	400c56 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400c06:	4b28      	ldr	r3, [pc, #160]	; (400ca8 <usart_serial_getchar+0xcc>)
  400c08:	429d      	cmp	r5, r3
  400c0a:	d02e      	beq.n	400c6a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400c0c:	4b27      	ldr	r3, [pc, #156]	; (400cac <usart_serial_getchar+0xd0>)
  400c0e:	429d      	cmp	r5, r3
  400c10:	d035      	beq.n	400c7e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400c12:	b003      	add	sp, #12
  400c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400c16:	461f      	mov	r7, r3
  400c18:	4e25      	ldr	r6, [pc, #148]	; (400cb0 <usart_serial_getchar+0xd4>)
  400c1a:	4621      	mov	r1, r4
  400c1c:	4638      	mov	r0, r7
  400c1e:	47b0      	blx	r6
  400c20:	2800      	cmp	r0, #0
  400c22:	d1fa      	bne.n	400c1a <usart_serial_getchar+0x3e>
  400c24:	e7e9      	b.n	400bfa <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400c26:	461f      	mov	r7, r3
  400c28:	4e21      	ldr	r6, [pc, #132]	; (400cb0 <usart_serial_getchar+0xd4>)
  400c2a:	4621      	mov	r1, r4
  400c2c:	4638      	mov	r0, r7
  400c2e:	47b0      	blx	r6
  400c30:	2800      	cmp	r0, #0
  400c32:	d1fa      	bne.n	400c2a <usart_serial_getchar+0x4e>
  400c34:	e7e4      	b.n	400c00 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  400c36:	461f      	mov	r7, r3
  400c38:	4e1d      	ldr	r6, [pc, #116]	; (400cb0 <usart_serial_getchar+0xd4>)
  400c3a:	4621      	mov	r1, r4
  400c3c:	4638      	mov	r0, r7
  400c3e:	47b0      	blx	r6
  400c40:	2800      	cmp	r0, #0
  400c42:	d1fa      	bne.n	400c3a <usart_serial_getchar+0x5e>
  400c44:	e7df      	b.n	400c06 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  400c46:	461f      	mov	r7, r3
  400c48:	4e19      	ldr	r6, [pc, #100]	; (400cb0 <usart_serial_getchar+0xd4>)
  400c4a:	4621      	mov	r1, r4
  400c4c:	4638      	mov	r0, r7
  400c4e:	47b0      	blx	r6
  400c50:	2800      	cmp	r0, #0
  400c52:	d1fa      	bne.n	400c4a <usart_serial_getchar+0x6e>
  400c54:	e7da      	b.n	400c0c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  400c56:	461e      	mov	r6, r3
  400c58:	4d16      	ldr	r5, [pc, #88]	; (400cb4 <usart_serial_getchar+0xd8>)
  400c5a:	a901      	add	r1, sp, #4
  400c5c:	4630      	mov	r0, r6
  400c5e:	47a8      	blx	r5
  400c60:	2800      	cmp	r0, #0
  400c62:	d1fa      	bne.n	400c5a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  400c64:	9b01      	ldr	r3, [sp, #4]
  400c66:	7023      	strb	r3, [r4, #0]
  400c68:	e7d3      	b.n	400c12 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400c6a:	461e      	mov	r6, r3
  400c6c:	4d11      	ldr	r5, [pc, #68]	; (400cb4 <usart_serial_getchar+0xd8>)
  400c6e:	a901      	add	r1, sp, #4
  400c70:	4630      	mov	r0, r6
  400c72:	47a8      	blx	r5
  400c74:	2800      	cmp	r0, #0
  400c76:	d1fa      	bne.n	400c6e <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  400c78:	9b01      	ldr	r3, [sp, #4]
  400c7a:	7023      	strb	r3, [r4, #0]
  400c7c:	e7c9      	b.n	400c12 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400c7e:	461e      	mov	r6, r3
  400c80:	4d0c      	ldr	r5, [pc, #48]	; (400cb4 <usart_serial_getchar+0xd8>)
  400c82:	a901      	add	r1, sp, #4
  400c84:	4630      	mov	r0, r6
  400c86:	47a8      	blx	r5
  400c88:	2800      	cmp	r0, #0
  400c8a:	d1fa      	bne.n	400c82 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  400c8c:	9b01      	ldr	r3, [sp, #4]
  400c8e:	7023      	strb	r3, [r4, #0]
}
  400c90:	e7bf      	b.n	400c12 <usart_serial_getchar+0x36>
  400c92:	bf00      	nop
  400c94:	400e0800 	.word	0x400e0800
  400c98:	400e0a00 	.word	0x400e0a00
  400c9c:	400e1a00 	.word	0x400e1a00
  400ca0:	400e1c00 	.word	0x400e1c00
  400ca4:	40024000 	.word	0x40024000
  400ca8:	40028000 	.word	0x40028000
  400cac:	4002c000 	.word	0x4002c000
  400cb0:	004007cb 	.word	0x004007cb
  400cb4:	004008d7 	.word	0x004008d7

00400cb8 <usart_serial_putchar>:
{
  400cb8:	b570      	push	{r4, r5, r6, lr}
  400cba:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400cbc:	4b2a      	ldr	r3, [pc, #168]	; (400d68 <usart_serial_putchar+0xb0>)
  400cbe:	4298      	cmp	r0, r3
  400cc0:	d013      	beq.n	400cea <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  400cc2:	4b2a      	ldr	r3, [pc, #168]	; (400d6c <usart_serial_putchar+0xb4>)
  400cc4:	4298      	cmp	r0, r3
  400cc6:	d019      	beq.n	400cfc <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  400cc8:	4b29      	ldr	r3, [pc, #164]	; (400d70 <usart_serial_putchar+0xb8>)
  400cca:	4298      	cmp	r0, r3
  400ccc:	d01f      	beq.n	400d0e <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  400cce:	4b29      	ldr	r3, [pc, #164]	; (400d74 <usart_serial_putchar+0xbc>)
  400cd0:	4298      	cmp	r0, r3
  400cd2:	d025      	beq.n	400d20 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  400cd4:	4b28      	ldr	r3, [pc, #160]	; (400d78 <usart_serial_putchar+0xc0>)
  400cd6:	4298      	cmp	r0, r3
  400cd8:	d02b      	beq.n	400d32 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  400cda:	4b28      	ldr	r3, [pc, #160]	; (400d7c <usart_serial_putchar+0xc4>)
  400cdc:	4298      	cmp	r0, r3
  400cde:	d031      	beq.n	400d44 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  400ce0:	4b27      	ldr	r3, [pc, #156]	; (400d80 <usart_serial_putchar+0xc8>)
  400ce2:	4298      	cmp	r0, r3
  400ce4:	d037      	beq.n	400d56 <usart_serial_putchar+0x9e>
	return 0;
  400ce6:	2000      	movs	r0, #0
}
  400ce8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400cea:	461e      	mov	r6, r3
  400cec:	4d25      	ldr	r5, [pc, #148]	; (400d84 <usart_serial_putchar+0xcc>)
  400cee:	4621      	mov	r1, r4
  400cf0:	4630      	mov	r0, r6
  400cf2:	47a8      	blx	r5
  400cf4:	2800      	cmp	r0, #0
  400cf6:	d1fa      	bne.n	400cee <usart_serial_putchar+0x36>
		return 1;
  400cf8:	2001      	movs	r0, #1
  400cfa:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400cfc:	461e      	mov	r6, r3
  400cfe:	4d21      	ldr	r5, [pc, #132]	; (400d84 <usart_serial_putchar+0xcc>)
  400d00:	4621      	mov	r1, r4
  400d02:	4630      	mov	r0, r6
  400d04:	47a8      	blx	r5
  400d06:	2800      	cmp	r0, #0
  400d08:	d1fa      	bne.n	400d00 <usart_serial_putchar+0x48>
		return 1;
  400d0a:	2001      	movs	r0, #1
  400d0c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400d0e:	461e      	mov	r6, r3
  400d10:	4d1c      	ldr	r5, [pc, #112]	; (400d84 <usart_serial_putchar+0xcc>)
  400d12:	4621      	mov	r1, r4
  400d14:	4630      	mov	r0, r6
  400d16:	47a8      	blx	r5
  400d18:	2800      	cmp	r0, #0
  400d1a:	d1fa      	bne.n	400d12 <usart_serial_putchar+0x5a>
		return 1;
  400d1c:	2001      	movs	r0, #1
  400d1e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400d20:	461e      	mov	r6, r3
  400d22:	4d18      	ldr	r5, [pc, #96]	; (400d84 <usart_serial_putchar+0xcc>)
  400d24:	4621      	mov	r1, r4
  400d26:	4630      	mov	r0, r6
  400d28:	47a8      	blx	r5
  400d2a:	2800      	cmp	r0, #0
  400d2c:	d1fa      	bne.n	400d24 <usart_serial_putchar+0x6c>
		return 1;
  400d2e:	2001      	movs	r0, #1
  400d30:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400d32:	461e      	mov	r6, r3
  400d34:	4d14      	ldr	r5, [pc, #80]	; (400d88 <usart_serial_putchar+0xd0>)
  400d36:	4621      	mov	r1, r4
  400d38:	4630      	mov	r0, r6
  400d3a:	47a8      	blx	r5
  400d3c:	2800      	cmp	r0, #0
  400d3e:	d1fa      	bne.n	400d36 <usart_serial_putchar+0x7e>
		return 1;
  400d40:	2001      	movs	r0, #1
  400d42:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400d44:	461e      	mov	r6, r3
  400d46:	4d10      	ldr	r5, [pc, #64]	; (400d88 <usart_serial_putchar+0xd0>)
  400d48:	4621      	mov	r1, r4
  400d4a:	4630      	mov	r0, r6
  400d4c:	47a8      	blx	r5
  400d4e:	2800      	cmp	r0, #0
  400d50:	d1fa      	bne.n	400d48 <usart_serial_putchar+0x90>
		return 1;
  400d52:	2001      	movs	r0, #1
  400d54:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400d56:	461e      	mov	r6, r3
  400d58:	4d0b      	ldr	r5, [pc, #44]	; (400d88 <usart_serial_putchar+0xd0>)
  400d5a:	4621      	mov	r1, r4
  400d5c:	4630      	mov	r0, r6
  400d5e:	47a8      	blx	r5
  400d60:	2800      	cmp	r0, #0
  400d62:	d1fa      	bne.n	400d5a <usart_serial_putchar+0xa2>
		return 1;
  400d64:	2001      	movs	r0, #1
  400d66:	bd70      	pop	{r4, r5, r6, pc}
  400d68:	400e0800 	.word	0x400e0800
  400d6c:	400e0a00 	.word	0x400e0a00
  400d70:	400e1a00 	.word	0x400e1a00
  400d74:	400e1c00 	.word	0x400e1c00
  400d78:	40024000 	.word	0x40024000
  400d7c:	40028000 	.word	0x40028000
  400d80:	4002c000 	.word	0x4002c000
  400d84:	004007b9 	.word	0x004007b9
  400d88:	004008c1 	.word	0x004008c1

00400d8c <SysTick_Handler>:
	g_ul_ms_ticks++;
  400d8c:	4a02      	ldr	r2, [pc, #8]	; (400d98 <SysTick_Handler+0xc>)
  400d8e:	6813      	ldr	r3, [r2, #0]
  400d90:	3301      	adds	r3, #1
  400d92:	6013      	str	r3, [r2, #0]
  400d94:	4770      	bx	lr
  400d96:	bf00      	nop
  400d98:	20400a54 	.word	0x20400a54

00400d9c <main>:
 *
 *  \return Unused (ANSI-C compatibility).
 */
// [main]
int main(void)
{
  400d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400da0:	b088      	sub	sp, #32
//! [main_step_sys_init]
	/* Initialize the SAM system */
	sysclk_init();
  400da2:	4b43      	ldr	r3, [pc, #268]	; (400eb0 <main+0x114>)
  400da4:	4798      	blx	r3
	board_init();
  400da6:	4b43      	ldr	r3, [pc, #268]	; (400eb4 <main+0x118>)
  400da8:	4798      	blx	r3
  400daa:	200e      	movs	r0, #14
  400dac:	4f42      	ldr	r7, [pc, #264]	; (400eb8 <main+0x11c>)
  400dae:	47b8      	blx	r7
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400db0:	4d42      	ldr	r5, [pc, #264]	; (400ebc <main+0x120>)
  400db2:	4b43      	ldr	r3, [pc, #268]	; (400ec0 <main+0x124>)
  400db4:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400db6:	4a43      	ldr	r2, [pc, #268]	; (400ec4 <main+0x128>)
  400db8:	4b43      	ldr	r3, [pc, #268]	; (400ec8 <main+0x12c>)
  400dba:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400dbc:	4a43      	ldr	r2, [pc, #268]	; (400ecc <main+0x130>)
  400dbe:	4b44      	ldr	r3, [pc, #272]	; (400ed0 <main+0x134>)
  400dc0:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  400dc2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400dc6:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  400dc8:	23c0      	movs	r3, #192	; 0xc0
  400dca:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  400dcc:	f44f 6600 	mov.w	r6, #2048	; 0x800
  400dd0:	9604      	str	r6, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  400dd2:	2400      	movs	r4, #0
  400dd4:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  400dd6:	9406      	str	r4, [sp, #24]
  400dd8:	200e      	movs	r0, #14
  400dda:	47b8      	blx	r7
		usart_init_rs232(p_usart, &usart_settings,
  400ddc:	4a3d      	ldr	r2, [pc, #244]	; (400ed4 <main+0x138>)
  400dde:	a902      	add	r1, sp, #8
  400de0:	4628      	mov	r0, r5
  400de2:	4b3d      	ldr	r3, [pc, #244]	; (400ed8 <main+0x13c>)
  400de4:	4798      	blx	r3
		usart_enable_tx(p_usart);
  400de6:	4628      	mov	r0, r5
  400de8:	4b3c      	ldr	r3, [pc, #240]	; (400edc <main+0x140>)
  400dea:	4798      	blx	r3
		usart_enable_rx(p_usart);
  400dec:	4628      	mov	r0, r5
  400dee:	4b3c      	ldr	r3, [pc, #240]	; (400ee0 <main+0x144>)
  400df0:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400df2:	f8df 8150 	ldr.w	r8, [pc, #336]	; 400f44 <main+0x1a8>
  400df6:	f8d8 3000 	ldr.w	r3, [r8]
  400dfa:	4621      	mov	r1, r4
  400dfc:	6898      	ldr	r0, [r3, #8]
  400dfe:	4d39      	ldr	r5, [pc, #228]	; (400ee4 <main+0x148>)
  400e00:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400e02:	f8d8 3000 	ldr.w	r3, [r8]
  400e06:	4621      	mov	r1, r4
  400e08:	6858      	ldr	r0, [r3, #4]
  400e0a:	47a8      	blx	r5
	/* Initialize the console uart */
	configure_console();
//! [main_step_console_init]

	/* Output example information */
	puts(STRING_HEADER);
  400e0c:	4836      	ldr	r0, [pc, #216]	; (400ee8 <main+0x14c>)
  400e0e:	4d37      	ldr	r5, [pc, #220]	; (400eec <main+0x150>)
  400e10:	47a8      	blx	r5

	/* Configure systick for 1 ms */
	puts("Configure system tick to get 1ms tick period.\r");
  400e12:	4837      	ldr	r0, [pc, #220]	; (400ef0 <main+0x154>)
  400e14:	47a8      	blx	r5
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400e16:	4b37      	ldr	r3, [pc, #220]	; (400ef4 <main+0x158>)
  400e18:	4a37      	ldr	r2, [pc, #220]	; (400ef8 <main+0x15c>)
  400e1a:	605a      	str	r2, [r3, #4]
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400e1c:	21e0      	movs	r1, #224	; 0xe0
  400e1e:	4a37      	ldr	r2, [pc, #220]	; (400efc <main+0x160>)
  400e20:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400e24:	609c      	str	r4, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  400e26:	2207      	movs	r2, #7
  400e28:	601a      	str	r2, [r3, #0]
//! [main_step_tc_init]
	configure_tc();
//! [main_step_tc_init]
#endif

	puts("Configure buttons with debouncing.\r");
  400e2a:	4835      	ldr	r0, [pc, #212]	; (400f00 <main+0x164>)
  400e2c:	47a8      	blx	r5
	pmc_enable_periph_clk(PIN_PUSHBUTTON_1_ID);
  400e2e:	200a      	movs	r0, #10
  400e30:	47b8      	blx	r7
	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  400e32:	4d34      	ldr	r5, [pc, #208]	; (400f04 <main+0x168>)
  400e34:	220a      	movs	r2, #10
  400e36:	4631      	mov	r1, r6
  400e38:	4628      	mov	r0, r5
  400e3a:	4b33      	ldr	r3, [pc, #204]	; (400f08 <main+0x16c>)
  400e3c:	4798      	blx	r3
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID,
  400e3e:	4b33      	ldr	r3, [pc, #204]	; (400f0c <main+0x170>)
  400e40:	9300      	str	r3, [sp, #0]
  400e42:	2379      	movs	r3, #121	; 0x79
  400e44:	4632      	mov	r2, r6
  400e46:	210a      	movs	r1, #10
  400e48:	4628      	mov	r0, r5
  400e4a:	4f31      	ldr	r7, [pc, #196]	; (400f10 <main+0x174>)
  400e4c:	47b8      	blx	r7
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400e4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400e52:	4b30      	ldr	r3, [pc, #192]	; (400f14 <main+0x178>)
  400e54:	601a      	str	r2, [r3, #0]
	pio_handler_set_priority(PIN_PUSHBUTTON_1_PIO,
  400e56:	4622      	mov	r2, r4
  400e58:	210a      	movs	r1, #10
  400e5a:	4628      	mov	r0, r5
  400e5c:	4b2e      	ldr	r3, [pc, #184]	; (400f18 <main+0x17c>)
  400e5e:	4798      	blx	r3
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  400e60:	4631      	mov	r1, r6
  400e62:	4628      	mov	r0, r5
  400e64:	4b2d      	ldr	r3, [pc, #180]	; (400f1c <main+0x180>)
  400e66:	4798      	blx	r3
//! [main_step_btn_init]
	configure_buttons();
//! [main_step_btn_init]

	printf("Press %s to Start/Stop the %s blinking.\r\n",
  400e68:	4a2d      	ldr	r2, [pc, #180]	; (400f20 <main+0x184>)
  400e6a:	492e      	ldr	r1, [pc, #184]	; (400f24 <main+0x188>)
  400e6c:	482e      	ldr	r0, [pc, #184]	; (400f28 <main+0x18c>)
  400e6e:	4b2f      	ldr	r3, [pc, #188]	; (400f2c <main+0x190>)
  400e70:	4798      	blx	r3
#endif

//! [main_step_loop]
	while (1) {
		/* Wait for LED to be active */
		while (!g_b_led0_active);
  400e72:	4c2f      	ldr	r4, [pc, #188]	; (400f30 <main+0x194>)
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400e74:	4e2f      	ldr	r6, [pc, #188]	; (400f34 <main+0x198>)
	ul_cur_ticks = g_ul_ms_ticks;
  400e76:	4d30      	ldr	r5, [pc, #192]	; (400f38 <main+0x19c>)
  400e78:	e00c      	b.n	400e94 <main+0xf8>
		port->PIO_SODR = mask;
  400e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
  400e7e:	6333      	str	r3, [r6, #48]	; 0x30

		/* Toggle LED state if active */
		if (g_b_led0_active) {
			ioport_toggle_pin_level(LED0_GPIO);
			int frequencia =  sysclk_get_cpu_hz() ;
			printf("1 ");
  400e80:	482e      	ldr	r0, [pc, #184]	; (400f3c <main+0x1a0>)
  400e82:	4b2a      	ldr	r3, [pc, #168]	; (400f2c <main+0x190>)
  400e84:	4798      	blx	r3
		}

		/* Wait for 500ms */
		mdelay(mseconds_to_wait);
  400e86:	4b2e      	ldr	r3, [pc, #184]	; (400f40 <main+0x1a4>)
  400e88:	6819      	ldr	r1, [r3, #0]
	ul_cur_ticks = g_ul_ms_ticks;
  400e8a:	682a      	ldr	r2, [r5, #0]
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
  400e8c:	682b      	ldr	r3, [r5, #0]
  400e8e:	1a9b      	subs	r3, r3, r2
  400e90:	4299      	cmp	r1, r3
  400e92:	d8fb      	bhi.n	400e8c <main+0xf0>
		while (!g_b_led0_active);
  400e94:	7823      	ldrb	r3, [r4, #0]
  400e96:	2b00      	cmp	r3, #0
  400e98:	d0fc      	beq.n	400e94 <main+0xf8>
		if (g_b_led0_active) {
  400e9a:	7823      	ldrb	r3, [r4, #0]
  400e9c:	2b00      	cmp	r3, #0
  400e9e:	d0f2      	beq.n	400e86 <main+0xea>
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400ea0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
  400ea2:	f413 7f80 	tst.w	r3, #256	; 0x100
  400ea6:	d0e8      	beq.n	400e7a <main+0xde>
		port->PIO_CODR = mask;
  400ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
  400eac:	6373      	str	r3, [r6, #52]	; 0x34
  400eae:	e7e7      	b.n	400e80 <main+0xe4>
  400eb0:	004001ad 	.word	0x004001ad
  400eb4:	004002a9 	.word	0x004002a9
  400eb8:	00400765 	.word	0x00400765
  400ebc:	40028000 	.word	0x40028000
  400ec0:	20400a94 	.word	0x20400a94
  400ec4:	00400cb9 	.word	0x00400cb9
  400ec8:	20400a90 	.word	0x20400a90
  400ecc:	00400bdd 	.word	0x00400bdd
  400ed0:	20400a8c 	.word	0x20400a8c
  400ed4:	08f0d180 	.word	0x08f0d180
  400ed8:	00400861 	.word	0x00400861
  400edc:	004008b5 	.word	0x004008b5
  400ee0:	004008bb 	.word	0x004008bb
  400ee4:	004010d5 	.word	0x004010d5
  400ee8:	00403d94 	.word	0x00403d94
  400eec:	004010c5 	.word	0x004010c5
  400ef0:	00403dec 	.word	0x00403dec
  400ef4:	e000e010 	.word	0xe000e010
  400ef8:	000493df 	.word	0x000493df
  400efc:	e000ed00 	.word	0xe000ed00
  400f00:	00403e1c 	.word	0x00403e1c
  400f04:	400e0e00 	.word	0x400e0e00
  400f08:	00400441 	.word	0x00400441
  400f0c:	00400ba1 	.word	0x00400ba1
  400f10:	004004ed 	.word	0x004004ed
  400f14:	e000e100 	.word	0xe000e100
  400f18:	004005c1 	.word	0x004005c1
  400f1c:	0040048d 	.word	0x0040048d
  400f20:	00403e40 	.word	0x00403e40
  400f24:	00403e50 	.word	0x00403e50
  400f28:	00403e54 	.word	0x00403e54
  400f2c:	00400f99 	.word	0x00400f99
  400f30:	20400008 	.word	0x20400008
  400f34:	400e1200 	.word	0x400e1200
  400f38:	20400a54 	.word	0x20400a54
  400f3c:	00403e80 	.word	0x00403e80
  400f40:	2040000c 	.word	0x2040000c
  400f44:	20400010 	.word	0x20400010

00400f48 <__libc_init_array>:
  400f48:	b570      	push	{r4, r5, r6, lr}
  400f4a:	4e0f      	ldr	r6, [pc, #60]	; (400f88 <__libc_init_array+0x40>)
  400f4c:	4d0f      	ldr	r5, [pc, #60]	; (400f8c <__libc_init_array+0x44>)
  400f4e:	1b76      	subs	r6, r6, r5
  400f50:	10b6      	asrs	r6, r6, #2
  400f52:	bf18      	it	ne
  400f54:	2400      	movne	r4, #0
  400f56:	d005      	beq.n	400f64 <__libc_init_array+0x1c>
  400f58:	3401      	adds	r4, #1
  400f5a:	f855 3b04 	ldr.w	r3, [r5], #4
  400f5e:	4798      	blx	r3
  400f60:	42a6      	cmp	r6, r4
  400f62:	d1f9      	bne.n	400f58 <__libc_init_array+0x10>
  400f64:	4e0a      	ldr	r6, [pc, #40]	; (400f90 <__libc_init_array+0x48>)
  400f66:	4d0b      	ldr	r5, [pc, #44]	; (400f94 <__libc_init_array+0x4c>)
  400f68:	1b76      	subs	r6, r6, r5
  400f6a:	f003 f83f 	bl	403fec <_init>
  400f6e:	10b6      	asrs	r6, r6, #2
  400f70:	bf18      	it	ne
  400f72:	2400      	movne	r4, #0
  400f74:	d006      	beq.n	400f84 <__libc_init_array+0x3c>
  400f76:	3401      	adds	r4, #1
  400f78:	f855 3b04 	ldr.w	r3, [r5], #4
  400f7c:	4798      	blx	r3
  400f7e:	42a6      	cmp	r6, r4
  400f80:	d1f9      	bne.n	400f76 <__libc_init_array+0x2e>
  400f82:	bd70      	pop	{r4, r5, r6, pc}
  400f84:	bd70      	pop	{r4, r5, r6, pc}
  400f86:	bf00      	nop
  400f88:	00403ff8 	.word	0x00403ff8
  400f8c:	00403ff8 	.word	0x00403ff8
  400f90:	00404000 	.word	0x00404000
  400f94:	00403ff8 	.word	0x00403ff8

00400f98 <iprintf>:
  400f98:	b40f      	push	{r0, r1, r2, r3}
  400f9a:	b500      	push	{lr}
  400f9c:	4907      	ldr	r1, [pc, #28]	; (400fbc <iprintf+0x24>)
  400f9e:	b083      	sub	sp, #12
  400fa0:	ab04      	add	r3, sp, #16
  400fa2:	6808      	ldr	r0, [r1, #0]
  400fa4:	f853 2b04 	ldr.w	r2, [r3], #4
  400fa8:	6881      	ldr	r1, [r0, #8]
  400faa:	9301      	str	r3, [sp, #4]
  400fac:	f000 f9f6 	bl	40139c <_vfiprintf_r>
  400fb0:	b003      	add	sp, #12
  400fb2:	f85d eb04 	ldr.w	lr, [sp], #4
  400fb6:	b004      	add	sp, #16
  400fb8:	4770      	bx	lr
  400fba:	bf00      	nop
  400fbc:	20400010 	.word	0x20400010

00400fc0 <memset>:
  400fc0:	b470      	push	{r4, r5, r6}
  400fc2:	0786      	lsls	r6, r0, #30
  400fc4:	d046      	beq.n	401054 <memset+0x94>
  400fc6:	1e54      	subs	r4, r2, #1
  400fc8:	2a00      	cmp	r2, #0
  400fca:	d041      	beq.n	401050 <memset+0x90>
  400fcc:	b2ca      	uxtb	r2, r1
  400fce:	4603      	mov	r3, r0
  400fd0:	e002      	b.n	400fd8 <memset+0x18>
  400fd2:	f114 34ff 	adds.w	r4, r4, #4294967295
  400fd6:	d33b      	bcc.n	401050 <memset+0x90>
  400fd8:	f803 2b01 	strb.w	r2, [r3], #1
  400fdc:	079d      	lsls	r5, r3, #30
  400fde:	d1f8      	bne.n	400fd2 <memset+0x12>
  400fe0:	2c03      	cmp	r4, #3
  400fe2:	d92e      	bls.n	401042 <memset+0x82>
  400fe4:	b2cd      	uxtb	r5, r1
  400fe6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400fea:	2c0f      	cmp	r4, #15
  400fec:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400ff0:	d919      	bls.n	401026 <memset+0x66>
  400ff2:	f103 0210 	add.w	r2, r3, #16
  400ff6:	4626      	mov	r6, r4
  400ff8:	3e10      	subs	r6, #16
  400ffa:	2e0f      	cmp	r6, #15
  400ffc:	f842 5c10 	str.w	r5, [r2, #-16]
  401000:	f842 5c0c 	str.w	r5, [r2, #-12]
  401004:	f842 5c08 	str.w	r5, [r2, #-8]
  401008:	f842 5c04 	str.w	r5, [r2, #-4]
  40100c:	f102 0210 	add.w	r2, r2, #16
  401010:	d8f2      	bhi.n	400ff8 <memset+0x38>
  401012:	f1a4 0210 	sub.w	r2, r4, #16
  401016:	f022 020f 	bic.w	r2, r2, #15
  40101a:	f004 040f 	and.w	r4, r4, #15
  40101e:	3210      	adds	r2, #16
  401020:	2c03      	cmp	r4, #3
  401022:	4413      	add	r3, r2
  401024:	d90d      	bls.n	401042 <memset+0x82>
  401026:	461e      	mov	r6, r3
  401028:	4622      	mov	r2, r4
  40102a:	3a04      	subs	r2, #4
  40102c:	2a03      	cmp	r2, #3
  40102e:	f846 5b04 	str.w	r5, [r6], #4
  401032:	d8fa      	bhi.n	40102a <memset+0x6a>
  401034:	1f22      	subs	r2, r4, #4
  401036:	f022 0203 	bic.w	r2, r2, #3
  40103a:	3204      	adds	r2, #4
  40103c:	4413      	add	r3, r2
  40103e:	f004 0403 	and.w	r4, r4, #3
  401042:	b12c      	cbz	r4, 401050 <memset+0x90>
  401044:	b2c9      	uxtb	r1, r1
  401046:	441c      	add	r4, r3
  401048:	f803 1b01 	strb.w	r1, [r3], #1
  40104c:	429c      	cmp	r4, r3
  40104e:	d1fb      	bne.n	401048 <memset+0x88>
  401050:	bc70      	pop	{r4, r5, r6}
  401052:	4770      	bx	lr
  401054:	4614      	mov	r4, r2
  401056:	4603      	mov	r3, r0
  401058:	e7c2      	b.n	400fe0 <memset+0x20>
  40105a:	bf00      	nop

0040105c <_puts_r>:
  40105c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40105e:	4605      	mov	r5, r0
  401060:	b089      	sub	sp, #36	; 0x24
  401062:	4608      	mov	r0, r1
  401064:	460c      	mov	r4, r1
  401066:	f000 f8eb 	bl	401240 <strlen>
  40106a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40106c:	4f14      	ldr	r7, [pc, #80]	; (4010c0 <_puts_r+0x64>)
  40106e:	9404      	str	r4, [sp, #16]
  401070:	2601      	movs	r6, #1
  401072:	1c44      	adds	r4, r0, #1
  401074:	a904      	add	r1, sp, #16
  401076:	2202      	movs	r2, #2
  401078:	9403      	str	r4, [sp, #12]
  40107a:	9005      	str	r0, [sp, #20]
  40107c:	68ac      	ldr	r4, [r5, #8]
  40107e:	9706      	str	r7, [sp, #24]
  401080:	9607      	str	r6, [sp, #28]
  401082:	9101      	str	r1, [sp, #4]
  401084:	9202      	str	r2, [sp, #8]
  401086:	b1b3      	cbz	r3, 4010b6 <_puts_r+0x5a>
  401088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40108c:	049a      	lsls	r2, r3, #18
  40108e:	d406      	bmi.n	40109e <_puts_r+0x42>
  401090:	6e62      	ldr	r2, [r4, #100]	; 0x64
  401092:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401096:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40109a:	81a3      	strh	r3, [r4, #12]
  40109c:	6662      	str	r2, [r4, #100]	; 0x64
  40109e:	4621      	mov	r1, r4
  4010a0:	4628      	mov	r0, r5
  4010a2:	aa01      	add	r2, sp, #4
  4010a4:	f001 fb14 	bl	4026d0 <__sfvwrite_r>
  4010a8:	2800      	cmp	r0, #0
  4010aa:	bf14      	ite	ne
  4010ac:	f04f 30ff 	movne.w	r0, #4294967295
  4010b0:	200a      	moveq	r0, #10
  4010b2:	b009      	add	sp, #36	; 0x24
  4010b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4010b6:	4628      	mov	r0, r5
  4010b8:	f001 f94e 	bl	402358 <__sinit>
  4010bc:	e7e4      	b.n	401088 <_puts_r+0x2c>
  4010be:	bf00      	nop
  4010c0:	00403e7c 	.word	0x00403e7c

004010c4 <puts>:
  4010c4:	4b02      	ldr	r3, [pc, #8]	; (4010d0 <puts+0xc>)
  4010c6:	4601      	mov	r1, r0
  4010c8:	6818      	ldr	r0, [r3, #0]
  4010ca:	f7ff bfc7 	b.w	40105c <_puts_r>
  4010ce:	bf00      	nop
  4010d0:	20400010 	.word	0x20400010

004010d4 <setbuf>:
  4010d4:	2900      	cmp	r1, #0
  4010d6:	bf0c      	ite	eq
  4010d8:	2202      	moveq	r2, #2
  4010da:	2200      	movne	r2, #0
  4010dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4010e0:	f000 b800 	b.w	4010e4 <setvbuf>

004010e4 <setvbuf>:
  4010e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4010e8:	4c50      	ldr	r4, [pc, #320]	; (40122c <setvbuf+0x148>)
  4010ea:	6825      	ldr	r5, [r4, #0]
  4010ec:	b083      	sub	sp, #12
  4010ee:	4604      	mov	r4, r0
  4010f0:	460f      	mov	r7, r1
  4010f2:	4690      	mov	r8, r2
  4010f4:	461e      	mov	r6, r3
  4010f6:	b115      	cbz	r5, 4010fe <setvbuf+0x1a>
  4010f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4010fa:	2b00      	cmp	r3, #0
  4010fc:	d077      	beq.n	4011ee <setvbuf+0x10a>
  4010fe:	f1b8 0f02 	cmp.w	r8, #2
  401102:	d004      	beq.n	40110e <setvbuf+0x2a>
  401104:	f1b8 0f01 	cmp.w	r8, #1
  401108:	d87d      	bhi.n	401206 <setvbuf+0x122>
  40110a:	2e00      	cmp	r6, #0
  40110c:	db7b      	blt.n	401206 <setvbuf+0x122>
  40110e:	4621      	mov	r1, r4
  401110:	4628      	mov	r0, r5
  401112:	f001 f88d 	bl	402230 <_fflush_r>
  401116:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401118:	b141      	cbz	r1, 40112c <setvbuf+0x48>
  40111a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40111e:	4299      	cmp	r1, r3
  401120:	d002      	beq.n	401128 <setvbuf+0x44>
  401122:	4628      	mov	r0, r5
  401124:	f001 f9ee 	bl	402504 <_free_r>
  401128:	2300      	movs	r3, #0
  40112a:	6323      	str	r3, [r4, #48]	; 0x30
  40112c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401130:	2200      	movs	r2, #0
  401132:	61a2      	str	r2, [r4, #24]
  401134:	6062      	str	r2, [r4, #4]
  401136:	061a      	lsls	r2, r3, #24
  401138:	d452      	bmi.n	4011e0 <setvbuf+0xfc>
  40113a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40113e:	f023 0303 	bic.w	r3, r3, #3
  401142:	f1b8 0f02 	cmp.w	r8, #2
  401146:	81a3      	strh	r3, [r4, #12]
  401148:	d037      	beq.n	4011ba <setvbuf+0xd6>
  40114a:	ab01      	add	r3, sp, #4
  40114c:	466a      	mov	r2, sp
  40114e:	4621      	mov	r1, r4
  401150:	4628      	mov	r0, r5
  401152:	f001 fc6d 	bl	402a30 <__swhatbuf_r>
  401156:	89a3      	ldrh	r3, [r4, #12]
  401158:	4318      	orrs	r0, r3
  40115a:	81a0      	strh	r0, [r4, #12]
  40115c:	b316      	cbz	r6, 4011a4 <setvbuf+0xc0>
  40115e:	b317      	cbz	r7, 4011a6 <setvbuf+0xc2>
  401160:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401162:	2b00      	cmp	r3, #0
  401164:	d04b      	beq.n	4011fe <setvbuf+0x11a>
  401166:	9b00      	ldr	r3, [sp, #0]
  401168:	6027      	str	r7, [r4, #0]
  40116a:	429e      	cmp	r6, r3
  40116c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401170:	6127      	str	r7, [r4, #16]
  401172:	bf1c      	itt	ne
  401174:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
  401178:	81a3      	strhne	r3, [r4, #12]
  40117a:	f1b8 0f01 	cmp.w	r8, #1
  40117e:	bf04      	itt	eq
  401180:	f043 0301 	orreq.w	r3, r3, #1
  401184:	81a3      	strheq	r3, [r4, #12]
  401186:	b29b      	uxth	r3, r3
  401188:	f013 0008 	ands.w	r0, r3, #8
  40118c:	6166      	str	r6, [r4, #20]
  40118e:	d023      	beq.n	4011d8 <setvbuf+0xf4>
  401190:	f013 0001 	ands.w	r0, r3, #1
  401194:	d02f      	beq.n	4011f6 <setvbuf+0x112>
  401196:	2000      	movs	r0, #0
  401198:	4276      	negs	r6, r6
  40119a:	61a6      	str	r6, [r4, #24]
  40119c:	60a0      	str	r0, [r4, #8]
  40119e:	b003      	add	sp, #12
  4011a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4011a4:	9e00      	ldr	r6, [sp, #0]
  4011a6:	4630      	mov	r0, r6
  4011a8:	f001 fcb4 	bl	402b14 <malloc>
  4011ac:	4607      	mov	r7, r0
  4011ae:	b368      	cbz	r0, 40120c <setvbuf+0x128>
  4011b0:	89a3      	ldrh	r3, [r4, #12]
  4011b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4011b6:	81a3      	strh	r3, [r4, #12]
  4011b8:	e7d2      	b.n	401160 <setvbuf+0x7c>
  4011ba:	2000      	movs	r0, #0
  4011bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4011c0:	f043 0302 	orr.w	r3, r3, #2
  4011c4:	2500      	movs	r5, #0
  4011c6:	2101      	movs	r1, #1
  4011c8:	81a3      	strh	r3, [r4, #12]
  4011ca:	60a5      	str	r5, [r4, #8]
  4011cc:	6022      	str	r2, [r4, #0]
  4011ce:	6122      	str	r2, [r4, #16]
  4011d0:	6161      	str	r1, [r4, #20]
  4011d2:	b003      	add	sp, #12
  4011d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4011d8:	60a0      	str	r0, [r4, #8]
  4011da:	b003      	add	sp, #12
  4011dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4011e0:	6921      	ldr	r1, [r4, #16]
  4011e2:	4628      	mov	r0, r5
  4011e4:	f001 f98e 	bl	402504 <_free_r>
  4011e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4011ec:	e7a5      	b.n	40113a <setvbuf+0x56>
  4011ee:	4628      	mov	r0, r5
  4011f0:	f001 f8b2 	bl	402358 <__sinit>
  4011f4:	e783      	b.n	4010fe <setvbuf+0x1a>
  4011f6:	60a6      	str	r6, [r4, #8]
  4011f8:	b003      	add	sp, #12
  4011fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4011fe:	4628      	mov	r0, r5
  401200:	f001 f8aa 	bl	402358 <__sinit>
  401204:	e7af      	b.n	401166 <setvbuf+0x82>
  401206:	f04f 30ff 	mov.w	r0, #4294967295
  40120a:	e7e2      	b.n	4011d2 <setvbuf+0xee>
  40120c:	f8dd 9000 	ldr.w	r9, [sp]
  401210:	45b1      	cmp	r9, r6
  401212:	d006      	beq.n	401222 <setvbuf+0x13e>
  401214:	4648      	mov	r0, r9
  401216:	f001 fc7d 	bl	402b14 <malloc>
  40121a:	4607      	mov	r7, r0
  40121c:	b108      	cbz	r0, 401222 <setvbuf+0x13e>
  40121e:	464e      	mov	r6, r9
  401220:	e7c6      	b.n	4011b0 <setvbuf+0xcc>
  401222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401226:	f04f 30ff 	mov.w	r0, #4294967295
  40122a:	e7c7      	b.n	4011bc <setvbuf+0xd8>
  40122c:	20400010 	.word	0x20400010
	...

00401240 <strlen>:
  401240:	f890 f000 	pld	[r0]
  401244:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401248:	f020 0107 	bic.w	r1, r0, #7
  40124c:	f06f 0c00 	mvn.w	ip, #0
  401250:	f010 0407 	ands.w	r4, r0, #7
  401254:	f891 f020 	pld	[r1, #32]
  401258:	f040 8049 	bne.w	4012ee <strlen+0xae>
  40125c:	f04f 0400 	mov.w	r4, #0
  401260:	f06f 0007 	mvn.w	r0, #7
  401264:	e9d1 2300 	ldrd	r2, r3, [r1]
  401268:	f891 f040 	pld	[r1, #64]	; 0x40
  40126c:	f100 0008 	add.w	r0, r0, #8
  401270:	fa82 f24c 	uadd8	r2, r2, ip
  401274:	faa4 f28c 	sel	r2, r4, ip
  401278:	fa83 f34c 	uadd8	r3, r3, ip
  40127c:	faa2 f38c 	sel	r3, r2, ip
  401280:	bb4b      	cbnz	r3, 4012d6 <strlen+0x96>
  401282:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401286:	fa82 f24c 	uadd8	r2, r2, ip
  40128a:	f100 0008 	add.w	r0, r0, #8
  40128e:	faa4 f28c 	sel	r2, r4, ip
  401292:	fa83 f34c 	uadd8	r3, r3, ip
  401296:	faa2 f38c 	sel	r3, r2, ip
  40129a:	b9e3      	cbnz	r3, 4012d6 <strlen+0x96>
  40129c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4012a0:	fa82 f24c 	uadd8	r2, r2, ip
  4012a4:	f100 0008 	add.w	r0, r0, #8
  4012a8:	faa4 f28c 	sel	r2, r4, ip
  4012ac:	fa83 f34c 	uadd8	r3, r3, ip
  4012b0:	faa2 f38c 	sel	r3, r2, ip
  4012b4:	b97b      	cbnz	r3, 4012d6 <strlen+0x96>
  4012b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4012ba:	f101 0120 	add.w	r1, r1, #32
  4012be:	fa82 f24c 	uadd8	r2, r2, ip
  4012c2:	f100 0008 	add.w	r0, r0, #8
  4012c6:	faa4 f28c 	sel	r2, r4, ip
  4012ca:	fa83 f34c 	uadd8	r3, r3, ip
  4012ce:	faa2 f38c 	sel	r3, r2, ip
  4012d2:	2b00      	cmp	r3, #0
  4012d4:	d0c6      	beq.n	401264 <strlen+0x24>
  4012d6:	2a00      	cmp	r2, #0
  4012d8:	bf04      	itt	eq
  4012da:	3004      	addeq	r0, #4
  4012dc:	461a      	moveq	r2, r3
  4012de:	ba12      	rev	r2, r2
  4012e0:	fab2 f282 	clz	r2, r2
  4012e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4012e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4012ec:	4770      	bx	lr
  4012ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4012f2:	f004 0503 	and.w	r5, r4, #3
  4012f6:	f1c4 0000 	rsb	r0, r4, #0
  4012fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4012fe:	f014 0f04 	tst.w	r4, #4
  401302:	f891 f040 	pld	[r1, #64]	; 0x40
  401306:	fa0c f505 	lsl.w	r5, ip, r5
  40130a:	ea62 0205 	orn	r2, r2, r5
  40130e:	bf1c      	itt	ne
  401310:	ea63 0305 	ornne	r3, r3, r5
  401314:	4662      	movne	r2, ip
  401316:	f04f 0400 	mov.w	r4, #0
  40131a:	e7a9      	b.n	401270 <strlen+0x30>

0040131c <__sprint_r.part.0>:
  40131c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401320:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401322:	049c      	lsls	r4, r3, #18
  401324:	4693      	mov	fp, r2
  401326:	d52f      	bpl.n	401388 <__sprint_r.part.0+0x6c>
  401328:	6893      	ldr	r3, [r2, #8]
  40132a:	6812      	ldr	r2, [r2, #0]
  40132c:	b353      	cbz	r3, 401384 <__sprint_r.part.0+0x68>
  40132e:	460e      	mov	r6, r1
  401330:	4607      	mov	r7, r0
  401332:	f102 0908 	add.w	r9, r2, #8
  401336:	e919 0420 	ldmdb	r9, {r5, sl}
  40133a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40133e:	d017      	beq.n	401370 <__sprint_r.part.0+0x54>
  401340:	3d04      	subs	r5, #4
  401342:	2400      	movs	r4, #0
  401344:	e001      	b.n	40134a <__sprint_r.part.0+0x2e>
  401346:	45a0      	cmp	r8, r4
  401348:	d010      	beq.n	40136c <__sprint_r.part.0+0x50>
  40134a:	4632      	mov	r2, r6
  40134c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401350:	4638      	mov	r0, r7
  401352:	f001 f875 	bl	402440 <_fputwc_r>
  401356:	1c43      	adds	r3, r0, #1
  401358:	f104 0401 	add.w	r4, r4, #1
  40135c:	d1f3      	bne.n	401346 <__sprint_r.part.0+0x2a>
  40135e:	2300      	movs	r3, #0
  401360:	f8cb 3008 	str.w	r3, [fp, #8]
  401364:	f8cb 3004 	str.w	r3, [fp, #4]
  401368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40136c:	f8db 3008 	ldr.w	r3, [fp, #8]
  401370:	f02a 0a03 	bic.w	sl, sl, #3
  401374:	eba3 030a 	sub.w	r3, r3, sl
  401378:	f8cb 3008 	str.w	r3, [fp, #8]
  40137c:	f109 0908 	add.w	r9, r9, #8
  401380:	2b00      	cmp	r3, #0
  401382:	d1d8      	bne.n	401336 <__sprint_r.part.0+0x1a>
  401384:	2000      	movs	r0, #0
  401386:	e7ea      	b.n	40135e <__sprint_r.part.0+0x42>
  401388:	f001 f9a2 	bl	4026d0 <__sfvwrite_r>
  40138c:	2300      	movs	r3, #0
  40138e:	f8cb 3008 	str.w	r3, [fp, #8]
  401392:	f8cb 3004 	str.w	r3, [fp, #4]
  401396:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40139a:	bf00      	nop

0040139c <_vfiprintf_r>:
  40139c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4013a0:	b0ad      	sub	sp, #180	; 0xb4
  4013a2:	461d      	mov	r5, r3
  4013a4:	9101      	str	r1, [sp, #4]
  4013a6:	4691      	mov	r9, r2
  4013a8:	9308      	str	r3, [sp, #32]
  4013aa:	9006      	str	r0, [sp, #24]
  4013ac:	b118      	cbz	r0, 4013b6 <_vfiprintf_r+0x1a>
  4013ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4013b0:	2b00      	cmp	r3, #0
  4013b2:	f000 80e0 	beq.w	401576 <_vfiprintf_r+0x1da>
  4013b6:	9c01      	ldr	r4, [sp, #4]
  4013b8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4013bc:	b281      	uxth	r1, r0
  4013be:	048b      	lsls	r3, r1, #18
  4013c0:	d407      	bmi.n	4013d2 <_vfiprintf_r+0x36>
  4013c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4013c4:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4013c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4013cc:	81a1      	strh	r1, [r4, #12]
  4013ce:	6663      	str	r3, [r4, #100]	; 0x64
  4013d0:	b289      	uxth	r1, r1
  4013d2:	070f      	lsls	r7, r1, #28
  4013d4:	f140 80b1 	bpl.w	40153a <_vfiprintf_r+0x19e>
  4013d8:	9b01      	ldr	r3, [sp, #4]
  4013da:	691b      	ldr	r3, [r3, #16]
  4013dc:	2b00      	cmp	r3, #0
  4013de:	f000 80ac 	beq.w	40153a <_vfiprintf_r+0x19e>
  4013e2:	f001 011a 	and.w	r1, r1, #26
  4013e6:	290a      	cmp	r1, #10
  4013e8:	f000 80b5 	beq.w	401556 <_vfiprintf_r+0x1ba>
  4013ec:	2300      	movs	r3, #0
  4013ee:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
  4013f2:	930b      	str	r3, [sp, #44]	; 0x2c
  4013f4:	9311      	str	r3, [sp, #68]	; 0x44
  4013f6:	9310      	str	r3, [sp, #64]	; 0x40
  4013f8:	9304      	str	r3, [sp, #16]
  4013fa:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  4013fe:	46da      	mov	sl, fp
  401400:	f899 3000 	ldrb.w	r3, [r9]
  401404:	464c      	mov	r4, r9
  401406:	b1fb      	cbz	r3, 401448 <_vfiprintf_r+0xac>
  401408:	2b25      	cmp	r3, #37	; 0x25
  40140a:	d102      	bne.n	401412 <_vfiprintf_r+0x76>
  40140c:	e01c      	b.n	401448 <_vfiprintf_r+0xac>
  40140e:	2b25      	cmp	r3, #37	; 0x25
  401410:	d003      	beq.n	40141a <_vfiprintf_r+0x7e>
  401412:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401416:	2b00      	cmp	r3, #0
  401418:	d1f9      	bne.n	40140e <_vfiprintf_r+0x72>
  40141a:	eba4 0509 	sub.w	r5, r4, r9
  40141e:	b19d      	cbz	r5, 401448 <_vfiprintf_r+0xac>
  401420:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401422:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401424:	f8ca 9000 	str.w	r9, [sl]
  401428:	3301      	adds	r3, #1
  40142a:	442a      	add	r2, r5
  40142c:	2b07      	cmp	r3, #7
  40142e:	f8ca 5004 	str.w	r5, [sl, #4]
  401432:	9211      	str	r2, [sp, #68]	; 0x44
  401434:	9310      	str	r3, [sp, #64]	; 0x40
  401436:	dd7a      	ble.n	40152e <_vfiprintf_r+0x192>
  401438:	2a00      	cmp	r2, #0
  40143a:	f040 848f 	bne.w	401d5c <_vfiprintf_r+0x9c0>
  40143e:	9b04      	ldr	r3, [sp, #16]
  401440:	9210      	str	r2, [sp, #64]	; 0x40
  401442:	442b      	add	r3, r5
  401444:	46da      	mov	sl, fp
  401446:	9304      	str	r3, [sp, #16]
  401448:	7823      	ldrb	r3, [r4, #0]
  40144a:	2b00      	cmp	r3, #0
  40144c:	f000 83b1 	beq.w	401bb2 <_vfiprintf_r+0x816>
  401450:	2000      	movs	r0, #0
  401452:	f04f 0300 	mov.w	r3, #0
  401456:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40145a:	f104 0901 	add.w	r9, r4, #1
  40145e:	7862      	ldrb	r2, [r4, #1]
  401460:	4605      	mov	r5, r0
  401462:	4606      	mov	r6, r0
  401464:	4603      	mov	r3, r0
  401466:	f04f 34ff 	mov.w	r4, #4294967295
  40146a:	f109 0901 	add.w	r9, r9, #1
  40146e:	f1a2 0120 	sub.w	r1, r2, #32
  401472:	2958      	cmp	r1, #88	; 0x58
  401474:	f200 830e 	bhi.w	401a94 <_vfiprintf_r+0x6f8>
  401478:	e8df f011 	tbh	[pc, r1, lsl #1]
  40147c:	030c0237 	.word	0x030c0237
  401480:	02eb030c 	.word	0x02eb030c
  401484:	030c030c 	.word	0x030c030c
  401488:	030c030c 	.word	0x030c030c
  40148c:	030c030c 	.word	0x030c030c
  401490:	02f0029e 	.word	0x02f0029e
  401494:	0082030c 	.word	0x0082030c
  401498:	030c0277 	.word	0x030c0277
  40149c:	01d401cf 	.word	0x01d401cf
  4014a0:	01d401d4 	.word	0x01d401d4
  4014a4:	01d401d4 	.word	0x01d401d4
  4014a8:	01d401d4 	.word	0x01d401d4
  4014ac:	01d401d4 	.word	0x01d401d4
  4014b0:	030c030c 	.word	0x030c030c
  4014b4:	030c030c 	.word	0x030c030c
  4014b8:	030c030c 	.word	0x030c030c
  4014bc:	030c030c 	.word	0x030c030c
  4014c0:	030c030c 	.word	0x030c030c
  4014c4:	030c023f 	.word	0x030c023f
  4014c8:	030c030c 	.word	0x030c030c
  4014cc:	030c030c 	.word	0x030c030c
  4014d0:	030c030c 	.word	0x030c030c
  4014d4:	030c030c 	.word	0x030c030c
  4014d8:	0246030c 	.word	0x0246030c
  4014dc:	030c030c 	.word	0x030c030c
  4014e0:	030c030c 	.word	0x030c030c
  4014e4:	024a030c 	.word	0x024a030c
  4014e8:	030c030c 	.word	0x030c030c
  4014ec:	030c0252 	.word	0x030c0252
  4014f0:	030c030c 	.word	0x030c030c
  4014f4:	030c030c 	.word	0x030c030c
  4014f8:	030c030c 	.word	0x030c030c
  4014fc:	030c030c 	.word	0x030c030c
  401500:	01e2030c 	.word	0x01e2030c
  401504:	030c01f6 	.word	0x030c01f6
  401508:	030c030c 	.word	0x030c030c
  40150c:	01f60307 	.word	0x01f60307
  401510:	030c030c 	.word	0x030c030c
  401514:	030c0291 	.word	0x030c0291
  401518:	008702f5 	.word	0x008702f5
  40151c:	02c302b1 	.word	0x02c302b1
  401520:	02c8030c 	.word	0x02c8030c
  401524:	01bd030c 	.word	0x01bd030c
  401528:	030c030c 	.word	0x030c030c
  40152c:	02aa      	.short	0x02aa
  40152e:	f10a 0a08 	add.w	sl, sl, #8
  401532:	9b04      	ldr	r3, [sp, #16]
  401534:	442b      	add	r3, r5
  401536:	9304      	str	r3, [sp, #16]
  401538:	e786      	b.n	401448 <_vfiprintf_r+0xac>
  40153a:	9c01      	ldr	r4, [sp, #4]
  40153c:	9806      	ldr	r0, [sp, #24]
  40153e:	4621      	mov	r1, r4
  401540:	f000 fd62 	bl	402008 <__swsetup_r>
  401544:	2800      	cmp	r0, #0
  401546:	f040 8340 	bne.w	401bca <_vfiprintf_r+0x82e>
  40154a:	89a1      	ldrh	r1, [r4, #12]
  40154c:	f001 011a 	and.w	r1, r1, #26
  401550:	290a      	cmp	r1, #10
  401552:	f47f af4b 	bne.w	4013ec <_vfiprintf_r+0x50>
  401556:	9901      	ldr	r1, [sp, #4]
  401558:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  40155c:	2b00      	cmp	r3, #0
  40155e:	f6ff af45 	blt.w	4013ec <_vfiprintf_r+0x50>
  401562:	462b      	mov	r3, r5
  401564:	464a      	mov	r2, r9
  401566:	9806      	ldr	r0, [sp, #24]
  401568:	f000 fd18 	bl	401f9c <__sbprintf>
  40156c:	9004      	str	r0, [sp, #16]
  40156e:	9804      	ldr	r0, [sp, #16]
  401570:	b02d      	add	sp, #180	; 0xb4
  401572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401576:	f000 feef 	bl	402358 <__sinit>
  40157a:	e71c      	b.n	4013b6 <_vfiprintf_r+0x1a>
  40157c:	4276      	negs	r6, r6
  40157e:	9208      	str	r2, [sp, #32]
  401580:	f043 0304 	orr.w	r3, r3, #4
  401584:	f899 2000 	ldrb.w	r2, [r9]
  401588:	e76f      	b.n	40146a <_vfiprintf_r+0xce>
  40158a:	9607      	str	r6, [sp, #28]
  40158c:	f013 0220 	ands.w	r2, r3, #32
  401590:	f040 845a 	bne.w	401e48 <_vfiprintf_r+0xaac>
  401594:	f013 0110 	ands.w	r1, r3, #16
  401598:	f040 83f1 	bne.w	401d7e <_vfiprintf_r+0x9e2>
  40159c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4015a0:	f000 83ed 	beq.w	401d7e <_vfiprintf_r+0x9e2>
  4015a4:	9808      	ldr	r0, [sp, #32]
  4015a6:	460a      	mov	r2, r1
  4015a8:	4601      	mov	r1, r0
  4015aa:	3104      	adds	r1, #4
  4015ac:	8806      	ldrh	r6, [r0, #0]
  4015ae:	9108      	str	r1, [sp, #32]
  4015b0:	2700      	movs	r7, #0
  4015b2:	f04f 0100 	mov.w	r1, #0
  4015b6:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4015ba:	2500      	movs	r5, #0
  4015bc:	1c61      	adds	r1, r4, #1
  4015be:	f000 8175 	beq.w	4018ac <_vfiprintf_r+0x510>
  4015c2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4015c6:	9103      	str	r1, [sp, #12]
  4015c8:	ea56 0107 	orrs.w	r1, r6, r7
  4015cc:	f040 8173 	bne.w	4018b6 <_vfiprintf_r+0x51a>
  4015d0:	2c00      	cmp	r4, #0
  4015d2:	f040 8356 	bne.w	401c82 <_vfiprintf_r+0x8e6>
  4015d6:	2a00      	cmp	r2, #0
  4015d8:	f040 83b2 	bne.w	401d40 <_vfiprintf_r+0x9a4>
  4015dc:	f013 0301 	ands.w	r3, r3, #1
  4015e0:	9305      	str	r3, [sp, #20]
  4015e2:	f000 8447 	beq.w	401e74 <_vfiprintf_r+0xad8>
  4015e6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  4015ea:	2330      	movs	r3, #48	; 0x30
  4015ec:	f808 3d41 	strb.w	r3, [r8, #-65]!
  4015f0:	9b05      	ldr	r3, [sp, #20]
  4015f2:	42a3      	cmp	r3, r4
  4015f4:	bfb8      	it	lt
  4015f6:	4623      	movlt	r3, r4
  4015f8:	9302      	str	r3, [sp, #8]
  4015fa:	b10d      	cbz	r5, 401600 <_vfiprintf_r+0x264>
  4015fc:	3301      	adds	r3, #1
  4015fe:	9302      	str	r3, [sp, #8]
  401600:	9b03      	ldr	r3, [sp, #12]
  401602:	f013 0302 	ands.w	r3, r3, #2
  401606:	9309      	str	r3, [sp, #36]	; 0x24
  401608:	d002      	beq.n	401610 <_vfiprintf_r+0x274>
  40160a:	9b02      	ldr	r3, [sp, #8]
  40160c:	3302      	adds	r3, #2
  40160e:	9302      	str	r3, [sp, #8]
  401610:	9b03      	ldr	r3, [sp, #12]
  401612:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  401616:	930a      	str	r3, [sp, #40]	; 0x28
  401618:	f040 8263 	bne.w	401ae2 <_vfiprintf_r+0x746>
  40161c:	9b07      	ldr	r3, [sp, #28]
  40161e:	9a02      	ldr	r2, [sp, #8]
  401620:	1a9d      	subs	r5, r3, r2
  401622:	2d00      	cmp	r5, #0
  401624:	f340 825d 	ble.w	401ae2 <_vfiprintf_r+0x746>
  401628:	2d10      	cmp	r5, #16
  40162a:	f340 8477 	ble.w	401f1c <_vfiprintf_r+0xb80>
  40162e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401630:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401632:	4eb9      	ldr	r6, [pc, #740]	; (401918 <_vfiprintf_r+0x57c>)
  401634:	46d6      	mov	lr, sl
  401636:	2710      	movs	r7, #16
  401638:	46a2      	mov	sl, r4
  40163a:	4619      	mov	r1, r3
  40163c:	9c06      	ldr	r4, [sp, #24]
  40163e:	e007      	b.n	401650 <_vfiprintf_r+0x2b4>
  401640:	f101 0c02 	add.w	ip, r1, #2
  401644:	f10e 0e08 	add.w	lr, lr, #8
  401648:	4601      	mov	r1, r0
  40164a:	3d10      	subs	r5, #16
  40164c:	2d10      	cmp	r5, #16
  40164e:	dd11      	ble.n	401674 <_vfiprintf_r+0x2d8>
  401650:	1c48      	adds	r0, r1, #1
  401652:	3210      	adds	r2, #16
  401654:	2807      	cmp	r0, #7
  401656:	9211      	str	r2, [sp, #68]	; 0x44
  401658:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40165c:	9010      	str	r0, [sp, #64]	; 0x40
  40165e:	ddef      	ble.n	401640 <_vfiprintf_r+0x2a4>
  401660:	2a00      	cmp	r2, #0
  401662:	f040 8231 	bne.w	401ac8 <_vfiprintf_r+0x72c>
  401666:	3d10      	subs	r5, #16
  401668:	2d10      	cmp	r5, #16
  40166a:	4611      	mov	r1, r2
  40166c:	f04f 0c01 	mov.w	ip, #1
  401670:	46de      	mov	lr, fp
  401672:	dced      	bgt.n	401650 <_vfiprintf_r+0x2b4>
  401674:	4654      	mov	r4, sl
  401676:	4661      	mov	r1, ip
  401678:	46f2      	mov	sl, lr
  40167a:	442a      	add	r2, r5
  40167c:	2907      	cmp	r1, #7
  40167e:	9211      	str	r2, [sp, #68]	; 0x44
  401680:	f8ca 6000 	str.w	r6, [sl]
  401684:	f8ca 5004 	str.w	r5, [sl, #4]
  401688:	9110      	str	r1, [sp, #64]	; 0x40
  40168a:	f300 82e6 	bgt.w	401c5a <_vfiprintf_r+0x8be>
  40168e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401692:	f10a 0a08 	add.w	sl, sl, #8
  401696:	1c48      	adds	r0, r1, #1
  401698:	2d00      	cmp	r5, #0
  40169a:	f040 822a 	bne.w	401af2 <_vfiprintf_r+0x756>
  40169e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4016a0:	2b00      	cmp	r3, #0
  4016a2:	f000 8244 	beq.w	401b2e <_vfiprintf_r+0x792>
  4016a6:	3202      	adds	r2, #2
  4016a8:	a90e      	add	r1, sp, #56	; 0x38
  4016aa:	2302      	movs	r3, #2
  4016ac:	2807      	cmp	r0, #7
  4016ae:	9211      	str	r2, [sp, #68]	; 0x44
  4016b0:	9010      	str	r0, [sp, #64]	; 0x40
  4016b2:	e88a 000a 	stmia.w	sl, {r1, r3}
  4016b6:	f340 8236 	ble.w	401b26 <_vfiprintf_r+0x78a>
  4016ba:	2a00      	cmp	r2, #0
  4016bc:	f040 838b 	bne.w	401dd6 <_vfiprintf_r+0xa3a>
  4016c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4016c2:	2b80      	cmp	r3, #128	; 0x80
  4016c4:	f04f 0001 	mov.w	r0, #1
  4016c8:	4611      	mov	r1, r2
  4016ca:	46da      	mov	sl, fp
  4016cc:	f040 8233 	bne.w	401b36 <_vfiprintf_r+0x79a>
  4016d0:	9b07      	ldr	r3, [sp, #28]
  4016d2:	9d02      	ldr	r5, [sp, #8]
  4016d4:	1b5e      	subs	r6, r3, r5
  4016d6:	2e00      	cmp	r6, #0
  4016d8:	f340 822d 	ble.w	401b36 <_vfiprintf_r+0x79a>
  4016dc:	2e10      	cmp	r6, #16
  4016de:	4d8f      	ldr	r5, [pc, #572]	; (40191c <_vfiprintf_r+0x580>)
  4016e0:	f340 842f 	ble.w	401f42 <_vfiprintf_r+0xba6>
  4016e4:	46d4      	mov	ip, sl
  4016e6:	2710      	movs	r7, #16
  4016e8:	46a2      	mov	sl, r4
  4016ea:	9c06      	ldr	r4, [sp, #24]
  4016ec:	e007      	b.n	4016fe <_vfiprintf_r+0x362>
  4016ee:	f101 0e02 	add.w	lr, r1, #2
  4016f2:	f10c 0c08 	add.w	ip, ip, #8
  4016f6:	4601      	mov	r1, r0
  4016f8:	3e10      	subs	r6, #16
  4016fa:	2e10      	cmp	r6, #16
  4016fc:	dd11      	ble.n	401722 <_vfiprintf_r+0x386>
  4016fe:	1c48      	adds	r0, r1, #1
  401700:	3210      	adds	r2, #16
  401702:	2807      	cmp	r0, #7
  401704:	9211      	str	r2, [sp, #68]	; 0x44
  401706:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40170a:	9010      	str	r0, [sp, #64]	; 0x40
  40170c:	ddef      	ble.n	4016ee <_vfiprintf_r+0x352>
  40170e:	2a00      	cmp	r2, #0
  401710:	f040 8296 	bne.w	401c40 <_vfiprintf_r+0x8a4>
  401714:	3e10      	subs	r6, #16
  401716:	2e10      	cmp	r6, #16
  401718:	f04f 0e01 	mov.w	lr, #1
  40171c:	4611      	mov	r1, r2
  40171e:	46dc      	mov	ip, fp
  401720:	dced      	bgt.n	4016fe <_vfiprintf_r+0x362>
  401722:	4654      	mov	r4, sl
  401724:	46e2      	mov	sl, ip
  401726:	4432      	add	r2, r6
  401728:	f1be 0f07 	cmp.w	lr, #7
  40172c:	9211      	str	r2, [sp, #68]	; 0x44
  40172e:	e88a 0060 	stmia.w	sl, {r5, r6}
  401732:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  401736:	f300 835b 	bgt.w	401df0 <_vfiprintf_r+0xa54>
  40173a:	9b05      	ldr	r3, [sp, #20]
  40173c:	1ae4      	subs	r4, r4, r3
  40173e:	2c00      	cmp	r4, #0
  401740:	f10a 0a08 	add.w	sl, sl, #8
  401744:	f10e 0001 	add.w	r0, lr, #1
  401748:	4671      	mov	r1, lr
  40174a:	f300 81f9 	bgt.w	401b40 <_vfiprintf_r+0x7a4>
  40174e:	9905      	ldr	r1, [sp, #20]
  401750:	f8ca 8000 	str.w	r8, [sl]
  401754:	440a      	add	r2, r1
  401756:	2807      	cmp	r0, #7
  401758:	9211      	str	r2, [sp, #68]	; 0x44
  40175a:	f8ca 1004 	str.w	r1, [sl, #4]
  40175e:	9010      	str	r0, [sp, #64]	; 0x40
  401760:	f340 8255 	ble.w	401c0e <_vfiprintf_r+0x872>
  401764:	2a00      	cmp	r2, #0
  401766:	f040 82ee 	bne.w	401d46 <_vfiprintf_r+0x9aa>
  40176a:	9b03      	ldr	r3, [sp, #12]
  40176c:	9210      	str	r2, [sp, #64]	; 0x40
  40176e:	0758      	lsls	r0, r3, #29
  401770:	d538      	bpl.n	4017e4 <_vfiprintf_r+0x448>
  401772:	9b07      	ldr	r3, [sp, #28]
  401774:	9902      	ldr	r1, [sp, #8]
  401776:	1a5c      	subs	r4, r3, r1
  401778:	2c00      	cmp	r4, #0
  40177a:	f340 82ba 	ble.w	401cf2 <_vfiprintf_r+0x956>
  40177e:	46da      	mov	sl, fp
  401780:	2c10      	cmp	r4, #16
  401782:	f340 83da 	ble.w	401f3a <_vfiprintf_r+0xb9e>
  401786:	9910      	ldr	r1, [sp, #64]	; 0x40
  401788:	4e63      	ldr	r6, [pc, #396]	; (401918 <_vfiprintf_r+0x57c>)
  40178a:	9f06      	ldr	r7, [sp, #24]
  40178c:	f8dd 8004 	ldr.w	r8, [sp, #4]
  401790:	2510      	movs	r5, #16
  401792:	e006      	b.n	4017a2 <_vfiprintf_r+0x406>
  401794:	1c88      	adds	r0, r1, #2
  401796:	f10a 0a08 	add.w	sl, sl, #8
  40179a:	4619      	mov	r1, r3
  40179c:	3c10      	subs	r4, #16
  40179e:	2c10      	cmp	r4, #16
  4017a0:	dd13      	ble.n	4017ca <_vfiprintf_r+0x42e>
  4017a2:	1c4b      	adds	r3, r1, #1
  4017a4:	3210      	adds	r2, #16
  4017a6:	2b07      	cmp	r3, #7
  4017a8:	9211      	str	r2, [sp, #68]	; 0x44
  4017aa:	f8ca 6000 	str.w	r6, [sl]
  4017ae:	f8ca 5004 	str.w	r5, [sl, #4]
  4017b2:	9310      	str	r3, [sp, #64]	; 0x40
  4017b4:	ddee      	ble.n	401794 <_vfiprintf_r+0x3f8>
  4017b6:	2a00      	cmp	r2, #0
  4017b8:	f040 820b 	bne.w	401bd2 <_vfiprintf_r+0x836>
  4017bc:	3c10      	subs	r4, #16
  4017be:	2c10      	cmp	r4, #16
  4017c0:	f04f 0001 	mov.w	r0, #1
  4017c4:	4611      	mov	r1, r2
  4017c6:	46da      	mov	sl, fp
  4017c8:	dceb      	bgt.n	4017a2 <_vfiprintf_r+0x406>
  4017ca:	4422      	add	r2, r4
  4017cc:	2807      	cmp	r0, #7
  4017ce:	9211      	str	r2, [sp, #68]	; 0x44
  4017d0:	f8ca 6000 	str.w	r6, [sl]
  4017d4:	f8ca 4004 	str.w	r4, [sl, #4]
  4017d8:	9010      	str	r0, [sp, #64]	; 0x40
  4017da:	f340 8223 	ble.w	401c24 <_vfiprintf_r+0x888>
  4017de:	2a00      	cmp	r2, #0
  4017e0:	f040 8367 	bne.w	401eb2 <_vfiprintf_r+0xb16>
  4017e4:	9b04      	ldr	r3, [sp, #16]
  4017e6:	9a07      	ldr	r2, [sp, #28]
  4017e8:	9902      	ldr	r1, [sp, #8]
  4017ea:	428a      	cmp	r2, r1
  4017ec:	bfac      	ite	ge
  4017ee:	189b      	addge	r3, r3, r2
  4017f0:	185b      	addlt	r3, r3, r1
  4017f2:	9304      	str	r3, [sp, #16]
  4017f4:	e21f      	b.n	401c36 <_vfiprintf_r+0x89a>
  4017f6:	9607      	str	r6, [sp, #28]
  4017f8:	069e      	lsls	r6, r3, #26
  4017fa:	f100 8319 	bmi.w	401e30 <_vfiprintf_r+0xa94>
  4017fe:	9908      	ldr	r1, [sp, #32]
  401800:	06dd      	lsls	r5, r3, #27
  401802:	460a      	mov	r2, r1
  401804:	f100 82b5 	bmi.w	401d72 <_vfiprintf_r+0x9d6>
  401808:	0658      	lsls	r0, r3, #25
  40180a:	f140 82b2 	bpl.w	401d72 <_vfiprintf_r+0x9d6>
  40180e:	880e      	ldrh	r6, [r1, #0]
  401810:	3104      	adds	r1, #4
  401812:	2700      	movs	r7, #0
  401814:	2201      	movs	r2, #1
  401816:	9108      	str	r1, [sp, #32]
  401818:	e6cb      	b.n	4015b2 <_vfiprintf_r+0x216>
  40181a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40181e:	f899 2000 	ldrb.w	r2, [r9]
  401822:	e622      	b.n	40146a <_vfiprintf_r+0xce>
  401824:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401828:	2600      	movs	r6, #0
  40182a:	f819 2b01 	ldrb.w	r2, [r9], #1
  40182e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401832:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  401836:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40183a:	2909      	cmp	r1, #9
  40183c:	d9f5      	bls.n	40182a <_vfiprintf_r+0x48e>
  40183e:	e616      	b.n	40146e <_vfiprintf_r+0xd2>
  401840:	9908      	ldr	r1, [sp, #32]
  401842:	9607      	str	r6, [sp, #28]
  401844:	680a      	ldr	r2, [r1, #0]
  401846:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40184a:	f04f 0000 	mov.w	r0, #0
  40184e:	460a      	mov	r2, r1
  401850:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  401854:	3204      	adds	r2, #4
  401856:	2001      	movs	r0, #1
  401858:	9002      	str	r0, [sp, #8]
  40185a:	9208      	str	r2, [sp, #32]
  40185c:	9005      	str	r0, [sp, #20]
  40185e:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  401862:	9303      	str	r3, [sp, #12]
  401864:	2400      	movs	r4, #0
  401866:	e6cb      	b.n	401600 <_vfiprintf_r+0x264>
  401868:	9607      	str	r6, [sp, #28]
  40186a:	2800      	cmp	r0, #0
  40186c:	f040 8382 	bne.w	401f74 <_vfiprintf_r+0xbd8>
  401870:	069e      	lsls	r6, r3, #26
  401872:	f100 82d1 	bmi.w	401e18 <_vfiprintf_r+0xa7c>
  401876:	06dd      	lsls	r5, r3, #27
  401878:	f100 828d 	bmi.w	401d96 <_vfiprintf_r+0x9fa>
  40187c:	0658      	lsls	r0, r3, #25
  40187e:	f140 828a 	bpl.w	401d96 <_vfiprintf_r+0x9fa>
  401882:	9d08      	ldr	r5, [sp, #32]
  401884:	f9b5 6000 	ldrsh.w	r6, [r5]
  401888:	462a      	mov	r2, r5
  40188a:	17f7      	asrs	r7, r6, #31
  40188c:	3204      	adds	r2, #4
  40188e:	4630      	mov	r0, r6
  401890:	4639      	mov	r1, r7
  401892:	9208      	str	r2, [sp, #32]
  401894:	2800      	cmp	r0, #0
  401896:	f171 0200 	sbcs.w	r2, r1, #0
  40189a:	f2c0 82ee 	blt.w	401e7a <_vfiprintf_r+0xade>
  40189e:	1c61      	adds	r1, r4, #1
  4018a0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4018a4:	f04f 0201 	mov.w	r2, #1
  4018a8:	f47f ae8b 	bne.w	4015c2 <_vfiprintf_r+0x226>
  4018ac:	ea56 0107 	orrs.w	r1, r6, r7
  4018b0:	f000 81e8 	beq.w	401c84 <_vfiprintf_r+0x8e8>
  4018b4:	9303      	str	r3, [sp, #12]
  4018b6:	2a01      	cmp	r2, #1
  4018b8:	f000 8225 	beq.w	401d06 <_vfiprintf_r+0x96a>
  4018bc:	2a02      	cmp	r2, #2
  4018be:	f040 81f5 	bne.w	401cac <_vfiprintf_r+0x910>
  4018c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4018c4:	46d8      	mov	r8, fp
  4018c6:	0933      	lsrs	r3, r6, #4
  4018c8:	f006 010f 	and.w	r1, r6, #15
  4018cc:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4018d0:	093a      	lsrs	r2, r7, #4
  4018d2:	461e      	mov	r6, r3
  4018d4:	4617      	mov	r7, r2
  4018d6:	5c43      	ldrb	r3, [r0, r1]
  4018d8:	f808 3d01 	strb.w	r3, [r8, #-1]!
  4018dc:	ea56 0307 	orrs.w	r3, r6, r7
  4018e0:	d1f1      	bne.n	4018c6 <_vfiprintf_r+0x52a>
  4018e2:	ebab 0308 	sub.w	r3, fp, r8
  4018e6:	9305      	str	r3, [sp, #20]
  4018e8:	e682      	b.n	4015f0 <_vfiprintf_r+0x254>
  4018ea:	f899 2000 	ldrb.w	r2, [r9]
  4018ee:	2d00      	cmp	r5, #0
  4018f0:	f47f adbb 	bne.w	40146a <_vfiprintf_r+0xce>
  4018f4:	2001      	movs	r0, #1
  4018f6:	2520      	movs	r5, #32
  4018f8:	e5b7      	b.n	40146a <_vfiprintf_r+0xce>
  4018fa:	9607      	str	r6, [sp, #28]
  4018fc:	2800      	cmp	r0, #0
  4018fe:	f040 8336 	bne.w	401f6e <_vfiprintf_r+0xbd2>
  401902:	f043 0310 	orr.w	r3, r3, #16
  401906:	e7b3      	b.n	401870 <_vfiprintf_r+0x4d4>
  401908:	9607      	str	r6, [sp, #28]
  40190a:	f043 0310 	orr.w	r3, r3, #16
  40190e:	e63d      	b.n	40158c <_vfiprintf_r+0x1f0>
  401910:	9607      	str	r6, [sp, #28]
  401912:	f043 0310 	orr.w	r3, r3, #16
  401916:	e76f      	b.n	4017f8 <_vfiprintf_r+0x45c>
  401918:	00403eb8 	.word	0x00403eb8
  40191c:	00403ec8 	.word	0x00403ec8
  401920:	9607      	str	r6, [sp, #28]
  401922:	2800      	cmp	r0, #0
  401924:	f040 832c 	bne.w	401f80 <_vfiprintf_r+0xbe4>
  401928:	49b0      	ldr	r1, [pc, #704]	; (401bec <_vfiprintf_r+0x850>)
  40192a:	910b      	str	r1, [sp, #44]	; 0x2c
  40192c:	069f      	lsls	r7, r3, #26
  40192e:	f100 8297 	bmi.w	401e60 <_vfiprintf_r+0xac4>
  401932:	9808      	ldr	r0, [sp, #32]
  401934:	06de      	lsls	r6, r3, #27
  401936:	4601      	mov	r1, r0
  401938:	f100 8228 	bmi.w	401d8c <_vfiprintf_r+0x9f0>
  40193c:	065d      	lsls	r5, r3, #25
  40193e:	f140 8225 	bpl.w	401d8c <_vfiprintf_r+0x9f0>
  401942:	3104      	adds	r1, #4
  401944:	8806      	ldrh	r6, [r0, #0]
  401946:	9108      	str	r1, [sp, #32]
  401948:	2700      	movs	r7, #0
  40194a:	07d8      	lsls	r0, r3, #31
  40194c:	f140 81d9 	bpl.w	401d02 <_vfiprintf_r+0x966>
  401950:	ea56 0107 	orrs.w	r1, r6, r7
  401954:	f000 81d5 	beq.w	401d02 <_vfiprintf_r+0x966>
  401958:	2130      	movs	r1, #48	; 0x30
  40195a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40195e:	f043 0302 	orr.w	r3, r3, #2
  401962:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401966:	2202      	movs	r2, #2
  401968:	e623      	b.n	4015b2 <_vfiprintf_r+0x216>
  40196a:	f899 2000 	ldrb.w	r2, [r9]
  40196e:	2a2a      	cmp	r2, #42	; 0x2a
  401970:	f109 0701 	add.w	r7, r9, #1
  401974:	f000 82f0 	beq.w	401f58 <_vfiprintf_r+0xbbc>
  401978:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40197c:	2909      	cmp	r1, #9
  40197e:	46b9      	mov	r9, r7
  401980:	f04f 0400 	mov.w	r4, #0
  401984:	f63f ad73 	bhi.w	40146e <_vfiprintf_r+0xd2>
  401988:	f819 2b01 	ldrb.w	r2, [r9], #1
  40198c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401990:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  401994:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401998:	2909      	cmp	r1, #9
  40199a:	d9f5      	bls.n	401988 <_vfiprintf_r+0x5ec>
  40199c:	e567      	b.n	40146e <_vfiprintf_r+0xd2>
  40199e:	f899 2000 	ldrb.w	r2, [r9]
  4019a2:	2a6c      	cmp	r2, #108	; 0x6c
  4019a4:	bf03      	ittte	eq
  4019a6:	f899 2001 	ldrbeq.w	r2, [r9, #1]
  4019aa:	f043 0320 	orreq.w	r3, r3, #32
  4019ae:	f109 0901 	addeq.w	r9, r9, #1
  4019b2:	f043 0310 	orrne.w	r3, r3, #16
  4019b6:	e558      	b.n	40146a <_vfiprintf_r+0xce>
  4019b8:	9908      	ldr	r1, [sp, #32]
  4019ba:	680e      	ldr	r6, [r1, #0]
  4019bc:	460a      	mov	r2, r1
  4019be:	2e00      	cmp	r6, #0
  4019c0:	f102 0204 	add.w	r2, r2, #4
  4019c4:	f6ff adda 	blt.w	40157c <_vfiprintf_r+0x1e0>
  4019c8:	9208      	str	r2, [sp, #32]
  4019ca:	f899 2000 	ldrb.w	r2, [r9]
  4019ce:	e54c      	b.n	40146a <_vfiprintf_r+0xce>
  4019d0:	9607      	str	r6, [sp, #28]
  4019d2:	2800      	cmp	r0, #0
  4019d4:	f040 82da 	bne.w	401f8c <_vfiprintf_r+0xbf0>
  4019d8:	4985      	ldr	r1, [pc, #532]	; (401bf0 <_vfiprintf_r+0x854>)
  4019da:	910b      	str	r1, [sp, #44]	; 0x2c
  4019dc:	e7a6      	b.n	40192c <_vfiprintf_r+0x590>
  4019de:	9808      	ldr	r0, [sp, #32]
  4019e0:	4a83      	ldr	r2, [pc, #524]	; (401bf0 <_vfiprintf_r+0x854>)
  4019e2:	9607      	str	r6, [sp, #28]
  4019e4:	920b      	str	r2, [sp, #44]	; 0x2c
  4019e6:	6806      	ldr	r6, [r0, #0]
  4019e8:	2278      	movs	r2, #120	; 0x78
  4019ea:	2130      	movs	r1, #48	; 0x30
  4019ec:	3004      	adds	r0, #4
  4019ee:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4019f2:	f043 0302 	orr.w	r3, r3, #2
  4019f6:	9008      	str	r0, [sp, #32]
  4019f8:	2700      	movs	r7, #0
  4019fa:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4019fe:	2202      	movs	r2, #2
  401a00:	e5d7      	b.n	4015b2 <_vfiprintf_r+0x216>
  401a02:	f043 0320 	orr.w	r3, r3, #32
  401a06:	f899 2000 	ldrb.w	r2, [r9]
  401a0a:	e52e      	b.n	40146a <_vfiprintf_r+0xce>
  401a0c:	9908      	ldr	r1, [sp, #32]
  401a0e:	9607      	str	r6, [sp, #28]
  401a10:	f8d1 8000 	ldr.w	r8, [r1]
  401a14:	f04f 0200 	mov.w	r2, #0
  401a18:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401a1c:	1d0e      	adds	r6, r1, #4
  401a1e:	f1b8 0f00 	cmp.w	r8, #0
  401a22:	f000 8281 	beq.w	401f28 <_vfiprintf_r+0xb8c>
  401a26:	1c67      	adds	r7, r4, #1
  401a28:	f000 8260 	beq.w	401eec <_vfiprintf_r+0xb50>
  401a2c:	4622      	mov	r2, r4
  401a2e:	2100      	movs	r1, #0
  401a30:	4640      	mov	r0, r8
  401a32:	9302      	str	r3, [sp, #8]
  401a34:	f001 fb3c 	bl	4030b0 <memchr>
  401a38:	9b02      	ldr	r3, [sp, #8]
  401a3a:	2800      	cmp	r0, #0
  401a3c:	f000 8284 	beq.w	401f48 <_vfiprintf_r+0xbac>
  401a40:	eba0 0208 	sub.w	r2, r0, r8
  401a44:	9205      	str	r2, [sp, #20]
  401a46:	9608      	str	r6, [sp, #32]
  401a48:	9303      	str	r3, [sp, #12]
  401a4a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401a4e:	2400      	movs	r4, #0
  401a50:	e5ce      	b.n	4015f0 <_vfiprintf_r+0x254>
  401a52:	f043 0301 	orr.w	r3, r3, #1
  401a56:	f899 2000 	ldrb.w	r2, [r9]
  401a5a:	e506      	b.n	40146a <_vfiprintf_r+0xce>
  401a5c:	f899 2000 	ldrb.w	r2, [r9]
  401a60:	2001      	movs	r0, #1
  401a62:	252b      	movs	r5, #43	; 0x2b
  401a64:	e501      	b.n	40146a <_vfiprintf_r+0xce>
  401a66:	2800      	cmp	r0, #0
  401a68:	f040 8287 	bne.w	401f7a <_vfiprintf_r+0xbde>
  401a6c:	0699      	lsls	r1, r3, #26
  401a6e:	f100 8231 	bmi.w	401ed4 <_vfiprintf_r+0xb38>
  401a72:	06da      	lsls	r2, r3, #27
  401a74:	d421      	bmi.n	401aba <_vfiprintf_r+0x71e>
  401a76:	065b      	lsls	r3, r3, #25
  401a78:	d51f      	bpl.n	401aba <_vfiprintf_r+0x71e>
  401a7a:	9a08      	ldr	r2, [sp, #32]
  401a7c:	6813      	ldr	r3, [r2, #0]
  401a7e:	3204      	adds	r2, #4
  401a80:	9208      	str	r2, [sp, #32]
  401a82:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  401a86:	801a      	strh	r2, [r3, #0]
  401a88:	e4ba      	b.n	401400 <_vfiprintf_r+0x64>
  401a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401a8e:	f899 2000 	ldrb.w	r2, [r9]
  401a92:	e4ea      	b.n	40146a <_vfiprintf_r+0xce>
  401a94:	9607      	str	r6, [sp, #28]
  401a96:	2800      	cmp	r0, #0
  401a98:	f040 8275 	bne.w	401f86 <_vfiprintf_r+0xbea>
  401a9c:	2a00      	cmp	r2, #0
  401a9e:	f000 8088 	beq.w	401bb2 <_vfiprintf_r+0x816>
  401aa2:	2101      	movs	r1, #1
  401aa4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401aa8:	f04f 0200 	mov.w	r2, #0
  401aac:	9102      	str	r1, [sp, #8]
  401aae:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401ab2:	9105      	str	r1, [sp, #20]
  401ab4:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  401ab8:	e6d3      	b.n	401862 <_vfiprintf_r+0x4c6>
  401aba:	9a08      	ldr	r2, [sp, #32]
  401abc:	6813      	ldr	r3, [r2, #0]
  401abe:	3204      	adds	r2, #4
  401ac0:	9208      	str	r2, [sp, #32]
  401ac2:	9a04      	ldr	r2, [sp, #16]
  401ac4:	601a      	str	r2, [r3, #0]
  401ac6:	e49b      	b.n	401400 <_vfiprintf_r+0x64>
  401ac8:	aa0f      	add	r2, sp, #60	; 0x3c
  401aca:	9901      	ldr	r1, [sp, #4]
  401acc:	4620      	mov	r0, r4
  401ace:	f7ff fc25 	bl	40131c <__sprint_r.part.0>
  401ad2:	2800      	cmp	r0, #0
  401ad4:	d174      	bne.n	401bc0 <_vfiprintf_r+0x824>
  401ad6:	9910      	ldr	r1, [sp, #64]	; 0x40
  401ad8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401ada:	f101 0c01 	add.w	ip, r1, #1
  401ade:	46de      	mov	lr, fp
  401ae0:	e5b3      	b.n	40164a <_vfiprintf_r+0x2ae>
  401ae2:	9910      	ldr	r1, [sp, #64]	; 0x40
  401ae4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401ae6:	1c48      	adds	r0, r1, #1
  401ae8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401aec:	2d00      	cmp	r5, #0
  401aee:	f43f add6 	beq.w	40169e <_vfiprintf_r+0x302>
  401af2:	3201      	adds	r2, #1
  401af4:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  401af8:	2101      	movs	r1, #1
  401afa:	2807      	cmp	r0, #7
  401afc:	9211      	str	r2, [sp, #68]	; 0x44
  401afe:	9010      	str	r0, [sp, #64]	; 0x40
  401b00:	f8ca 5000 	str.w	r5, [sl]
  401b04:	f8ca 1004 	str.w	r1, [sl, #4]
  401b08:	f340 80b6 	ble.w	401c78 <_vfiprintf_r+0x8dc>
  401b0c:	2a00      	cmp	r2, #0
  401b0e:	f040 8155 	bne.w	401dbc <_vfiprintf_r+0xa20>
  401b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401b14:	2b00      	cmp	r3, #0
  401b16:	f43f add3 	beq.w	4016c0 <_vfiprintf_r+0x324>
  401b1a:	ab0e      	add	r3, sp, #56	; 0x38
  401b1c:	2202      	movs	r2, #2
  401b1e:	4608      	mov	r0, r1
  401b20:	931c      	str	r3, [sp, #112]	; 0x70
  401b22:	921d      	str	r2, [sp, #116]	; 0x74
  401b24:	46da      	mov	sl, fp
  401b26:	4601      	mov	r1, r0
  401b28:	f10a 0a08 	add.w	sl, sl, #8
  401b2c:	3001      	adds	r0, #1
  401b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401b30:	2b80      	cmp	r3, #128	; 0x80
  401b32:	f43f adcd 	beq.w	4016d0 <_vfiprintf_r+0x334>
  401b36:	9b05      	ldr	r3, [sp, #20]
  401b38:	1ae4      	subs	r4, r4, r3
  401b3a:	2c00      	cmp	r4, #0
  401b3c:	f77f ae07 	ble.w	40174e <_vfiprintf_r+0x3b2>
  401b40:	2c10      	cmp	r4, #16
  401b42:	4d2c      	ldr	r5, [pc, #176]	; (401bf4 <_vfiprintf_r+0x858>)
  401b44:	dd1d      	ble.n	401b82 <_vfiprintf_r+0x7e6>
  401b46:	46d6      	mov	lr, sl
  401b48:	2610      	movs	r6, #16
  401b4a:	9f06      	ldr	r7, [sp, #24]
  401b4c:	f8dd a004 	ldr.w	sl, [sp, #4]
  401b50:	e006      	b.n	401b60 <_vfiprintf_r+0x7c4>
  401b52:	1c88      	adds	r0, r1, #2
  401b54:	f10e 0e08 	add.w	lr, lr, #8
  401b58:	4619      	mov	r1, r3
  401b5a:	3c10      	subs	r4, #16
  401b5c:	2c10      	cmp	r4, #16
  401b5e:	dd0f      	ble.n	401b80 <_vfiprintf_r+0x7e4>
  401b60:	1c4b      	adds	r3, r1, #1
  401b62:	3210      	adds	r2, #16
  401b64:	2b07      	cmp	r3, #7
  401b66:	9211      	str	r2, [sp, #68]	; 0x44
  401b68:	e88e 0060 	stmia.w	lr, {r5, r6}
  401b6c:	9310      	str	r3, [sp, #64]	; 0x40
  401b6e:	ddf0      	ble.n	401b52 <_vfiprintf_r+0x7b6>
  401b70:	b9a2      	cbnz	r2, 401b9c <_vfiprintf_r+0x800>
  401b72:	3c10      	subs	r4, #16
  401b74:	2c10      	cmp	r4, #16
  401b76:	f04f 0001 	mov.w	r0, #1
  401b7a:	4611      	mov	r1, r2
  401b7c:	46de      	mov	lr, fp
  401b7e:	dcef      	bgt.n	401b60 <_vfiprintf_r+0x7c4>
  401b80:	46f2      	mov	sl, lr
  401b82:	4422      	add	r2, r4
  401b84:	2807      	cmp	r0, #7
  401b86:	9211      	str	r2, [sp, #68]	; 0x44
  401b88:	f8ca 5000 	str.w	r5, [sl]
  401b8c:	f8ca 4004 	str.w	r4, [sl, #4]
  401b90:	9010      	str	r0, [sp, #64]	; 0x40
  401b92:	dc31      	bgt.n	401bf8 <_vfiprintf_r+0x85c>
  401b94:	f10a 0a08 	add.w	sl, sl, #8
  401b98:	3001      	adds	r0, #1
  401b9a:	e5d8      	b.n	40174e <_vfiprintf_r+0x3b2>
  401b9c:	aa0f      	add	r2, sp, #60	; 0x3c
  401b9e:	4651      	mov	r1, sl
  401ba0:	4638      	mov	r0, r7
  401ba2:	f7ff fbbb 	bl	40131c <__sprint_r.part.0>
  401ba6:	b958      	cbnz	r0, 401bc0 <_vfiprintf_r+0x824>
  401ba8:	9910      	ldr	r1, [sp, #64]	; 0x40
  401baa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401bac:	1c48      	adds	r0, r1, #1
  401bae:	46de      	mov	lr, fp
  401bb0:	e7d3      	b.n	401b5a <_vfiprintf_r+0x7be>
  401bb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401bb4:	b123      	cbz	r3, 401bc0 <_vfiprintf_r+0x824>
  401bb6:	9806      	ldr	r0, [sp, #24]
  401bb8:	9901      	ldr	r1, [sp, #4]
  401bba:	aa0f      	add	r2, sp, #60	; 0x3c
  401bbc:	f7ff fbae 	bl	40131c <__sprint_r.part.0>
  401bc0:	9b01      	ldr	r3, [sp, #4]
  401bc2:	899b      	ldrh	r3, [r3, #12]
  401bc4:	065b      	lsls	r3, r3, #25
  401bc6:	f57f acd2 	bpl.w	40156e <_vfiprintf_r+0x1d2>
  401bca:	f04f 33ff 	mov.w	r3, #4294967295
  401bce:	9304      	str	r3, [sp, #16]
  401bd0:	e4cd      	b.n	40156e <_vfiprintf_r+0x1d2>
  401bd2:	aa0f      	add	r2, sp, #60	; 0x3c
  401bd4:	4641      	mov	r1, r8
  401bd6:	4638      	mov	r0, r7
  401bd8:	f7ff fba0 	bl	40131c <__sprint_r.part.0>
  401bdc:	2800      	cmp	r0, #0
  401bde:	d1ef      	bne.n	401bc0 <_vfiprintf_r+0x824>
  401be0:	9910      	ldr	r1, [sp, #64]	; 0x40
  401be2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401be4:	1c48      	adds	r0, r1, #1
  401be6:	46da      	mov	sl, fp
  401be8:	e5d8      	b.n	40179c <_vfiprintf_r+0x400>
  401bea:	bf00      	nop
  401bec:	00403e88 	.word	0x00403e88
  401bf0:	00403e9c 	.word	0x00403e9c
  401bf4:	00403ec8 	.word	0x00403ec8
  401bf8:	2a00      	cmp	r2, #0
  401bfa:	f040 8100 	bne.w	401dfe <_vfiprintf_r+0xa62>
  401bfe:	9a05      	ldr	r2, [sp, #20]
  401c00:	921d      	str	r2, [sp, #116]	; 0x74
  401c02:	2301      	movs	r3, #1
  401c04:	9211      	str	r2, [sp, #68]	; 0x44
  401c06:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
  401c0a:	9310      	str	r3, [sp, #64]	; 0x40
  401c0c:	46da      	mov	sl, fp
  401c0e:	f10a 0a08 	add.w	sl, sl, #8
  401c12:	9b03      	ldr	r3, [sp, #12]
  401c14:	0759      	lsls	r1, r3, #29
  401c16:	d505      	bpl.n	401c24 <_vfiprintf_r+0x888>
  401c18:	9b07      	ldr	r3, [sp, #28]
  401c1a:	9902      	ldr	r1, [sp, #8]
  401c1c:	1a5c      	subs	r4, r3, r1
  401c1e:	2c00      	cmp	r4, #0
  401c20:	f73f adae 	bgt.w	401780 <_vfiprintf_r+0x3e4>
  401c24:	9b04      	ldr	r3, [sp, #16]
  401c26:	9907      	ldr	r1, [sp, #28]
  401c28:	9802      	ldr	r0, [sp, #8]
  401c2a:	4281      	cmp	r1, r0
  401c2c:	bfac      	ite	ge
  401c2e:	185b      	addge	r3, r3, r1
  401c30:	181b      	addlt	r3, r3, r0
  401c32:	9304      	str	r3, [sp, #16]
  401c34:	bb7a      	cbnz	r2, 401c96 <_vfiprintf_r+0x8fa>
  401c36:	2300      	movs	r3, #0
  401c38:	9310      	str	r3, [sp, #64]	; 0x40
  401c3a:	46da      	mov	sl, fp
  401c3c:	f7ff bbe0 	b.w	401400 <_vfiprintf_r+0x64>
  401c40:	aa0f      	add	r2, sp, #60	; 0x3c
  401c42:	9901      	ldr	r1, [sp, #4]
  401c44:	4620      	mov	r0, r4
  401c46:	f7ff fb69 	bl	40131c <__sprint_r.part.0>
  401c4a:	2800      	cmp	r0, #0
  401c4c:	d1b8      	bne.n	401bc0 <_vfiprintf_r+0x824>
  401c4e:	9910      	ldr	r1, [sp, #64]	; 0x40
  401c50:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401c52:	f101 0e01 	add.w	lr, r1, #1
  401c56:	46dc      	mov	ip, fp
  401c58:	e54e      	b.n	4016f8 <_vfiprintf_r+0x35c>
  401c5a:	2a00      	cmp	r2, #0
  401c5c:	f040 811c 	bne.w	401e98 <_vfiprintf_r+0xafc>
  401c60:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  401c64:	2900      	cmp	r1, #0
  401c66:	f000 8111 	beq.w	401e8c <_vfiprintf_r+0xaf0>
  401c6a:	2201      	movs	r2, #1
  401c6c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  401c70:	4610      	mov	r0, r2
  401c72:	921d      	str	r2, [sp, #116]	; 0x74
  401c74:	911c      	str	r1, [sp, #112]	; 0x70
  401c76:	46da      	mov	sl, fp
  401c78:	4601      	mov	r1, r0
  401c7a:	f10a 0a08 	add.w	sl, sl, #8
  401c7e:	3001      	adds	r0, #1
  401c80:	e50d      	b.n	40169e <_vfiprintf_r+0x302>
  401c82:	9b03      	ldr	r3, [sp, #12]
  401c84:	2a01      	cmp	r2, #1
  401c86:	f000 8090 	beq.w	401daa <_vfiprintf_r+0xa0e>
  401c8a:	2a02      	cmp	r2, #2
  401c8c:	d10b      	bne.n	401ca6 <_vfiprintf_r+0x90a>
  401c8e:	9303      	str	r3, [sp, #12]
  401c90:	2600      	movs	r6, #0
  401c92:	2700      	movs	r7, #0
  401c94:	e615      	b.n	4018c2 <_vfiprintf_r+0x526>
  401c96:	aa0f      	add	r2, sp, #60	; 0x3c
  401c98:	9901      	ldr	r1, [sp, #4]
  401c9a:	9806      	ldr	r0, [sp, #24]
  401c9c:	f7ff fb3e 	bl	40131c <__sprint_r.part.0>
  401ca0:	2800      	cmp	r0, #0
  401ca2:	d0c8      	beq.n	401c36 <_vfiprintf_r+0x89a>
  401ca4:	e78c      	b.n	401bc0 <_vfiprintf_r+0x824>
  401ca6:	9303      	str	r3, [sp, #12]
  401ca8:	2600      	movs	r6, #0
  401caa:	2700      	movs	r7, #0
  401cac:	4659      	mov	r1, fp
  401cae:	e000      	b.n	401cb2 <_vfiprintf_r+0x916>
  401cb0:	4641      	mov	r1, r8
  401cb2:	08f2      	lsrs	r2, r6, #3
  401cb4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  401cb8:	08f8      	lsrs	r0, r7, #3
  401cba:	f006 0307 	and.w	r3, r6, #7
  401cbe:	4607      	mov	r7, r0
  401cc0:	4616      	mov	r6, r2
  401cc2:	3330      	adds	r3, #48	; 0x30
  401cc4:	ea56 0207 	orrs.w	r2, r6, r7
  401cc8:	f801 3c01 	strb.w	r3, [r1, #-1]
  401ccc:	f101 38ff 	add.w	r8, r1, #4294967295
  401cd0:	d1ee      	bne.n	401cb0 <_vfiprintf_r+0x914>
  401cd2:	9a03      	ldr	r2, [sp, #12]
  401cd4:	07d6      	lsls	r6, r2, #31
  401cd6:	f57f ae04 	bpl.w	4018e2 <_vfiprintf_r+0x546>
  401cda:	2b30      	cmp	r3, #48	; 0x30
  401cdc:	f43f ae01 	beq.w	4018e2 <_vfiprintf_r+0x546>
  401ce0:	3902      	subs	r1, #2
  401ce2:	2330      	movs	r3, #48	; 0x30
  401ce4:	f808 3c01 	strb.w	r3, [r8, #-1]
  401ce8:	ebab 0301 	sub.w	r3, fp, r1
  401cec:	9305      	str	r3, [sp, #20]
  401cee:	4688      	mov	r8, r1
  401cf0:	e47e      	b.n	4015f0 <_vfiprintf_r+0x254>
  401cf2:	9b04      	ldr	r3, [sp, #16]
  401cf4:	9a07      	ldr	r2, [sp, #28]
  401cf6:	428a      	cmp	r2, r1
  401cf8:	bfac      	ite	ge
  401cfa:	189b      	addge	r3, r3, r2
  401cfc:	185b      	addlt	r3, r3, r1
  401cfe:	9304      	str	r3, [sp, #16]
  401d00:	e799      	b.n	401c36 <_vfiprintf_r+0x89a>
  401d02:	2202      	movs	r2, #2
  401d04:	e455      	b.n	4015b2 <_vfiprintf_r+0x216>
  401d06:	2f00      	cmp	r7, #0
  401d08:	bf08      	it	eq
  401d0a:	2e0a      	cmpeq	r6, #10
  401d0c:	d34c      	bcc.n	401da8 <_vfiprintf_r+0xa0c>
  401d0e:	46d8      	mov	r8, fp
  401d10:	4630      	mov	r0, r6
  401d12:	4639      	mov	r1, r7
  401d14:	220a      	movs	r2, #10
  401d16:	2300      	movs	r3, #0
  401d18:	f001 feb4 	bl	403a84 <__aeabi_uldivmod>
  401d1c:	3230      	adds	r2, #48	; 0x30
  401d1e:	f808 2d01 	strb.w	r2, [r8, #-1]!
  401d22:	4630      	mov	r0, r6
  401d24:	4639      	mov	r1, r7
  401d26:	2300      	movs	r3, #0
  401d28:	220a      	movs	r2, #10
  401d2a:	f001 feab 	bl	403a84 <__aeabi_uldivmod>
  401d2e:	4606      	mov	r6, r0
  401d30:	460f      	mov	r7, r1
  401d32:	ea56 0307 	orrs.w	r3, r6, r7
  401d36:	d1eb      	bne.n	401d10 <_vfiprintf_r+0x974>
  401d38:	ebab 0308 	sub.w	r3, fp, r8
  401d3c:	9305      	str	r3, [sp, #20]
  401d3e:	e457      	b.n	4015f0 <_vfiprintf_r+0x254>
  401d40:	9405      	str	r4, [sp, #20]
  401d42:	46d8      	mov	r8, fp
  401d44:	e454      	b.n	4015f0 <_vfiprintf_r+0x254>
  401d46:	aa0f      	add	r2, sp, #60	; 0x3c
  401d48:	9901      	ldr	r1, [sp, #4]
  401d4a:	9806      	ldr	r0, [sp, #24]
  401d4c:	f7ff fae6 	bl	40131c <__sprint_r.part.0>
  401d50:	2800      	cmp	r0, #0
  401d52:	f47f af35 	bne.w	401bc0 <_vfiprintf_r+0x824>
  401d56:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d58:	46da      	mov	sl, fp
  401d5a:	e75a      	b.n	401c12 <_vfiprintf_r+0x876>
  401d5c:	aa0f      	add	r2, sp, #60	; 0x3c
  401d5e:	9901      	ldr	r1, [sp, #4]
  401d60:	9806      	ldr	r0, [sp, #24]
  401d62:	f7ff fadb 	bl	40131c <__sprint_r.part.0>
  401d66:	2800      	cmp	r0, #0
  401d68:	f47f af2a 	bne.w	401bc0 <_vfiprintf_r+0x824>
  401d6c:	46da      	mov	sl, fp
  401d6e:	f7ff bbe0 	b.w	401532 <_vfiprintf_r+0x196>
  401d72:	3104      	adds	r1, #4
  401d74:	6816      	ldr	r6, [r2, #0]
  401d76:	9108      	str	r1, [sp, #32]
  401d78:	2201      	movs	r2, #1
  401d7a:	2700      	movs	r7, #0
  401d7c:	e419      	b.n	4015b2 <_vfiprintf_r+0x216>
  401d7e:	9808      	ldr	r0, [sp, #32]
  401d80:	4601      	mov	r1, r0
  401d82:	3104      	adds	r1, #4
  401d84:	6806      	ldr	r6, [r0, #0]
  401d86:	9108      	str	r1, [sp, #32]
  401d88:	2700      	movs	r7, #0
  401d8a:	e412      	b.n	4015b2 <_vfiprintf_r+0x216>
  401d8c:	680e      	ldr	r6, [r1, #0]
  401d8e:	3104      	adds	r1, #4
  401d90:	9108      	str	r1, [sp, #32]
  401d92:	2700      	movs	r7, #0
  401d94:	e5d9      	b.n	40194a <_vfiprintf_r+0x5ae>
  401d96:	9908      	ldr	r1, [sp, #32]
  401d98:	680e      	ldr	r6, [r1, #0]
  401d9a:	460a      	mov	r2, r1
  401d9c:	17f7      	asrs	r7, r6, #31
  401d9e:	3204      	adds	r2, #4
  401da0:	9208      	str	r2, [sp, #32]
  401da2:	4630      	mov	r0, r6
  401da4:	4639      	mov	r1, r7
  401da6:	e575      	b.n	401894 <_vfiprintf_r+0x4f8>
  401da8:	9b03      	ldr	r3, [sp, #12]
  401daa:	9303      	str	r3, [sp, #12]
  401dac:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  401db0:	3630      	adds	r6, #48	; 0x30
  401db2:	2301      	movs	r3, #1
  401db4:	f808 6d41 	strb.w	r6, [r8, #-65]!
  401db8:	9305      	str	r3, [sp, #20]
  401dba:	e419      	b.n	4015f0 <_vfiprintf_r+0x254>
  401dbc:	aa0f      	add	r2, sp, #60	; 0x3c
  401dbe:	9901      	ldr	r1, [sp, #4]
  401dc0:	9806      	ldr	r0, [sp, #24]
  401dc2:	f7ff faab 	bl	40131c <__sprint_r.part.0>
  401dc6:	2800      	cmp	r0, #0
  401dc8:	f47f aefa 	bne.w	401bc0 <_vfiprintf_r+0x824>
  401dcc:	9910      	ldr	r1, [sp, #64]	; 0x40
  401dce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401dd0:	1c48      	adds	r0, r1, #1
  401dd2:	46da      	mov	sl, fp
  401dd4:	e463      	b.n	40169e <_vfiprintf_r+0x302>
  401dd6:	aa0f      	add	r2, sp, #60	; 0x3c
  401dd8:	9901      	ldr	r1, [sp, #4]
  401dda:	9806      	ldr	r0, [sp, #24]
  401ddc:	f7ff fa9e 	bl	40131c <__sprint_r.part.0>
  401de0:	2800      	cmp	r0, #0
  401de2:	f47f aeed 	bne.w	401bc0 <_vfiprintf_r+0x824>
  401de6:	9910      	ldr	r1, [sp, #64]	; 0x40
  401de8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401dea:	1c48      	adds	r0, r1, #1
  401dec:	46da      	mov	sl, fp
  401dee:	e69e      	b.n	401b2e <_vfiprintf_r+0x792>
  401df0:	2a00      	cmp	r2, #0
  401df2:	f040 8086 	bne.w	401f02 <_vfiprintf_r+0xb66>
  401df6:	2001      	movs	r0, #1
  401df8:	4611      	mov	r1, r2
  401dfa:	46da      	mov	sl, fp
  401dfc:	e69b      	b.n	401b36 <_vfiprintf_r+0x79a>
  401dfe:	aa0f      	add	r2, sp, #60	; 0x3c
  401e00:	9901      	ldr	r1, [sp, #4]
  401e02:	9806      	ldr	r0, [sp, #24]
  401e04:	f7ff fa8a 	bl	40131c <__sprint_r.part.0>
  401e08:	2800      	cmp	r0, #0
  401e0a:	f47f aed9 	bne.w	401bc0 <_vfiprintf_r+0x824>
  401e0e:	9810      	ldr	r0, [sp, #64]	; 0x40
  401e10:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e12:	3001      	adds	r0, #1
  401e14:	46da      	mov	sl, fp
  401e16:	e49a      	b.n	40174e <_vfiprintf_r+0x3b2>
  401e18:	9e08      	ldr	r6, [sp, #32]
  401e1a:	3607      	adds	r6, #7
  401e1c:	f026 0607 	bic.w	r6, r6, #7
  401e20:	e9d6 0100 	ldrd	r0, r1, [r6]
  401e24:	f106 0208 	add.w	r2, r6, #8
  401e28:	9208      	str	r2, [sp, #32]
  401e2a:	4606      	mov	r6, r0
  401e2c:	460f      	mov	r7, r1
  401e2e:	e531      	b.n	401894 <_vfiprintf_r+0x4f8>
  401e30:	9e08      	ldr	r6, [sp, #32]
  401e32:	3607      	adds	r6, #7
  401e34:	f026 0207 	bic.w	r2, r6, #7
  401e38:	f102 0108 	add.w	r1, r2, #8
  401e3c:	e9d2 6700 	ldrd	r6, r7, [r2]
  401e40:	9108      	str	r1, [sp, #32]
  401e42:	2201      	movs	r2, #1
  401e44:	f7ff bbb5 	b.w	4015b2 <_vfiprintf_r+0x216>
  401e48:	9e08      	ldr	r6, [sp, #32]
  401e4a:	3607      	adds	r6, #7
  401e4c:	f026 0207 	bic.w	r2, r6, #7
  401e50:	f102 0108 	add.w	r1, r2, #8
  401e54:	e9d2 6700 	ldrd	r6, r7, [r2]
  401e58:	9108      	str	r1, [sp, #32]
  401e5a:	2200      	movs	r2, #0
  401e5c:	f7ff bba9 	b.w	4015b2 <_vfiprintf_r+0x216>
  401e60:	9e08      	ldr	r6, [sp, #32]
  401e62:	3607      	adds	r6, #7
  401e64:	f026 0107 	bic.w	r1, r6, #7
  401e68:	f101 0008 	add.w	r0, r1, #8
  401e6c:	9008      	str	r0, [sp, #32]
  401e6e:	e9d1 6700 	ldrd	r6, r7, [r1]
  401e72:	e56a      	b.n	40194a <_vfiprintf_r+0x5ae>
  401e74:	46d8      	mov	r8, fp
  401e76:	f7ff bbbb 	b.w	4015f0 <_vfiprintf_r+0x254>
  401e7a:	252d      	movs	r5, #45	; 0x2d
  401e7c:	4276      	negs	r6, r6
  401e7e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  401e82:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401e86:	2201      	movs	r2, #1
  401e88:	f7ff bb98 	b.w	4015bc <_vfiprintf_r+0x220>
  401e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401e8e:	b9d3      	cbnz	r3, 401ec6 <_vfiprintf_r+0xb2a>
  401e90:	4611      	mov	r1, r2
  401e92:	2001      	movs	r0, #1
  401e94:	46da      	mov	sl, fp
  401e96:	e64e      	b.n	401b36 <_vfiprintf_r+0x79a>
  401e98:	aa0f      	add	r2, sp, #60	; 0x3c
  401e9a:	9901      	ldr	r1, [sp, #4]
  401e9c:	9806      	ldr	r0, [sp, #24]
  401e9e:	f7ff fa3d 	bl	40131c <__sprint_r.part.0>
  401ea2:	2800      	cmp	r0, #0
  401ea4:	f47f ae8c 	bne.w	401bc0 <_vfiprintf_r+0x824>
  401ea8:	9910      	ldr	r1, [sp, #64]	; 0x40
  401eaa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401eac:	1c48      	adds	r0, r1, #1
  401eae:	46da      	mov	sl, fp
  401eb0:	e61a      	b.n	401ae8 <_vfiprintf_r+0x74c>
  401eb2:	aa0f      	add	r2, sp, #60	; 0x3c
  401eb4:	9901      	ldr	r1, [sp, #4]
  401eb6:	9806      	ldr	r0, [sp, #24]
  401eb8:	f7ff fa30 	bl	40131c <__sprint_r.part.0>
  401ebc:	2800      	cmp	r0, #0
  401ebe:	f47f ae7f 	bne.w	401bc0 <_vfiprintf_r+0x824>
  401ec2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401ec4:	e6ae      	b.n	401c24 <_vfiprintf_r+0x888>
  401ec6:	ab0e      	add	r3, sp, #56	; 0x38
  401ec8:	2202      	movs	r2, #2
  401eca:	931c      	str	r3, [sp, #112]	; 0x70
  401ecc:	921d      	str	r2, [sp, #116]	; 0x74
  401ece:	2001      	movs	r0, #1
  401ed0:	46da      	mov	sl, fp
  401ed2:	e628      	b.n	401b26 <_vfiprintf_r+0x78a>
  401ed4:	9a08      	ldr	r2, [sp, #32]
  401ed6:	9904      	ldr	r1, [sp, #16]
  401ed8:	6813      	ldr	r3, [r2, #0]
  401eda:	17cd      	asrs	r5, r1, #31
  401edc:	4608      	mov	r0, r1
  401ede:	3204      	adds	r2, #4
  401ee0:	4629      	mov	r1, r5
  401ee2:	9208      	str	r2, [sp, #32]
  401ee4:	e9c3 0100 	strd	r0, r1, [r3]
  401ee8:	f7ff ba8a 	b.w	401400 <_vfiprintf_r+0x64>
  401eec:	4640      	mov	r0, r8
  401eee:	9608      	str	r6, [sp, #32]
  401ef0:	9303      	str	r3, [sp, #12]
  401ef2:	f7ff f9a5 	bl	401240 <strlen>
  401ef6:	2400      	movs	r4, #0
  401ef8:	9005      	str	r0, [sp, #20]
  401efa:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401efe:	f7ff bb77 	b.w	4015f0 <_vfiprintf_r+0x254>
  401f02:	aa0f      	add	r2, sp, #60	; 0x3c
  401f04:	9901      	ldr	r1, [sp, #4]
  401f06:	9806      	ldr	r0, [sp, #24]
  401f08:	f7ff fa08 	bl	40131c <__sprint_r.part.0>
  401f0c:	2800      	cmp	r0, #0
  401f0e:	f47f ae57 	bne.w	401bc0 <_vfiprintf_r+0x824>
  401f12:	9910      	ldr	r1, [sp, #64]	; 0x40
  401f14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f16:	1c48      	adds	r0, r1, #1
  401f18:	46da      	mov	sl, fp
  401f1a:	e60c      	b.n	401b36 <_vfiprintf_r+0x79a>
  401f1c:	9910      	ldr	r1, [sp, #64]	; 0x40
  401f1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f20:	4e1c      	ldr	r6, [pc, #112]	; (401f94 <_vfiprintf_r+0xbf8>)
  401f22:	3101      	adds	r1, #1
  401f24:	f7ff bba9 	b.w	40167a <_vfiprintf_r+0x2de>
  401f28:	2c06      	cmp	r4, #6
  401f2a:	bf28      	it	cs
  401f2c:	2406      	movcs	r4, #6
  401f2e:	9405      	str	r4, [sp, #20]
  401f30:	9608      	str	r6, [sp, #32]
  401f32:	9402      	str	r4, [sp, #8]
  401f34:	f8df 8060 	ldr.w	r8, [pc, #96]	; 401f98 <_vfiprintf_r+0xbfc>
  401f38:	e493      	b.n	401862 <_vfiprintf_r+0x4c6>
  401f3a:	9810      	ldr	r0, [sp, #64]	; 0x40
  401f3c:	4e15      	ldr	r6, [pc, #84]	; (401f94 <_vfiprintf_r+0xbf8>)
  401f3e:	3001      	adds	r0, #1
  401f40:	e443      	b.n	4017ca <_vfiprintf_r+0x42e>
  401f42:	4686      	mov	lr, r0
  401f44:	f7ff bbef 	b.w	401726 <_vfiprintf_r+0x38a>
  401f48:	9405      	str	r4, [sp, #20]
  401f4a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401f4e:	9608      	str	r6, [sp, #32]
  401f50:	9303      	str	r3, [sp, #12]
  401f52:	4604      	mov	r4, r0
  401f54:	f7ff bb4c 	b.w	4015f0 <_vfiprintf_r+0x254>
  401f58:	9908      	ldr	r1, [sp, #32]
  401f5a:	f899 2001 	ldrb.w	r2, [r9, #1]
  401f5e:	680c      	ldr	r4, [r1, #0]
  401f60:	3104      	adds	r1, #4
  401f62:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  401f66:	46b9      	mov	r9, r7
  401f68:	9108      	str	r1, [sp, #32]
  401f6a:	f7ff ba7e 	b.w	40146a <_vfiprintf_r+0xce>
  401f6e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f72:	e4c6      	b.n	401902 <_vfiprintf_r+0x566>
  401f74:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f78:	e47a      	b.n	401870 <_vfiprintf_r+0x4d4>
  401f7a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f7e:	e575      	b.n	401a6c <_vfiprintf_r+0x6d0>
  401f80:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f84:	e4d0      	b.n	401928 <_vfiprintf_r+0x58c>
  401f86:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f8a:	e587      	b.n	401a9c <_vfiprintf_r+0x700>
  401f8c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f90:	e522      	b.n	4019d8 <_vfiprintf_r+0x63c>
  401f92:	bf00      	nop
  401f94:	00403eb8 	.word	0x00403eb8
  401f98:	00403eb0 	.word	0x00403eb0

00401f9c <__sbprintf>:
  401f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  401f9e:	460c      	mov	r4, r1
  401fa0:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  401fa4:	8989      	ldrh	r1, [r1, #12]
  401fa6:	6e66      	ldr	r6, [r4, #100]	; 0x64
  401fa8:	89e5      	ldrh	r5, [r4, #14]
  401faa:	9619      	str	r6, [sp, #100]	; 0x64
  401fac:	f021 0102 	bic.w	r1, r1, #2
  401fb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
  401fb2:	f8ad 500e 	strh.w	r5, [sp, #14]
  401fb6:	2500      	movs	r5, #0
  401fb8:	69e7      	ldr	r7, [r4, #28]
  401fba:	f8ad 100c 	strh.w	r1, [sp, #12]
  401fbe:	9609      	str	r6, [sp, #36]	; 0x24
  401fc0:	9506      	str	r5, [sp, #24]
  401fc2:	ae1a      	add	r6, sp, #104	; 0x68
  401fc4:	f44f 6580 	mov.w	r5, #1024	; 0x400
  401fc8:	4669      	mov	r1, sp
  401fca:	9600      	str	r6, [sp, #0]
  401fcc:	9604      	str	r6, [sp, #16]
  401fce:	9502      	str	r5, [sp, #8]
  401fd0:	9505      	str	r5, [sp, #20]
  401fd2:	9707      	str	r7, [sp, #28]
  401fd4:	4606      	mov	r6, r0
  401fd6:	f7ff f9e1 	bl	40139c <_vfiprintf_r>
  401fda:	1e05      	subs	r5, r0, #0
  401fdc:	db07      	blt.n	401fee <__sbprintf+0x52>
  401fde:	4630      	mov	r0, r6
  401fe0:	4669      	mov	r1, sp
  401fe2:	f000 f925 	bl	402230 <_fflush_r>
  401fe6:	2800      	cmp	r0, #0
  401fe8:	bf18      	it	ne
  401fea:	f04f 35ff 	movne.w	r5, #4294967295
  401fee:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  401ff2:	065b      	lsls	r3, r3, #25
  401ff4:	d503      	bpl.n	401ffe <__sbprintf+0x62>
  401ff6:	89a3      	ldrh	r3, [r4, #12]
  401ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401ffc:	81a3      	strh	r3, [r4, #12]
  401ffe:	4628      	mov	r0, r5
  402000:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  402004:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402006:	bf00      	nop

00402008 <__swsetup_r>:
  402008:	b538      	push	{r3, r4, r5, lr}
  40200a:	4b30      	ldr	r3, [pc, #192]	; (4020cc <__swsetup_r+0xc4>)
  40200c:	681b      	ldr	r3, [r3, #0]
  40200e:	4605      	mov	r5, r0
  402010:	460c      	mov	r4, r1
  402012:	b113      	cbz	r3, 40201a <__swsetup_r+0x12>
  402014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402016:	2a00      	cmp	r2, #0
  402018:	d038      	beq.n	40208c <__swsetup_r+0x84>
  40201a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40201e:	b293      	uxth	r3, r2
  402020:	0718      	lsls	r0, r3, #28
  402022:	d50c      	bpl.n	40203e <__swsetup_r+0x36>
  402024:	6920      	ldr	r0, [r4, #16]
  402026:	b1a8      	cbz	r0, 402054 <__swsetup_r+0x4c>
  402028:	f013 0201 	ands.w	r2, r3, #1
  40202c:	d01e      	beq.n	40206c <__swsetup_r+0x64>
  40202e:	6963      	ldr	r3, [r4, #20]
  402030:	2200      	movs	r2, #0
  402032:	425b      	negs	r3, r3
  402034:	61a3      	str	r3, [r4, #24]
  402036:	60a2      	str	r2, [r4, #8]
  402038:	b1f0      	cbz	r0, 402078 <__swsetup_r+0x70>
  40203a:	2000      	movs	r0, #0
  40203c:	bd38      	pop	{r3, r4, r5, pc}
  40203e:	06d9      	lsls	r1, r3, #27
  402040:	d53c      	bpl.n	4020bc <__swsetup_r+0xb4>
  402042:	0758      	lsls	r0, r3, #29
  402044:	d426      	bmi.n	402094 <__swsetup_r+0x8c>
  402046:	6920      	ldr	r0, [r4, #16]
  402048:	f042 0308 	orr.w	r3, r2, #8
  40204c:	81a3      	strh	r3, [r4, #12]
  40204e:	b29b      	uxth	r3, r3
  402050:	2800      	cmp	r0, #0
  402052:	d1e9      	bne.n	402028 <__swsetup_r+0x20>
  402054:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402058:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40205c:	d0e4      	beq.n	402028 <__swsetup_r+0x20>
  40205e:	4628      	mov	r0, r5
  402060:	4621      	mov	r1, r4
  402062:	f000 fd13 	bl	402a8c <__smakebuf_r>
  402066:	89a3      	ldrh	r3, [r4, #12]
  402068:	6920      	ldr	r0, [r4, #16]
  40206a:	e7dd      	b.n	402028 <__swsetup_r+0x20>
  40206c:	0799      	lsls	r1, r3, #30
  40206e:	bf58      	it	pl
  402070:	6962      	ldrpl	r2, [r4, #20]
  402072:	60a2      	str	r2, [r4, #8]
  402074:	2800      	cmp	r0, #0
  402076:	d1e0      	bne.n	40203a <__swsetup_r+0x32>
  402078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40207c:	061a      	lsls	r2, r3, #24
  40207e:	d5dd      	bpl.n	40203c <__swsetup_r+0x34>
  402080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402084:	81a3      	strh	r3, [r4, #12]
  402086:	f04f 30ff 	mov.w	r0, #4294967295
  40208a:	bd38      	pop	{r3, r4, r5, pc}
  40208c:	4618      	mov	r0, r3
  40208e:	f000 f963 	bl	402358 <__sinit>
  402092:	e7c2      	b.n	40201a <__swsetup_r+0x12>
  402094:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402096:	b151      	cbz	r1, 4020ae <__swsetup_r+0xa6>
  402098:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40209c:	4299      	cmp	r1, r3
  40209e:	d004      	beq.n	4020aa <__swsetup_r+0xa2>
  4020a0:	4628      	mov	r0, r5
  4020a2:	f000 fa2f 	bl	402504 <_free_r>
  4020a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4020aa:	2300      	movs	r3, #0
  4020ac:	6323      	str	r3, [r4, #48]	; 0x30
  4020ae:	2300      	movs	r3, #0
  4020b0:	6920      	ldr	r0, [r4, #16]
  4020b2:	6063      	str	r3, [r4, #4]
  4020b4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4020b8:	6020      	str	r0, [r4, #0]
  4020ba:	e7c5      	b.n	402048 <__swsetup_r+0x40>
  4020bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4020c0:	2309      	movs	r3, #9
  4020c2:	602b      	str	r3, [r5, #0]
  4020c4:	f04f 30ff 	mov.w	r0, #4294967295
  4020c8:	81a2      	strh	r2, [r4, #12]
  4020ca:	bd38      	pop	{r3, r4, r5, pc}
  4020cc:	20400010 	.word	0x20400010

004020d0 <register_fini>:
  4020d0:	4b02      	ldr	r3, [pc, #8]	; (4020dc <register_fini+0xc>)
  4020d2:	b113      	cbz	r3, 4020da <register_fini+0xa>
  4020d4:	4802      	ldr	r0, [pc, #8]	; (4020e0 <register_fini+0x10>)
  4020d6:	f000 b805 	b.w	4020e4 <atexit>
  4020da:	4770      	bx	lr
  4020dc:	00000000 	.word	0x00000000
  4020e0:	0040236d 	.word	0x0040236d

004020e4 <atexit>:
  4020e4:	2300      	movs	r3, #0
  4020e6:	4601      	mov	r1, r0
  4020e8:	461a      	mov	r2, r3
  4020ea:	4618      	mov	r0, r3
  4020ec:	f001 bbd4 	b.w	403898 <__register_exitproc>

004020f0 <__sflush_r>:
  4020f0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4020f4:	b29a      	uxth	r2, r3
  4020f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4020fa:	460d      	mov	r5, r1
  4020fc:	0711      	lsls	r1, r2, #28
  4020fe:	4680      	mov	r8, r0
  402100:	d43a      	bmi.n	402178 <__sflush_r+0x88>
  402102:	686a      	ldr	r2, [r5, #4]
  402104:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402108:	2a00      	cmp	r2, #0
  40210a:	81ab      	strh	r3, [r5, #12]
  40210c:	dd6f      	ble.n	4021ee <__sflush_r+0xfe>
  40210e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402110:	2c00      	cmp	r4, #0
  402112:	d049      	beq.n	4021a8 <__sflush_r+0xb8>
  402114:	2200      	movs	r2, #0
  402116:	b29b      	uxth	r3, r3
  402118:	f8d8 6000 	ldr.w	r6, [r8]
  40211c:	f8c8 2000 	str.w	r2, [r8]
  402120:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402124:	d067      	beq.n	4021f6 <__sflush_r+0x106>
  402126:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402128:	075f      	lsls	r7, r3, #29
  40212a:	d505      	bpl.n	402138 <__sflush_r+0x48>
  40212c:	6869      	ldr	r1, [r5, #4]
  40212e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402130:	1a52      	subs	r2, r2, r1
  402132:	b10b      	cbz	r3, 402138 <__sflush_r+0x48>
  402134:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402136:	1ad2      	subs	r2, r2, r3
  402138:	2300      	movs	r3, #0
  40213a:	69e9      	ldr	r1, [r5, #28]
  40213c:	4640      	mov	r0, r8
  40213e:	47a0      	blx	r4
  402140:	1c44      	adds	r4, r0, #1
  402142:	d03c      	beq.n	4021be <__sflush_r+0xce>
  402144:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402148:	692a      	ldr	r2, [r5, #16]
  40214a:	602a      	str	r2, [r5, #0]
  40214c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402150:	2200      	movs	r2, #0
  402152:	81ab      	strh	r3, [r5, #12]
  402154:	04db      	lsls	r3, r3, #19
  402156:	606a      	str	r2, [r5, #4]
  402158:	d447      	bmi.n	4021ea <__sflush_r+0xfa>
  40215a:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40215c:	f8c8 6000 	str.w	r6, [r8]
  402160:	b311      	cbz	r1, 4021a8 <__sflush_r+0xb8>
  402162:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402166:	4299      	cmp	r1, r3
  402168:	d002      	beq.n	402170 <__sflush_r+0x80>
  40216a:	4640      	mov	r0, r8
  40216c:	f000 f9ca 	bl	402504 <_free_r>
  402170:	2000      	movs	r0, #0
  402172:	6328      	str	r0, [r5, #48]	; 0x30
  402174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402178:	692e      	ldr	r6, [r5, #16]
  40217a:	b1ae      	cbz	r6, 4021a8 <__sflush_r+0xb8>
  40217c:	682c      	ldr	r4, [r5, #0]
  40217e:	602e      	str	r6, [r5, #0]
  402180:	0791      	lsls	r1, r2, #30
  402182:	bf0c      	ite	eq
  402184:	696b      	ldreq	r3, [r5, #20]
  402186:	2300      	movne	r3, #0
  402188:	1ba4      	subs	r4, r4, r6
  40218a:	60ab      	str	r3, [r5, #8]
  40218c:	e00a      	b.n	4021a4 <__sflush_r+0xb4>
  40218e:	4623      	mov	r3, r4
  402190:	4632      	mov	r2, r6
  402192:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402194:	69e9      	ldr	r1, [r5, #28]
  402196:	4640      	mov	r0, r8
  402198:	47b8      	blx	r7
  40219a:	2800      	cmp	r0, #0
  40219c:	eba4 0400 	sub.w	r4, r4, r0
  4021a0:	4406      	add	r6, r0
  4021a2:	dd04      	ble.n	4021ae <__sflush_r+0xbe>
  4021a4:	2c00      	cmp	r4, #0
  4021a6:	dcf2      	bgt.n	40218e <__sflush_r+0x9e>
  4021a8:	2000      	movs	r0, #0
  4021aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4021ae:	89ab      	ldrh	r3, [r5, #12]
  4021b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4021b4:	81ab      	strh	r3, [r5, #12]
  4021b6:	f04f 30ff 	mov.w	r0, #4294967295
  4021ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4021be:	f8d8 4000 	ldr.w	r4, [r8]
  4021c2:	2c1d      	cmp	r4, #29
  4021c4:	d8f3      	bhi.n	4021ae <__sflush_r+0xbe>
  4021c6:	4b19      	ldr	r3, [pc, #100]	; (40222c <__sflush_r+0x13c>)
  4021c8:	40e3      	lsrs	r3, r4
  4021ca:	43db      	mvns	r3, r3
  4021cc:	f013 0301 	ands.w	r3, r3, #1
  4021d0:	d1ed      	bne.n	4021ae <__sflush_r+0xbe>
  4021d2:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4021d6:	606b      	str	r3, [r5, #4]
  4021d8:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4021dc:	6929      	ldr	r1, [r5, #16]
  4021de:	81ab      	strh	r3, [r5, #12]
  4021e0:	04da      	lsls	r2, r3, #19
  4021e2:	6029      	str	r1, [r5, #0]
  4021e4:	d5b9      	bpl.n	40215a <__sflush_r+0x6a>
  4021e6:	2c00      	cmp	r4, #0
  4021e8:	d1b7      	bne.n	40215a <__sflush_r+0x6a>
  4021ea:	6528      	str	r0, [r5, #80]	; 0x50
  4021ec:	e7b5      	b.n	40215a <__sflush_r+0x6a>
  4021ee:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4021f0:	2a00      	cmp	r2, #0
  4021f2:	dc8c      	bgt.n	40210e <__sflush_r+0x1e>
  4021f4:	e7d8      	b.n	4021a8 <__sflush_r+0xb8>
  4021f6:	2301      	movs	r3, #1
  4021f8:	69e9      	ldr	r1, [r5, #28]
  4021fa:	4640      	mov	r0, r8
  4021fc:	47a0      	blx	r4
  4021fe:	1c43      	adds	r3, r0, #1
  402200:	4602      	mov	r2, r0
  402202:	d002      	beq.n	40220a <__sflush_r+0x11a>
  402204:	89ab      	ldrh	r3, [r5, #12]
  402206:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402208:	e78e      	b.n	402128 <__sflush_r+0x38>
  40220a:	f8d8 3000 	ldr.w	r3, [r8]
  40220e:	2b00      	cmp	r3, #0
  402210:	d0f8      	beq.n	402204 <__sflush_r+0x114>
  402212:	2b1d      	cmp	r3, #29
  402214:	d001      	beq.n	40221a <__sflush_r+0x12a>
  402216:	2b16      	cmp	r3, #22
  402218:	d102      	bne.n	402220 <__sflush_r+0x130>
  40221a:	f8c8 6000 	str.w	r6, [r8]
  40221e:	e7c3      	b.n	4021a8 <__sflush_r+0xb8>
  402220:	89ab      	ldrh	r3, [r5, #12]
  402222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402226:	81ab      	strh	r3, [r5, #12]
  402228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40222c:	20400001 	.word	0x20400001

00402230 <_fflush_r>:
  402230:	b510      	push	{r4, lr}
  402232:	4604      	mov	r4, r0
  402234:	b082      	sub	sp, #8
  402236:	b108      	cbz	r0, 40223c <_fflush_r+0xc>
  402238:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40223a:	b153      	cbz	r3, 402252 <_fflush_r+0x22>
  40223c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  402240:	b908      	cbnz	r0, 402246 <_fflush_r+0x16>
  402242:	b002      	add	sp, #8
  402244:	bd10      	pop	{r4, pc}
  402246:	4620      	mov	r0, r4
  402248:	b002      	add	sp, #8
  40224a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40224e:	f7ff bf4f 	b.w	4020f0 <__sflush_r>
  402252:	9101      	str	r1, [sp, #4]
  402254:	f000 f880 	bl	402358 <__sinit>
  402258:	9901      	ldr	r1, [sp, #4]
  40225a:	e7ef      	b.n	40223c <_fflush_r+0xc>

0040225c <_cleanup_r>:
  40225c:	4901      	ldr	r1, [pc, #4]	; (402264 <_cleanup_r+0x8>)
  40225e:	f000 bbaf 	b.w	4029c0 <_fwalk_reent>
  402262:	bf00      	nop
  402264:	00403961 	.word	0x00403961

00402268 <__sinit.part.1>:
  402268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40226c:	4b35      	ldr	r3, [pc, #212]	; (402344 <__sinit.part.1+0xdc>)
  40226e:	6845      	ldr	r5, [r0, #4]
  402270:	63c3      	str	r3, [r0, #60]	; 0x3c
  402272:	2400      	movs	r4, #0
  402274:	4607      	mov	r7, r0
  402276:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40227a:	2304      	movs	r3, #4
  40227c:	2103      	movs	r1, #3
  40227e:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  402282:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  402286:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40228a:	b083      	sub	sp, #12
  40228c:	602c      	str	r4, [r5, #0]
  40228e:	606c      	str	r4, [r5, #4]
  402290:	60ac      	str	r4, [r5, #8]
  402292:	666c      	str	r4, [r5, #100]	; 0x64
  402294:	81ec      	strh	r4, [r5, #14]
  402296:	612c      	str	r4, [r5, #16]
  402298:	616c      	str	r4, [r5, #20]
  40229a:	61ac      	str	r4, [r5, #24]
  40229c:	81ab      	strh	r3, [r5, #12]
  40229e:	4621      	mov	r1, r4
  4022a0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4022a4:	2208      	movs	r2, #8
  4022a6:	f7fe fe8b 	bl	400fc0 <memset>
  4022aa:	68be      	ldr	r6, [r7, #8]
  4022ac:	f8df b098 	ldr.w	fp, [pc, #152]	; 402348 <__sinit.part.1+0xe0>
  4022b0:	f8df a098 	ldr.w	sl, [pc, #152]	; 40234c <__sinit.part.1+0xe4>
  4022b4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 402350 <__sinit.part.1+0xe8>
  4022b8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 402354 <__sinit.part.1+0xec>
  4022bc:	f8c5 b020 	str.w	fp, [r5, #32]
  4022c0:	2301      	movs	r3, #1
  4022c2:	2209      	movs	r2, #9
  4022c4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4022c8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4022cc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4022d0:	61ed      	str	r5, [r5, #28]
  4022d2:	4621      	mov	r1, r4
  4022d4:	81f3      	strh	r3, [r6, #14]
  4022d6:	81b2      	strh	r2, [r6, #12]
  4022d8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4022dc:	6034      	str	r4, [r6, #0]
  4022de:	6074      	str	r4, [r6, #4]
  4022e0:	60b4      	str	r4, [r6, #8]
  4022e2:	6674      	str	r4, [r6, #100]	; 0x64
  4022e4:	6134      	str	r4, [r6, #16]
  4022e6:	6174      	str	r4, [r6, #20]
  4022e8:	61b4      	str	r4, [r6, #24]
  4022ea:	2208      	movs	r2, #8
  4022ec:	9301      	str	r3, [sp, #4]
  4022ee:	f7fe fe67 	bl	400fc0 <memset>
  4022f2:	68fd      	ldr	r5, [r7, #12]
  4022f4:	61f6      	str	r6, [r6, #28]
  4022f6:	2012      	movs	r0, #18
  4022f8:	2202      	movs	r2, #2
  4022fa:	f8c6 b020 	str.w	fp, [r6, #32]
  4022fe:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  402302:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  402306:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40230a:	4621      	mov	r1, r4
  40230c:	81a8      	strh	r0, [r5, #12]
  40230e:	81ea      	strh	r2, [r5, #14]
  402310:	602c      	str	r4, [r5, #0]
  402312:	606c      	str	r4, [r5, #4]
  402314:	60ac      	str	r4, [r5, #8]
  402316:	666c      	str	r4, [r5, #100]	; 0x64
  402318:	612c      	str	r4, [r5, #16]
  40231a:	616c      	str	r4, [r5, #20]
  40231c:	61ac      	str	r4, [r5, #24]
  40231e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402322:	2208      	movs	r2, #8
  402324:	f7fe fe4c 	bl	400fc0 <memset>
  402328:	9b01      	ldr	r3, [sp, #4]
  40232a:	61ed      	str	r5, [r5, #28]
  40232c:	f8c5 b020 	str.w	fp, [r5, #32]
  402330:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402334:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402338:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40233c:	63bb      	str	r3, [r7, #56]	; 0x38
  40233e:	b003      	add	sp, #12
  402340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402344:	0040225d 	.word	0x0040225d
  402348:	004036c5 	.word	0x004036c5
  40234c:	004036e9 	.word	0x004036e9
  402350:	00403725 	.word	0x00403725
  402354:	00403745 	.word	0x00403745

00402358 <__sinit>:
  402358:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40235a:	b103      	cbz	r3, 40235e <__sinit+0x6>
  40235c:	4770      	bx	lr
  40235e:	f7ff bf83 	b.w	402268 <__sinit.part.1>
  402362:	bf00      	nop

00402364 <__sfp_lock_acquire>:
  402364:	4770      	bx	lr
  402366:	bf00      	nop

00402368 <__sfp_lock_release>:
  402368:	4770      	bx	lr
  40236a:	bf00      	nop

0040236c <__libc_fini_array>:
  40236c:	b538      	push	{r3, r4, r5, lr}
  40236e:	4c0a      	ldr	r4, [pc, #40]	; (402398 <__libc_fini_array+0x2c>)
  402370:	4d0a      	ldr	r5, [pc, #40]	; (40239c <__libc_fini_array+0x30>)
  402372:	1b64      	subs	r4, r4, r5
  402374:	10a4      	asrs	r4, r4, #2
  402376:	d00a      	beq.n	40238e <__libc_fini_array+0x22>
  402378:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40237c:	3b01      	subs	r3, #1
  40237e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402382:	3c01      	subs	r4, #1
  402384:	f855 3904 	ldr.w	r3, [r5], #-4
  402388:	4798      	blx	r3
  40238a:	2c00      	cmp	r4, #0
  40238c:	d1f9      	bne.n	402382 <__libc_fini_array+0x16>
  40238e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402392:	f001 be35 	b.w	404000 <_fini>
  402396:	bf00      	nop
  402398:	00404010 	.word	0x00404010
  40239c:	0040400c 	.word	0x0040400c

004023a0 <__fputwc>:
  4023a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4023a4:	b082      	sub	sp, #8
  4023a6:	4680      	mov	r8, r0
  4023a8:	4689      	mov	r9, r1
  4023aa:	4614      	mov	r4, r2
  4023ac:	f000 fb32 	bl	402a14 <__locale_mb_cur_max>
  4023b0:	2801      	cmp	r0, #1
  4023b2:	d036      	beq.n	402422 <__fputwc+0x82>
  4023b4:	464a      	mov	r2, r9
  4023b6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4023ba:	a901      	add	r1, sp, #4
  4023bc:	4640      	mov	r0, r8
  4023be:	f001 fa1d 	bl	4037fc <_wcrtomb_r>
  4023c2:	1c42      	adds	r2, r0, #1
  4023c4:	4606      	mov	r6, r0
  4023c6:	d025      	beq.n	402414 <__fputwc+0x74>
  4023c8:	b3a8      	cbz	r0, 402436 <__fputwc+0x96>
  4023ca:	f89d e004 	ldrb.w	lr, [sp, #4]
  4023ce:	2500      	movs	r5, #0
  4023d0:	f10d 0a04 	add.w	sl, sp, #4
  4023d4:	e009      	b.n	4023ea <__fputwc+0x4a>
  4023d6:	6823      	ldr	r3, [r4, #0]
  4023d8:	1c5a      	adds	r2, r3, #1
  4023da:	6022      	str	r2, [r4, #0]
  4023dc:	f883 e000 	strb.w	lr, [r3]
  4023e0:	3501      	adds	r5, #1
  4023e2:	42b5      	cmp	r5, r6
  4023e4:	d227      	bcs.n	402436 <__fputwc+0x96>
  4023e6:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4023ea:	68a3      	ldr	r3, [r4, #8]
  4023ec:	3b01      	subs	r3, #1
  4023ee:	2b00      	cmp	r3, #0
  4023f0:	60a3      	str	r3, [r4, #8]
  4023f2:	daf0      	bge.n	4023d6 <__fputwc+0x36>
  4023f4:	69a7      	ldr	r7, [r4, #24]
  4023f6:	42bb      	cmp	r3, r7
  4023f8:	4671      	mov	r1, lr
  4023fa:	4622      	mov	r2, r4
  4023fc:	4640      	mov	r0, r8
  4023fe:	db02      	blt.n	402406 <__fputwc+0x66>
  402400:	f1be 0f0a 	cmp.w	lr, #10
  402404:	d1e7      	bne.n	4023d6 <__fputwc+0x36>
  402406:	f001 f9a1 	bl	40374c <__swbuf_r>
  40240a:	1c43      	adds	r3, r0, #1
  40240c:	d1e8      	bne.n	4023e0 <__fputwc+0x40>
  40240e:	b002      	add	sp, #8
  402410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402414:	89a3      	ldrh	r3, [r4, #12]
  402416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40241a:	81a3      	strh	r3, [r4, #12]
  40241c:	b002      	add	sp, #8
  40241e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402422:	f109 33ff 	add.w	r3, r9, #4294967295
  402426:	2bfe      	cmp	r3, #254	; 0xfe
  402428:	d8c4      	bhi.n	4023b4 <__fputwc+0x14>
  40242a:	fa5f fe89 	uxtb.w	lr, r9
  40242e:	4606      	mov	r6, r0
  402430:	f88d e004 	strb.w	lr, [sp, #4]
  402434:	e7cb      	b.n	4023ce <__fputwc+0x2e>
  402436:	4648      	mov	r0, r9
  402438:	b002      	add	sp, #8
  40243a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40243e:	bf00      	nop

00402440 <_fputwc_r>:
  402440:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402444:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  402448:	d10a      	bne.n	402460 <_fputwc_r+0x20>
  40244a:	b410      	push	{r4}
  40244c:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40244e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402452:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  402456:	6654      	str	r4, [r2, #100]	; 0x64
  402458:	8193      	strh	r3, [r2, #12]
  40245a:	bc10      	pop	{r4}
  40245c:	f7ff bfa0 	b.w	4023a0 <__fputwc>
  402460:	f7ff bf9e 	b.w	4023a0 <__fputwc>

00402464 <_malloc_trim_r>:
  402464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402466:	4f24      	ldr	r7, [pc, #144]	; (4024f8 <_malloc_trim_r+0x94>)
  402468:	460c      	mov	r4, r1
  40246a:	4606      	mov	r6, r0
  40246c:	f000 ff6e 	bl	40334c <__malloc_lock>
  402470:	68bb      	ldr	r3, [r7, #8]
  402472:	685d      	ldr	r5, [r3, #4]
  402474:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402478:	310f      	adds	r1, #15
  40247a:	f025 0503 	bic.w	r5, r5, #3
  40247e:	4429      	add	r1, r5
  402480:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402484:	f021 010f 	bic.w	r1, r1, #15
  402488:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40248c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402490:	db07      	blt.n	4024a2 <_malloc_trim_r+0x3e>
  402492:	2100      	movs	r1, #0
  402494:	4630      	mov	r0, r6
  402496:	f001 f903 	bl	4036a0 <_sbrk_r>
  40249a:	68bb      	ldr	r3, [r7, #8]
  40249c:	442b      	add	r3, r5
  40249e:	4298      	cmp	r0, r3
  4024a0:	d004      	beq.n	4024ac <_malloc_trim_r+0x48>
  4024a2:	4630      	mov	r0, r6
  4024a4:	f000 ff54 	bl	403350 <__malloc_unlock>
  4024a8:	2000      	movs	r0, #0
  4024aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024ac:	4261      	negs	r1, r4
  4024ae:	4630      	mov	r0, r6
  4024b0:	f001 f8f6 	bl	4036a0 <_sbrk_r>
  4024b4:	3001      	adds	r0, #1
  4024b6:	d00d      	beq.n	4024d4 <_malloc_trim_r+0x70>
  4024b8:	4b10      	ldr	r3, [pc, #64]	; (4024fc <_malloc_trim_r+0x98>)
  4024ba:	68ba      	ldr	r2, [r7, #8]
  4024bc:	6819      	ldr	r1, [r3, #0]
  4024be:	1b2d      	subs	r5, r5, r4
  4024c0:	f045 0501 	orr.w	r5, r5, #1
  4024c4:	4630      	mov	r0, r6
  4024c6:	1b09      	subs	r1, r1, r4
  4024c8:	6055      	str	r5, [r2, #4]
  4024ca:	6019      	str	r1, [r3, #0]
  4024cc:	f000 ff40 	bl	403350 <__malloc_unlock>
  4024d0:	2001      	movs	r0, #1
  4024d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024d4:	2100      	movs	r1, #0
  4024d6:	4630      	mov	r0, r6
  4024d8:	f001 f8e2 	bl	4036a0 <_sbrk_r>
  4024dc:	68ba      	ldr	r2, [r7, #8]
  4024de:	1a83      	subs	r3, r0, r2
  4024e0:	2b0f      	cmp	r3, #15
  4024e2:	ddde      	ble.n	4024a2 <_malloc_trim_r+0x3e>
  4024e4:	4c06      	ldr	r4, [pc, #24]	; (402500 <_malloc_trim_r+0x9c>)
  4024e6:	4905      	ldr	r1, [pc, #20]	; (4024fc <_malloc_trim_r+0x98>)
  4024e8:	6824      	ldr	r4, [r4, #0]
  4024ea:	f043 0301 	orr.w	r3, r3, #1
  4024ee:	1b00      	subs	r0, r0, r4
  4024f0:	6053      	str	r3, [r2, #4]
  4024f2:	6008      	str	r0, [r1, #0]
  4024f4:	e7d5      	b.n	4024a2 <_malloc_trim_r+0x3e>
  4024f6:	bf00      	nop
  4024f8:	204005ac 	.word	0x204005ac
  4024fc:	20400a58 	.word	0x20400a58
  402500:	204009b4 	.word	0x204009b4

00402504 <_free_r>:
  402504:	2900      	cmp	r1, #0
  402506:	d044      	beq.n	402592 <_free_r+0x8e>
  402508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40250c:	460d      	mov	r5, r1
  40250e:	4680      	mov	r8, r0
  402510:	f000 ff1c 	bl	40334c <__malloc_lock>
  402514:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402518:	4969      	ldr	r1, [pc, #420]	; (4026c0 <_free_r+0x1bc>)
  40251a:	f027 0301 	bic.w	r3, r7, #1
  40251e:	f1a5 0408 	sub.w	r4, r5, #8
  402522:	18e2      	adds	r2, r4, r3
  402524:	688e      	ldr	r6, [r1, #8]
  402526:	6850      	ldr	r0, [r2, #4]
  402528:	42b2      	cmp	r2, r6
  40252a:	f020 0003 	bic.w	r0, r0, #3
  40252e:	d05e      	beq.n	4025ee <_free_r+0xea>
  402530:	07fe      	lsls	r6, r7, #31
  402532:	6050      	str	r0, [r2, #4]
  402534:	d40b      	bmi.n	40254e <_free_r+0x4a>
  402536:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40253a:	1be4      	subs	r4, r4, r7
  40253c:	f101 0e08 	add.w	lr, r1, #8
  402540:	68a5      	ldr	r5, [r4, #8]
  402542:	4575      	cmp	r5, lr
  402544:	443b      	add	r3, r7
  402546:	d06d      	beq.n	402624 <_free_r+0x120>
  402548:	68e7      	ldr	r7, [r4, #12]
  40254a:	60ef      	str	r7, [r5, #12]
  40254c:	60bd      	str	r5, [r7, #8]
  40254e:	1815      	adds	r5, r2, r0
  402550:	686d      	ldr	r5, [r5, #4]
  402552:	07ed      	lsls	r5, r5, #31
  402554:	d53e      	bpl.n	4025d4 <_free_r+0xd0>
  402556:	f043 0201 	orr.w	r2, r3, #1
  40255a:	6062      	str	r2, [r4, #4]
  40255c:	50e3      	str	r3, [r4, r3]
  40255e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402562:	d217      	bcs.n	402594 <_free_r+0x90>
  402564:	08db      	lsrs	r3, r3, #3
  402566:	1c58      	adds	r0, r3, #1
  402568:	109a      	asrs	r2, r3, #2
  40256a:	684d      	ldr	r5, [r1, #4]
  40256c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402570:	60a7      	str	r7, [r4, #8]
  402572:	2301      	movs	r3, #1
  402574:	4093      	lsls	r3, r2
  402576:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40257a:	432b      	orrs	r3, r5
  40257c:	3a08      	subs	r2, #8
  40257e:	60e2      	str	r2, [r4, #12]
  402580:	604b      	str	r3, [r1, #4]
  402582:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402586:	60fc      	str	r4, [r7, #12]
  402588:	4640      	mov	r0, r8
  40258a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40258e:	f000 bedf 	b.w	403350 <__malloc_unlock>
  402592:	4770      	bx	lr
  402594:	0a5a      	lsrs	r2, r3, #9
  402596:	2a04      	cmp	r2, #4
  402598:	d852      	bhi.n	402640 <_free_r+0x13c>
  40259a:	099a      	lsrs	r2, r3, #6
  40259c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4025a0:	00ff      	lsls	r7, r7, #3
  4025a2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4025a6:	19c8      	adds	r0, r1, r7
  4025a8:	59ca      	ldr	r2, [r1, r7]
  4025aa:	3808      	subs	r0, #8
  4025ac:	4290      	cmp	r0, r2
  4025ae:	d04f      	beq.n	402650 <_free_r+0x14c>
  4025b0:	6851      	ldr	r1, [r2, #4]
  4025b2:	f021 0103 	bic.w	r1, r1, #3
  4025b6:	428b      	cmp	r3, r1
  4025b8:	d232      	bcs.n	402620 <_free_r+0x11c>
  4025ba:	6892      	ldr	r2, [r2, #8]
  4025bc:	4290      	cmp	r0, r2
  4025be:	d1f7      	bne.n	4025b0 <_free_r+0xac>
  4025c0:	68c3      	ldr	r3, [r0, #12]
  4025c2:	60a0      	str	r0, [r4, #8]
  4025c4:	60e3      	str	r3, [r4, #12]
  4025c6:	609c      	str	r4, [r3, #8]
  4025c8:	60c4      	str	r4, [r0, #12]
  4025ca:	4640      	mov	r0, r8
  4025cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4025d0:	f000 bebe 	b.w	403350 <__malloc_unlock>
  4025d4:	6895      	ldr	r5, [r2, #8]
  4025d6:	4f3b      	ldr	r7, [pc, #236]	; (4026c4 <_free_r+0x1c0>)
  4025d8:	42bd      	cmp	r5, r7
  4025da:	4403      	add	r3, r0
  4025dc:	d040      	beq.n	402660 <_free_r+0x15c>
  4025de:	68d0      	ldr	r0, [r2, #12]
  4025e0:	60e8      	str	r0, [r5, #12]
  4025e2:	f043 0201 	orr.w	r2, r3, #1
  4025e6:	6085      	str	r5, [r0, #8]
  4025e8:	6062      	str	r2, [r4, #4]
  4025ea:	50e3      	str	r3, [r4, r3]
  4025ec:	e7b7      	b.n	40255e <_free_r+0x5a>
  4025ee:	07ff      	lsls	r7, r7, #31
  4025f0:	4403      	add	r3, r0
  4025f2:	d407      	bmi.n	402604 <_free_r+0x100>
  4025f4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4025f8:	1aa4      	subs	r4, r4, r2
  4025fa:	4413      	add	r3, r2
  4025fc:	68a0      	ldr	r0, [r4, #8]
  4025fe:	68e2      	ldr	r2, [r4, #12]
  402600:	60c2      	str	r2, [r0, #12]
  402602:	6090      	str	r0, [r2, #8]
  402604:	4a30      	ldr	r2, [pc, #192]	; (4026c8 <_free_r+0x1c4>)
  402606:	6812      	ldr	r2, [r2, #0]
  402608:	f043 0001 	orr.w	r0, r3, #1
  40260c:	4293      	cmp	r3, r2
  40260e:	6060      	str	r0, [r4, #4]
  402610:	608c      	str	r4, [r1, #8]
  402612:	d3b9      	bcc.n	402588 <_free_r+0x84>
  402614:	4b2d      	ldr	r3, [pc, #180]	; (4026cc <_free_r+0x1c8>)
  402616:	4640      	mov	r0, r8
  402618:	6819      	ldr	r1, [r3, #0]
  40261a:	f7ff ff23 	bl	402464 <_malloc_trim_r>
  40261e:	e7b3      	b.n	402588 <_free_r+0x84>
  402620:	4610      	mov	r0, r2
  402622:	e7cd      	b.n	4025c0 <_free_r+0xbc>
  402624:	1811      	adds	r1, r2, r0
  402626:	6849      	ldr	r1, [r1, #4]
  402628:	07c9      	lsls	r1, r1, #31
  40262a:	d444      	bmi.n	4026b6 <_free_r+0x1b2>
  40262c:	6891      	ldr	r1, [r2, #8]
  40262e:	68d2      	ldr	r2, [r2, #12]
  402630:	60ca      	str	r2, [r1, #12]
  402632:	4403      	add	r3, r0
  402634:	f043 0001 	orr.w	r0, r3, #1
  402638:	6091      	str	r1, [r2, #8]
  40263a:	6060      	str	r0, [r4, #4]
  40263c:	50e3      	str	r3, [r4, r3]
  40263e:	e7a3      	b.n	402588 <_free_r+0x84>
  402640:	2a14      	cmp	r2, #20
  402642:	d816      	bhi.n	402672 <_free_r+0x16e>
  402644:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402648:	00ff      	lsls	r7, r7, #3
  40264a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40264e:	e7aa      	b.n	4025a6 <_free_r+0xa2>
  402650:	10aa      	asrs	r2, r5, #2
  402652:	2301      	movs	r3, #1
  402654:	684d      	ldr	r5, [r1, #4]
  402656:	4093      	lsls	r3, r2
  402658:	432b      	orrs	r3, r5
  40265a:	604b      	str	r3, [r1, #4]
  40265c:	4603      	mov	r3, r0
  40265e:	e7b0      	b.n	4025c2 <_free_r+0xbe>
  402660:	f043 0201 	orr.w	r2, r3, #1
  402664:	614c      	str	r4, [r1, #20]
  402666:	610c      	str	r4, [r1, #16]
  402668:	60e5      	str	r5, [r4, #12]
  40266a:	60a5      	str	r5, [r4, #8]
  40266c:	6062      	str	r2, [r4, #4]
  40266e:	50e3      	str	r3, [r4, r3]
  402670:	e78a      	b.n	402588 <_free_r+0x84>
  402672:	2a54      	cmp	r2, #84	; 0x54
  402674:	d806      	bhi.n	402684 <_free_r+0x180>
  402676:	0b1a      	lsrs	r2, r3, #12
  402678:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40267c:	00ff      	lsls	r7, r7, #3
  40267e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402682:	e790      	b.n	4025a6 <_free_r+0xa2>
  402684:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402688:	d806      	bhi.n	402698 <_free_r+0x194>
  40268a:	0bda      	lsrs	r2, r3, #15
  40268c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402690:	00ff      	lsls	r7, r7, #3
  402692:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402696:	e786      	b.n	4025a6 <_free_r+0xa2>
  402698:	f240 5054 	movw	r0, #1364	; 0x554
  40269c:	4282      	cmp	r2, r0
  40269e:	d806      	bhi.n	4026ae <_free_r+0x1aa>
  4026a0:	0c9a      	lsrs	r2, r3, #18
  4026a2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4026a6:	00ff      	lsls	r7, r7, #3
  4026a8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4026ac:	e77b      	b.n	4025a6 <_free_r+0xa2>
  4026ae:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4026b2:	257e      	movs	r5, #126	; 0x7e
  4026b4:	e777      	b.n	4025a6 <_free_r+0xa2>
  4026b6:	f043 0101 	orr.w	r1, r3, #1
  4026ba:	6061      	str	r1, [r4, #4]
  4026bc:	6013      	str	r3, [r2, #0]
  4026be:	e763      	b.n	402588 <_free_r+0x84>
  4026c0:	204005ac 	.word	0x204005ac
  4026c4:	204005b4 	.word	0x204005b4
  4026c8:	204009b8 	.word	0x204009b8
  4026cc:	20400a88 	.word	0x20400a88

004026d0 <__sfvwrite_r>:
  4026d0:	6893      	ldr	r3, [r2, #8]
  4026d2:	2b00      	cmp	r3, #0
  4026d4:	d073      	beq.n	4027be <__sfvwrite_r+0xee>
  4026d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026da:	898b      	ldrh	r3, [r1, #12]
  4026dc:	b083      	sub	sp, #12
  4026de:	460c      	mov	r4, r1
  4026e0:	0719      	lsls	r1, r3, #28
  4026e2:	9000      	str	r0, [sp, #0]
  4026e4:	4616      	mov	r6, r2
  4026e6:	d526      	bpl.n	402736 <__sfvwrite_r+0x66>
  4026e8:	6922      	ldr	r2, [r4, #16]
  4026ea:	b322      	cbz	r2, 402736 <__sfvwrite_r+0x66>
  4026ec:	f013 0002 	ands.w	r0, r3, #2
  4026f0:	6835      	ldr	r5, [r6, #0]
  4026f2:	d02c      	beq.n	40274e <__sfvwrite_r+0x7e>
  4026f4:	f04f 0900 	mov.w	r9, #0
  4026f8:	4fb0      	ldr	r7, [pc, #704]	; (4029bc <__sfvwrite_r+0x2ec>)
  4026fa:	46c8      	mov	r8, r9
  4026fc:	46b2      	mov	sl, r6
  4026fe:	45b8      	cmp	r8, r7
  402700:	4643      	mov	r3, r8
  402702:	464a      	mov	r2, r9
  402704:	bf28      	it	cs
  402706:	463b      	movcs	r3, r7
  402708:	9800      	ldr	r0, [sp, #0]
  40270a:	f1b8 0f00 	cmp.w	r8, #0
  40270e:	d050      	beq.n	4027b2 <__sfvwrite_r+0xe2>
  402710:	69e1      	ldr	r1, [r4, #28]
  402712:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402714:	47b0      	blx	r6
  402716:	2800      	cmp	r0, #0
  402718:	dd58      	ble.n	4027cc <__sfvwrite_r+0xfc>
  40271a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40271e:	1a1b      	subs	r3, r3, r0
  402720:	4481      	add	r9, r0
  402722:	eba8 0800 	sub.w	r8, r8, r0
  402726:	f8ca 3008 	str.w	r3, [sl, #8]
  40272a:	2b00      	cmp	r3, #0
  40272c:	d1e7      	bne.n	4026fe <__sfvwrite_r+0x2e>
  40272e:	2000      	movs	r0, #0
  402730:	b003      	add	sp, #12
  402732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402736:	4621      	mov	r1, r4
  402738:	9800      	ldr	r0, [sp, #0]
  40273a:	f7ff fc65 	bl	402008 <__swsetup_r>
  40273e:	2800      	cmp	r0, #0
  402740:	f040 8133 	bne.w	4029aa <__sfvwrite_r+0x2da>
  402744:	89a3      	ldrh	r3, [r4, #12]
  402746:	6835      	ldr	r5, [r6, #0]
  402748:	f013 0002 	ands.w	r0, r3, #2
  40274c:	d1d2      	bne.n	4026f4 <__sfvwrite_r+0x24>
  40274e:	f013 0901 	ands.w	r9, r3, #1
  402752:	d145      	bne.n	4027e0 <__sfvwrite_r+0x110>
  402754:	464f      	mov	r7, r9
  402756:	9601      	str	r6, [sp, #4]
  402758:	b337      	cbz	r7, 4027a8 <__sfvwrite_r+0xd8>
  40275a:	059a      	lsls	r2, r3, #22
  40275c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  402760:	f140 8083 	bpl.w	40286a <__sfvwrite_r+0x19a>
  402764:	4547      	cmp	r7, r8
  402766:	46c3      	mov	fp, r8
  402768:	f0c0 80ab 	bcc.w	4028c2 <__sfvwrite_r+0x1f2>
  40276c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  402770:	f040 80ac 	bne.w	4028cc <__sfvwrite_r+0x1fc>
  402774:	6820      	ldr	r0, [r4, #0]
  402776:	46ba      	mov	sl, r7
  402778:	465a      	mov	r2, fp
  40277a:	4649      	mov	r1, r9
  40277c:	f000 fd82 	bl	403284 <memmove>
  402780:	68a2      	ldr	r2, [r4, #8]
  402782:	6823      	ldr	r3, [r4, #0]
  402784:	eba2 0208 	sub.w	r2, r2, r8
  402788:	445b      	add	r3, fp
  40278a:	60a2      	str	r2, [r4, #8]
  40278c:	6023      	str	r3, [r4, #0]
  40278e:	9a01      	ldr	r2, [sp, #4]
  402790:	6893      	ldr	r3, [r2, #8]
  402792:	eba3 030a 	sub.w	r3, r3, sl
  402796:	44d1      	add	r9, sl
  402798:	eba7 070a 	sub.w	r7, r7, sl
  40279c:	6093      	str	r3, [r2, #8]
  40279e:	2b00      	cmp	r3, #0
  4027a0:	d0c5      	beq.n	40272e <__sfvwrite_r+0x5e>
  4027a2:	89a3      	ldrh	r3, [r4, #12]
  4027a4:	2f00      	cmp	r7, #0
  4027a6:	d1d8      	bne.n	40275a <__sfvwrite_r+0x8a>
  4027a8:	f8d5 9000 	ldr.w	r9, [r5]
  4027ac:	686f      	ldr	r7, [r5, #4]
  4027ae:	3508      	adds	r5, #8
  4027b0:	e7d2      	b.n	402758 <__sfvwrite_r+0x88>
  4027b2:	f8d5 9000 	ldr.w	r9, [r5]
  4027b6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4027ba:	3508      	adds	r5, #8
  4027bc:	e79f      	b.n	4026fe <__sfvwrite_r+0x2e>
  4027be:	2000      	movs	r0, #0
  4027c0:	4770      	bx	lr
  4027c2:	4621      	mov	r1, r4
  4027c4:	9800      	ldr	r0, [sp, #0]
  4027c6:	f7ff fd33 	bl	402230 <_fflush_r>
  4027ca:	b370      	cbz	r0, 40282a <__sfvwrite_r+0x15a>
  4027cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4027d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4027d4:	f04f 30ff 	mov.w	r0, #4294967295
  4027d8:	81a3      	strh	r3, [r4, #12]
  4027da:	b003      	add	sp, #12
  4027dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027e0:	4681      	mov	r9, r0
  4027e2:	4633      	mov	r3, r6
  4027e4:	464e      	mov	r6, r9
  4027e6:	46a8      	mov	r8, r5
  4027e8:	469a      	mov	sl, r3
  4027ea:	464d      	mov	r5, r9
  4027ec:	b34e      	cbz	r6, 402842 <__sfvwrite_r+0x172>
  4027ee:	b380      	cbz	r0, 402852 <__sfvwrite_r+0x182>
  4027f0:	6820      	ldr	r0, [r4, #0]
  4027f2:	6923      	ldr	r3, [r4, #16]
  4027f4:	6962      	ldr	r2, [r4, #20]
  4027f6:	45b1      	cmp	r9, r6
  4027f8:	46cb      	mov	fp, r9
  4027fa:	bf28      	it	cs
  4027fc:	46b3      	movcs	fp, r6
  4027fe:	4298      	cmp	r0, r3
  402800:	465f      	mov	r7, fp
  402802:	d904      	bls.n	40280e <__sfvwrite_r+0x13e>
  402804:	68a3      	ldr	r3, [r4, #8]
  402806:	4413      	add	r3, r2
  402808:	459b      	cmp	fp, r3
  40280a:	f300 80a6 	bgt.w	40295a <__sfvwrite_r+0x28a>
  40280e:	4593      	cmp	fp, r2
  402810:	db4b      	blt.n	4028aa <__sfvwrite_r+0x1da>
  402812:	4613      	mov	r3, r2
  402814:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402816:	69e1      	ldr	r1, [r4, #28]
  402818:	9800      	ldr	r0, [sp, #0]
  40281a:	462a      	mov	r2, r5
  40281c:	47b8      	blx	r7
  40281e:	1e07      	subs	r7, r0, #0
  402820:	ddd4      	ble.n	4027cc <__sfvwrite_r+0xfc>
  402822:	ebb9 0907 	subs.w	r9, r9, r7
  402826:	d0cc      	beq.n	4027c2 <__sfvwrite_r+0xf2>
  402828:	2001      	movs	r0, #1
  40282a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40282e:	1bdb      	subs	r3, r3, r7
  402830:	443d      	add	r5, r7
  402832:	1bf6      	subs	r6, r6, r7
  402834:	f8ca 3008 	str.w	r3, [sl, #8]
  402838:	2b00      	cmp	r3, #0
  40283a:	f43f af78 	beq.w	40272e <__sfvwrite_r+0x5e>
  40283e:	2e00      	cmp	r6, #0
  402840:	d1d5      	bne.n	4027ee <__sfvwrite_r+0x11e>
  402842:	f108 0308 	add.w	r3, r8, #8
  402846:	e913 0060 	ldmdb	r3, {r5, r6}
  40284a:	4698      	mov	r8, r3
  40284c:	3308      	adds	r3, #8
  40284e:	2e00      	cmp	r6, #0
  402850:	d0f9      	beq.n	402846 <__sfvwrite_r+0x176>
  402852:	4632      	mov	r2, r6
  402854:	210a      	movs	r1, #10
  402856:	4628      	mov	r0, r5
  402858:	f000 fc2a 	bl	4030b0 <memchr>
  40285c:	2800      	cmp	r0, #0
  40285e:	f000 80a1 	beq.w	4029a4 <__sfvwrite_r+0x2d4>
  402862:	3001      	adds	r0, #1
  402864:	eba0 0905 	sub.w	r9, r0, r5
  402868:	e7c2      	b.n	4027f0 <__sfvwrite_r+0x120>
  40286a:	6820      	ldr	r0, [r4, #0]
  40286c:	6923      	ldr	r3, [r4, #16]
  40286e:	4298      	cmp	r0, r3
  402870:	d802      	bhi.n	402878 <__sfvwrite_r+0x1a8>
  402872:	6963      	ldr	r3, [r4, #20]
  402874:	429f      	cmp	r7, r3
  402876:	d25d      	bcs.n	402934 <__sfvwrite_r+0x264>
  402878:	45b8      	cmp	r8, r7
  40287a:	bf28      	it	cs
  40287c:	46b8      	movcs	r8, r7
  40287e:	4642      	mov	r2, r8
  402880:	4649      	mov	r1, r9
  402882:	f000 fcff 	bl	403284 <memmove>
  402886:	68a3      	ldr	r3, [r4, #8]
  402888:	6822      	ldr	r2, [r4, #0]
  40288a:	eba3 0308 	sub.w	r3, r3, r8
  40288e:	4442      	add	r2, r8
  402890:	60a3      	str	r3, [r4, #8]
  402892:	6022      	str	r2, [r4, #0]
  402894:	b10b      	cbz	r3, 40289a <__sfvwrite_r+0x1ca>
  402896:	46c2      	mov	sl, r8
  402898:	e779      	b.n	40278e <__sfvwrite_r+0xbe>
  40289a:	4621      	mov	r1, r4
  40289c:	9800      	ldr	r0, [sp, #0]
  40289e:	f7ff fcc7 	bl	402230 <_fflush_r>
  4028a2:	2800      	cmp	r0, #0
  4028a4:	d192      	bne.n	4027cc <__sfvwrite_r+0xfc>
  4028a6:	46c2      	mov	sl, r8
  4028a8:	e771      	b.n	40278e <__sfvwrite_r+0xbe>
  4028aa:	465a      	mov	r2, fp
  4028ac:	4629      	mov	r1, r5
  4028ae:	f000 fce9 	bl	403284 <memmove>
  4028b2:	68a2      	ldr	r2, [r4, #8]
  4028b4:	6823      	ldr	r3, [r4, #0]
  4028b6:	eba2 020b 	sub.w	r2, r2, fp
  4028ba:	445b      	add	r3, fp
  4028bc:	60a2      	str	r2, [r4, #8]
  4028be:	6023      	str	r3, [r4, #0]
  4028c0:	e7af      	b.n	402822 <__sfvwrite_r+0x152>
  4028c2:	6820      	ldr	r0, [r4, #0]
  4028c4:	46b8      	mov	r8, r7
  4028c6:	46ba      	mov	sl, r7
  4028c8:	46bb      	mov	fp, r7
  4028ca:	e755      	b.n	402778 <__sfvwrite_r+0xa8>
  4028cc:	6962      	ldr	r2, [r4, #20]
  4028ce:	6820      	ldr	r0, [r4, #0]
  4028d0:	6921      	ldr	r1, [r4, #16]
  4028d2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4028d6:	eba0 0a01 	sub.w	sl, r0, r1
  4028da:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4028de:	f10a 0001 	add.w	r0, sl, #1
  4028e2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4028e6:	4438      	add	r0, r7
  4028e8:	4540      	cmp	r0, r8
  4028ea:	4642      	mov	r2, r8
  4028ec:	bf84      	itt	hi
  4028ee:	4680      	movhi	r8, r0
  4028f0:	4642      	movhi	r2, r8
  4028f2:	055b      	lsls	r3, r3, #21
  4028f4:	d544      	bpl.n	402980 <__sfvwrite_r+0x2b0>
  4028f6:	4611      	mov	r1, r2
  4028f8:	9800      	ldr	r0, [sp, #0]
  4028fa:	f000 f913 	bl	402b24 <_malloc_r>
  4028fe:	4683      	mov	fp, r0
  402900:	2800      	cmp	r0, #0
  402902:	d055      	beq.n	4029b0 <__sfvwrite_r+0x2e0>
  402904:	4652      	mov	r2, sl
  402906:	6921      	ldr	r1, [r4, #16]
  402908:	f000 fc22 	bl	403150 <memcpy>
  40290c:	89a3      	ldrh	r3, [r4, #12]
  40290e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  402912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402916:	81a3      	strh	r3, [r4, #12]
  402918:	eb0b 000a 	add.w	r0, fp, sl
  40291c:	eba8 030a 	sub.w	r3, r8, sl
  402920:	f8c4 b010 	str.w	fp, [r4, #16]
  402924:	f8c4 8014 	str.w	r8, [r4, #20]
  402928:	6020      	str	r0, [r4, #0]
  40292a:	60a3      	str	r3, [r4, #8]
  40292c:	46b8      	mov	r8, r7
  40292e:	46ba      	mov	sl, r7
  402930:	46bb      	mov	fp, r7
  402932:	e721      	b.n	402778 <__sfvwrite_r+0xa8>
  402934:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  402938:	42b9      	cmp	r1, r7
  40293a:	bf28      	it	cs
  40293c:	4639      	movcs	r1, r7
  40293e:	464a      	mov	r2, r9
  402940:	fb91 f1f3 	sdiv	r1, r1, r3
  402944:	9800      	ldr	r0, [sp, #0]
  402946:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402948:	fb03 f301 	mul.w	r3, r3, r1
  40294c:	69e1      	ldr	r1, [r4, #28]
  40294e:	47b0      	blx	r6
  402950:	f1b0 0a00 	subs.w	sl, r0, #0
  402954:	f73f af1b 	bgt.w	40278e <__sfvwrite_r+0xbe>
  402958:	e738      	b.n	4027cc <__sfvwrite_r+0xfc>
  40295a:	461a      	mov	r2, r3
  40295c:	4629      	mov	r1, r5
  40295e:	9301      	str	r3, [sp, #4]
  402960:	f000 fc90 	bl	403284 <memmove>
  402964:	6822      	ldr	r2, [r4, #0]
  402966:	9b01      	ldr	r3, [sp, #4]
  402968:	9800      	ldr	r0, [sp, #0]
  40296a:	441a      	add	r2, r3
  40296c:	6022      	str	r2, [r4, #0]
  40296e:	4621      	mov	r1, r4
  402970:	f7ff fc5e 	bl	402230 <_fflush_r>
  402974:	9b01      	ldr	r3, [sp, #4]
  402976:	2800      	cmp	r0, #0
  402978:	f47f af28 	bne.w	4027cc <__sfvwrite_r+0xfc>
  40297c:	461f      	mov	r7, r3
  40297e:	e750      	b.n	402822 <__sfvwrite_r+0x152>
  402980:	9800      	ldr	r0, [sp, #0]
  402982:	f000 fce7 	bl	403354 <_realloc_r>
  402986:	4683      	mov	fp, r0
  402988:	2800      	cmp	r0, #0
  40298a:	d1c5      	bne.n	402918 <__sfvwrite_r+0x248>
  40298c:	9d00      	ldr	r5, [sp, #0]
  40298e:	6921      	ldr	r1, [r4, #16]
  402990:	4628      	mov	r0, r5
  402992:	f7ff fdb7 	bl	402504 <_free_r>
  402996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40299a:	220c      	movs	r2, #12
  40299c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4029a0:	602a      	str	r2, [r5, #0]
  4029a2:	e715      	b.n	4027d0 <__sfvwrite_r+0x100>
  4029a4:	f106 0901 	add.w	r9, r6, #1
  4029a8:	e722      	b.n	4027f0 <__sfvwrite_r+0x120>
  4029aa:	f04f 30ff 	mov.w	r0, #4294967295
  4029ae:	e6bf      	b.n	402730 <__sfvwrite_r+0x60>
  4029b0:	9a00      	ldr	r2, [sp, #0]
  4029b2:	230c      	movs	r3, #12
  4029b4:	6013      	str	r3, [r2, #0]
  4029b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4029ba:	e709      	b.n	4027d0 <__sfvwrite_r+0x100>
  4029bc:	7ffffc00 	.word	0x7ffffc00

004029c0 <_fwalk_reent>:
  4029c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4029c4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4029c8:	d01f      	beq.n	402a0a <_fwalk_reent+0x4a>
  4029ca:	4688      	mov	r8, r1
  4029cc:	4606      	mov	r6, r0
  4029ce:	f04f 0900 	mov.w	r9, #0
  4029d2:	687d      	ldr	r5, [r7, #4]
  4029d4:	68bc      	ldr	r4, [r7, #8]
  4029d6:	3d01      	subs	r5, #1
  4029d8:	d411      	bmi.n	4029fe <_fwalk_reent+0x3e>
  4029da:	89a3      	ldrh	r3, [r4, #12]
  4029dc:	2b01      	cmp	r3, #1
  4029de:	f105 35ff 	add.w	r5, r5, #4294967295
  4029e2:	d908      	bls.n	4029f6 <_fwalk_reent+0x36>
  4029e4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4029e8:	3301      	adds	r3, #1
  4029ea:	4621      	mov	r1, r4
  4029ec:	4630      	mov	r0, r6
  4029ee:	d002      	beq.n	4029f6 <_fwalk_reent+0x36>
  4029f0:	47c0      	blx	r8
  4029f2:	ea49 0900 	orr.w	r9, r9, r0
  4029f6:	1c6b      	adds	r3, r5, #1
  4029f8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4029fc:	d1ed      	bne.n	4029da <_fwalk_reent+0x1a>
  4029fe:	683f      	ldr	r7, [r7, #0]
  402a00:	2f00      	cmp	r7, #0
  402a02:	d1e6      	bne.n	4029d2 <_fwalk_reent+0x12>
  402a04:	4648      	mov	r0, r9
  402a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402a0a:	46b9      	mov	r9, r7
  402a0c:	4648      	mov	r0, r9
  402a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402a12:	bf00      	nop

00402a14 <__locale_mb_cur_max>:
  402a14:	4b04      	ldr	r3, [pc, #16]	; (402a28 <__locale_mb_cur_max+0x14>)
  402a16:	4a05      	ldr	r2, [pc, #20]	; (402a2c <__locale_mb_cur_max+0x18>)
  402a18:	681b      	ldr	r3, [r3, #0]
  402a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  402a1c:	2b00      	cmp	r3, #0
  402a1e:	bf08      	it	eq
  402a20:	4613      	moveq	r3, r2
  402a22:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  402a26:	4770      	bx	lr
  402a28:	20400010 	.word	0x20400010
  402a2c:	20400440 	.word	0x20400440

00402a30 <__swhatbuf_r>:
  402a30:	b570      	push	{r4, r5, r6, lr}
  402a32:	460c      	mov	r4, r1
  402a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402a38:	2900      	cmp	r1, #0
  402a3a:	b090      	sub	sp, #64	; 0x40
  402a3c:	4615      	mov	r5, r2
  402a3e:	461e      	mov	r6, r3
  402a40:	db14      	blt.n	402a6c <__swhatbuf_r+0x3c>
  402a42:	aa01      	add	r2, sp, #4
  402a44:	f000 ffcc 	bl	4039e0 <_fstat_r>
  402a48:	2800      	cmp	r0, #0
  402a4a:	db0f      	blt.n	402a6c <__swhatbuf_r+0x3c>
  402a4c:	9a02      	ldr	r2, [sp, #8]
  402a4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402a52:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402a56:	fab2 f282 	clz	r2, r2
  402a5a:	0952      	lsrs	r2, r2, #5
  402a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402a60:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402a64:	6032      	str	r2, [r6, #0]
  402a66:	602b      	str	r3, [r5, #0]
  402a68:	b010      	add	sp, #64	; 0x40
  402a6a:	bd70      	pop	{r4, r5, r6, pc}
  402a6c:	89a2      	ldrh	r2, [r4, #12]
  402a6e:	2300      	movs	r3, #0
  402a70:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  402a74:	6033      	str	r3, [r6, #0]
  402a76:	d004      	beq.n	402a82 <__swhatbuf_r+0x52>
  402a78:	2240      	movs	r2, #64	; 0x40
  402a7a:	4618      	mov	r0, r3
  402a7c:	602a      	str	r2, [r5, #0]
  402a7e:	b010      	add	sp, #64	; 0x40
  402a80:	bd70      	pop	{r4, r5, r6, pc}
  402a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402a86:	602b      	str	r3, [r5, #0]
  402a88:	b010      	add	sp, #64	; 0x40
  402a8a:	bd70      	pop	{r4, r5, r6, pc}

00402a8c <__smakebuf_r>:
  402a8c:	898a      	ldrh	r2, [r1, #12]
  402a8e:	0792      	lsls	r2, r2, #30
  402a90:	460b      	mov	r3, r1
  402a92:	d506      	bpl.n	402aa2 <__smakebuf_r+0x16>
  402a94:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402a98:	2101      	movs	r1, #1
  402a9a:	601a      	str	r2, [r3, #0]
  402a9c:	611a      	str	r2, [r3, #16]
  402a9e:	6159      	str	r1, [r3, #20]
  402aa0:	4770      	bx	lr
  402aa2:	b5f0      	push	{r4, r5, r6, r7, lr}
  402aa4:	b083      	sub	sp, #12
  402aa6:	ab01      	add	r3, sp, #4
  402aa8:	466a      	mov	r2, sp
  402aaa:	460c      	mov	r4, r1
  402aac:	4605      	mov	r5, r0
  402aae:	f7ff ffbf 	bl	402a30 <__swhatbuf_r>
  402ab2:	9900      	ldr	r1, [sp, #0]
  402ab4:	4606      	mov	r6, r0
  402ab6:	4628      	mov	r0, r5
  402ab8:	f000 f834 	bl	402b24 <_malloc_r>
  402abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402ac0:	b1d0      	cbz	r0, 402af8 <__smakebuf_r+0x6c>
  402ac2:	9a01      	ldr	r2, [sp, #4]
  402ac4:	4f12      	ldr	r7, [pc, #72]	; (402b10 <__smakebuf_r+0x84>)
  402ac6:	9900      	ldr	r1, [sp, #0]
  402ac8:	63ef      	str	r7, [r5, #60]	; 0x3c
  402aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402ace:	81a3      	strh	r3, [r4, #12]
  402ad0:	6020      	str	r0, [r4, #0]
  402ad2:	6120      	str	r0, [r4, #16]
  402ad4:	6161      	str	r1, [r4, #20]
  402ad6:	b91a      	cbnz	r2, 402ae0 <__smakebuf_r+0x54>
  402ad8:	4333      	orrs	r3, r6
  402ada:	81a3      	strh	r3, [r4, #12]
  402adc:	b003      	add	sp, #12
  402ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402ae0:	4628      	mov	r0, r5
  402ae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402ae6:	f000 ff8f 	bl	403a08 <_isatty_r>
  402aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402aee:	2800      	cmp	r0, #0
  402af0:	d0f2      	beq.n	402ad8 <__smakebuf_r+0x4c>
  402af2:	f043 0301 	orr.w	r3, r3, #1
  402af6:	e7ef      	b.n	402ad8 <__smakebuf_r+0x4c>
  402af8:	059a      	lsls	r2, r3, #22
  402afa:	d4ef      	bmi.n	402adc <__smakebuf_r+0x50>
  402afc:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402b00:	f043 0302 	orr.w	r3, r3, #2
  402b04:	2101      	movs	r1, #1
  402b06:	81a3      	strh	r3, [r4, #12]
  402b08:	6022      	str	r2, [r4, #0]
  402b0a:	6122      	str	r2, [r4, #16]
  402b0c:	6161      	str	r1, [r4, #20]
  402b0e:	e7e5      	b.n	402adc <__smakebuf_r+0x50>
  402b10:	0040225d 	.word	0x0040225d

00402b14 <malloc>:
  402b14:	4b02      	ldr	r3, [pc, #8]	; (402b20 <malloc+0xc>)
  402b16:	4601      	mov	r1, r0
  402b18:	6818      	ldr	r0, [r3, #0]
  402b1a:	f000 b803 	b.w	402b24 <_malloc_r>
  402b1e:	bf00      	nop
  402b20:	20400010 	.word	0x20400010

00402b24 <_malloc_r>:
  402b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b28:	f101 060b 	add.w	r6, r1, #11
  402b2c:	2e16      	cmp	r6, #22
  402b2e:	b083      	sub	sp, #12
  402b30:	4605      	mov	r5, r0
  402b32:	f240 809e 	bls.w	402c72 <_malloc_r+0x14e>
  402b36:	f036 0607 	bics.w	r6, r6, #7
  402b3a:	f100 80bd 	bmi.w	402cb8 <_malloc_r+0x194>
  402b3e:	42b1      	cmp	r1, r6
  402b40:	f200 80ba 	bhi.w	402cb8 <_malloc_r+0x194>
  402b44:	f000 fc02 	bl	40334c <__malloc_lock>
  402b48:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402b4c:	f0c0 8293 	bcc.w	403076 <_malloc_r+0x552>
  402b50:	0a73      	lsrs	r3, r6, #9
  402b52:	f000 80b8 	beq.w	402cc6 <_malloc_r+0x1a2>
  402b56:	2b04      	cmp	r3, #4
  402b58:	f200 8179 	bhi.w	402e4e <_malloc_r+0x32a>
  402b5c:	09b3      	lsrs	r3, r6, #6
  402b5e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402b62:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402b66:	00c3      	lsls	r3, r0, #3
  402b68:	4fbf      	ldr	r7, [pc, #764]	; (402e68 <_malloc_r+0x344>)
  402b6a:	443b      	add	r3, r7
  402b6c:	f1a3 0108 	sub.w	r1, r3, #8
  402b70:	685c      	ldr	r4, [r3, #4]
  402b72:	42a1      	cmp	r1, r4
  402b74:	d106      	bne.n	402b84 <_malloc_r+0x60>
  402b76:	e00c      	b.n	402b92 <_malloc_r+0x6e>
  402b78:	2a00      	cmp	r2, #0
  402b7a:	f280 80aa 	bge.w	402cd2 <_malloc_r+0x1ae>
  402b7e:	68e4      	ldr	r4, [r4, #12]
  402b80:	42a1      	cmp	r1, r4
  402b82:	d006      	beq.n	402b92 <_malloc_r+0x6e>
  402b84:	6863      	ldr	r3, [r4, #4]
  402b86:	f023 0303 	bic.w	r3, r3, #3
  402b8a:	1b9a      	subs	r2, r3, r6
  402b8c:	2a0f      	cmp	r2, #15
  402b8e:	ddf3      	ble.n	402b78 <_malloc_r+0x54>
  402b90:	4670      	mov	r0, lr
  402b92:	693c      	ldr	r4, [r7, #16]
  402b94:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402e7c <_malloc_r+0x358>
  402b98:	4574      	cmp	r4, lr
  402b9a:	f000 81ab 	beq.w	402ef4 <_malloc_r+0x3d0>
  402b9e:	6863      	ldr	r3, [r4, #4]
  402ba0:	f023 0303 	bic.w	r3, r3, #3
  402ba4:	1b9a      	subs	r2, r3, r6
  402ba6:	2a0f      	cmp	r2, #15
  402ba8:	f300 8190 	bgt.w	402ecc <_malloc_r+0x3a8>
  402bac:	2a00      	cmp	r2, #0
  402bae:	f8c7 e014 	str.w	lr, [r7, #20]
  402bb2:	f8c7 e010 	str.w	lr, [r7, #16]
  402bb6:	f280 809d 	bge.w	402cf4 <_malloc_r+0x1d0>
  402bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402bbe:	f080 8161 	bcs.w	402e84 <_malloc_r+0x360>
  402bc2:	08db      	lsrs	r3, r3, #3
  402bc4:	f103 0c01 	add.w	ip, r3, #1
  402bc8:	1099      	asrs	r1, r3, #2
  402bca:	687a      	ldr	r2, [r7, #4]
  402bcc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402bd0:	f8c4 8008 	str.w	r8, [r4, #8]
  402bd4:	2301      	movs	r3, #1
  402bd6:	408b      	lsls	r3, r1
  402bd8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402bdc:	4313      	orrs	r3, r2
  402bde:	3908      	subs	r1, #8
  402be0:	60e1      	str	r1, [r4, #12]
  402be2:	607b      	str	r3, [r7, #4]
  402be4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402be8:	f8c8 400c 	str.w	r4, [r8, #12]
  402bec:	1082      	asrs	r2, r0, #2
  402bee:	2401      	movs	r4, #1
  402bf0:	4094      	lsls	r4, r2
  402bf2:	429c      	cmp	r4, r3
  402bf4:	f200 808b 	bhi.w	402d0e <_malloc_r+0x1ea>
  402bf8:	421c      	tst	r4, r3
  402bfa:	d106      	bne.n	402c0a <_malloc_r+0xe6>
  402bfc:	f020 0003 	bic.w	r0, r0, #3
  402c00:	0064      	lsls	r4, r4, #1
  402c02:	421c      	tst	r4, r3
  402c04:	f100 0004 	add.w	r0, r0, #4
  402c08:	d0fa      	beq.n	402c00 <_malloc_r+0xdc>
  402c0a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402c0e:	46cc      	mov	ip, r9
  402c10:	4680      	mov	r8, r0
  402c12:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402c16:	459c      	cmp	ip, r3
  402c18:	d107      	bne.n	402c2a <_malloc_r+0x106>
  402c1a:	e16d      	b.n	402ef8 <_malloc_r+0x3d4>
  402c1c:	2a00      	cmp	r2, #0
  402c1e:	f280 817b 	bge.w	402f18 <_malloc_r+0x3f4>
  402c22:	68db      	ldr	r3, [r3, #12]
  402c24:	459c      	cmp	ip, r3
  402c26:	f000 8167 	beq.w	402ef8 <_malloc_r+0x3d4>
  402c2a:	6859      	ldr	r1, [r3, #4]
  402c2c:	f021 0103 	bic.w	r1, r1, #3
  402c30:	1b8a      	subs	r2, r1, r6
  402c32:	2a0f      	cmp	r2, #15
  402c34:	ddf2      	ble.n	402c1c <_malloc_r+0xf8>
  402c36:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402c3a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402c3e:	9300      	str	r3, [sp, #0]
  402c40:	199c      	adds	r4, r3, r6
  402c42:	4628      	mov	r0, r5
  402c44:	f046 0601 	orr.w	r6, r6, #1
  402c48:	f042 0501 	orr.w	r5, r2, #1
  402c4c:	605e      	str	r6, [r3, #4]
  402c4e:	f8c8 c00c 	str.w	ip, [r8, #12]
  402c52:	f8cc 8008 	str.w	r8, [ip, #8]
  402c56:	617c      	str	r4, [r7, #20]
  402c58:	613c      	str	r4, [r7, #16]
  402c5a:	f8c4 e00c 	str.w	lr, [r4, #12]
  402c5e:	f8c4 e008 	str.w	lr, [r4, #8]
  402c62:	6065      	str	r5, [r4, #4]
  402c64:	505a      	str	r2, [r3, r1]
  402c66:	f000 fb73 	bl	403350 <__malloc_unlock>
  402c6a:	9b00      	ldr	r3, [sp, #0]
  402c6c:	f103 0408 	add.w	r4, r3, #8
  402c70:	e01e      	b.n	402cb0 <_malloc_r+0x18c>
  402c72:	2910      	cmp	r1, #16
  402c74:	d820      	bhi.n	402cb8 <_malloc_r+0x194>
  402c76:	f000 fb69 	bl	40334c <__malloc_lock>
  402c7a:	2610      	movs	r6, #16
  402c7c:	2318      	movs	r3, #24
  402c7e:	2002      	movs	r0, #2
  402c80:	4f79      	ldr	r7, [pc, #484]	; (402e68 <_malloc_r+0x344>)
  402c82:	443b      	add	r3, r7
  402c84:	f1a3 0208 	sub.w	r2, r3, #8
  402c88:	685c      	ldr	r4, [r3, #4]
  402c8a:	4294      	cmp	r4, r2
  402c8c:	f000 813d 	beq.w	402f0a <_malloc_r+0x3e6>
  402c90:	6863      	ldr	r3, [r4, #4]
  402c92:	68e1      	ldr	r1, [r4, #12]
  402c94:	68a6      	ldr	r6, [r4, #8]
  402c96:	f023 0303 	bic.w	r3, r3, #3
  402c9a:	4423      	add	r3, r4
  402c9c:	4628      	mov	r0, r5
  402c9e:	685a      	ldr	r2, [r3, #4]
  402ca0:	60f1      	str	r1, [r6, #12]
  402ca2:	f042 0201 	orr.w	r2, r2, #1
  402ca6:	608e      	str	r6, [r1, #8]
  402ca8:	605a      	str	r2, [r3, #4]
  402caa:	f000 fb51 	bl	403350 <__malloc_unlock>
  402cae:	3408      	adds	r4, #8
  402cb0:	4620      	mov	r0, r4
  402cb2:	b003      	add	sp, #12
  402cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cb8:	2400      	movs	r4, #0
  402cba:	230c      	movs	r3, #12
  402cbc:	4620      	mov	r0, r4
  402cbe:	602b      	str	r3, [r5, #0]
  402cc0:	b003      	add	sp, #12
  402cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cc6:	2040      	movs	r0, #64	; 0x40
  402cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
  402ccc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402cd0:	e74a      	b.n	402b68 <_malloc_r+0x44>
  402cd2:	4423      	add	r3, r4
  402cd4:	68e1      	ldr	r1, [r4, #12]
  402cd6:	685a      	ldr	r2, [r3, #4]
  402cd8:	68a6      	ldr	r6, [r4, #8]
  402cda:	f042 0201 	orr.w	r2, r2, #1
  402cde:	60f1      	str	r1, [r6, #12]
  402ce0:	4628      	mov	r0, r5
  402ce2:	608e      	str	r6, [r1, #8]
  402ce4:	605a      	str	r2, [r3, #4]
  402ce6:	f000 fb33 	bl	403350 <__malloc_unlock>
  402cea:	3408      	adds	r4, #8
  402cec:	4620      	mov	r0, r4
  402cee:	b003      	add	sp, #12
  402cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cf4:	4423      	add	r3, r4
  402cf6:	4628      	mov	r0, r5
  402cf8:	685a      	ldr	r2, [r3, #4]
  402cfa:	f042 0201 	orr.w	r2, r2, #1
  402cfe:	605a      	str	r2, [r3, #4]
  402d00:	f000 fb26 	bl	403350 <__malloc_unlock>
  402d04:	3408      	adds	r4, #8
  402d06:	4620      	mov	r0, r4
  402d08:	b003      	add	sp, #12
  402d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d0e:	68bc      	ldr	r4, [r7, #8]
  402d10:	6863      	ldr	r3, [r4, #4]
  402d12:	f023 0803 	bic.w	r8, r3, #3
  402d16:	45b0      	cmp	r8, r6
  402d18:	d304      	bcc.n	402d24 <_malloc_r+0x200>
  402d1a:	eba8 0306 	sub.w	r3, r8, r6
  402d1e:	2b0f      	cmp	r3, #15
  402d20:	f300 8085 	bgt.w	402e2e <_malloc_r+0x30a>
  402d24:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402e80 <_malloc_r+0x35c>
  402d28:	4b50      	ldr	r3, [pc, #320]	; (402e6c <_malloc_r+0x348>)
  402d2a:	f8d9 2000 	ldr.w	r2, [r9]
  402d2e:	681b      	ldr	r3, [r3, #0]
  402d30:	3201      	adds	r2, #1
  402d32:	4433      	add	r3, r6
  402d34:	eb04 0a08 	add.w	sl, r4, r8
  402d38:	f000 8155 	beq.w	402fe6 <_malloc_r+0x4c2>
  402d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402d40:	330f      	adds	r3, #15
  402d42:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402d46:	f02b 0b0f 	bic.w	fp, fp, #15
  402d4a:	4659      	mov	r1, fp
  402d4c:	4628      	mov	r0, r5
  402d4e:	f000 fca7 	bl	4036a0 <_sbrk_r>
  402d52:	1c41      	adds	r1, r0, #1
  402d54:	4602      	mov	r2, r0
  402d56:	f000 80fc 	beq.w	402f52 <_malloc_r+0x42e>
  402d5a:	4582      	cmp	sl, r0
  402d5c:	f200 80f7 	bhi.w	402f4e <_malloc_r+0x42a>
  402d60:	4b43      	ldr	r3, [pc, #268]	; (402e70 <_malloc_r+0x34c>)
  402d62:	6819      	ldr	r1, [r3, #0]
  402d64:	4459      	add	r1, fp
  402d66:	6019      	str	r1, [r3, #0]
  402d68:	f000 814d 	beq.w	403006 <_malloc_r+0x4e2>
  402d6c:	f8d9 0000 	ldr.w	r0, [r9]
  402d70:	3001      	adds	r0, #1
  402d72:	bf1b      	ittet	ne
  402d74:	eba2 0a0a 	subne.w	sl, r2, sl
  402d78:	4451      	addne	r1, sl
  402d7a:	f8c9 2000 	streq.w	r2, [r9]
  402d7e:	6019      	strne	r1, [r3, #0]
  402d80:	f012 0107 	ands.w	r1, r2, #7
  402d84:	f000 8115 	beq.w	402fb2 <_malloc_r+0x48e>
  402d88:	f1c1 0008 	rsb	r0, r1, #8
  402d8c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402d90:	4402      	add	r2, r0
  402d92:	3108      	adds	r1, #8
  402d94:	eb02 090b 	add.w	r9, r2, fp
  402d98:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402d9c:	eba1 0909 	sub.w	r9, r1, r9
  402da0:	4649      	mov	r1, r9
  402da2:	4628      	mov	r0, r5
  402da4:	9301      	str	r3, [sp, #4]
  402da6:	9200      	str	r2, [sp, #0]
  402da8:	f000 fc7a 	bl	4036a0 <_sbrk_r>
  402dac:	1c43      	adds	r3, r0, #1
  402dae:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402db2:	f000 8143 	beq.w	40303c <_malloc_r+0x518>
  402db6:	1a80      	subs	r0, r0, r2
  402db8:	4448      	add	r0, r9
  402dba:	f040 0001 	orr.w	r0, r0, #1
  402dbe:	6819      	ldr	r1, [r3, #0]
  402dc0:	60ba      	str	r2, [r7, #8]
  402dc2:	4449      	add	r1, r9
  402dc4:	42bc      	cmp	r4, r7
  402dc6:	6050      	str	r0, [r2, #4]
  402dc8:	6019      	str	r1, [r3, #0]
  402dca:	d017      	beq.n	402dfc <_malloc_r+0x2d8>
  402dcc:	f1b8 0f0f 	cmp.w	r8, #15
  402dd0:	f240 80fb 	bls.w	402fca <_malloc_r+0x4a6>
  402dd4:	6860      	ldr	r0, [r4, #4]
  402dd6:	f1a8 020c 	sub.w	r2, r8, #12
  402dda:	f022 0207 	bic.w	r2, r2, #7
  402dde:	eb04 0e02 	add.w	lr, r4, r2
  402de2:	f000 0001 	and.w	r0, r0, #1
  402de6:	f04f 0c05 	mov.w	ip, #5
  402dea:	4310      	orrs	r0, r2
  402dec:	2a0f      	cmp	r2, #15
  402dee:	6060      	str	r0, [r4, #4]
  402df0:	f8ce c004 	str.w	ip, [lr, #4]
  402df4:	f8ce c008 	str.w	ip, [lr, #8]
  402df8:	f200 8117 	bhi.w	40302a <_malloc_r+0x506>
  402dfc:	4b1d      	ldr	r3, [pc, #116]	; (402e74 <_malloc_r+0x350>)
  402dfe:	68bc      	ldr	r4, [r7, #8]
  402e00:	681a      	ldr	r2, [r3, #0]
  402e02:	4291      	cmp	r1, r2
  402e04:	bf88      	it	hi
  402e06:	6019      	strhi	r1, [r3, #0]
  402e08:	4b1b      	ldr	r3, [pc, #108]	; (402e78 <_malloc_r+0x354>)
  402e0a:	681a      	ldr	r2, [r3, #0]
  402e0c:	4291      	cmp	r1, r2
  402e0e:	6862      	ldr	r2, [r4, #4]
  402e10:	bf88      	it	hi
  402e12:	6019      	strhi	r1, [r3, #0]
  402e14:	f022 0203 	bic.w	r2, r2, #3
  402e18:	4296      	cmp	r6, r2
  402e1a:	eba2 0306 	sub.w	r3, r2, r6
  402e1e:	d801      	bhi.n	402e24 <_malloc_r+0x300>
  402e20:	2b0f      	cmp	r3, #15
  402e22:	dc04      	bgt.n	402e2e <_malloc_r+0x30a>
  402e24:	4628      	mov	r0, r5
  402e26:	f000 fa93 	bl	403350 <__malloc_unlock>
  402e2a:	2400      	movs	r4, #0
  402e2c:	e740      	b.n	402cb0 <_malloc_r+0x18c>
  402e2e:	19a2      	adds	r2, r4, r6
  402e30:	f043 0301 	orr.w	r3, r3, #1
  402e34:	f046 0601 	orr.w	r6, r6, #1
  402e38:	6066      	str	r6, [r4, #4]
  402e3a:	4628      	mov	r0, r5
  402e3c:	60ba      	str	r2, [r7, #8]
  402e3e:	6053      	str	r3, [r2, #4]
  402e40:	f000 fa86 	bl	403350 <__malloc_unlock>
  402e44:	3408      	adds	r4, #8
  402e46:	4620      	mov	r0, r4
  402e48:	b003      	add	sp, #12
  402e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e4e:	2b14      	cmp	r3, #20
  402e50:	d971      	bls.n	402f36 <_malloc_r+0x412>
  402e52:	2b54      	cmp	r3, #84	; 0x54
  402e54:	f200 80a3 	bhi.w	402f9e <_malloc_r+0x47a>
  402e58:	0b33      	lsrs	r3, r6, #12
  402e5a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402e5e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402e62:	00c3      	lsls	r3, r0, #3
  402e64:	e680      	b.n	402b68 <_malloc_r+0x44>
  402e66:	bf00      	nop
  402e68:	204005ac 	.word	0x204005ac
  402e6c:	20400a88 	.word	0x20400a88
  402e70:	20400a58 	.word	0x20400a58
  402e74:	20400a80 	.word	0x20400a80
  402e78:	20400a84 	.word	0x20400a84
  402e7c:	204005b4 	.word	0x204005b4
  402e80:	204009b4 	.word	0x204009b4
  402e84:	0a5a      	lsrs	r2, r3, #9
  402e86:	2a04      	cmp	r2, #4
  402e88:	d95b      	bls.n	402f42 <_malloc_r+0x41e>
  402e8a:	2a14      	cmp	r2, #20
  402e8c:	f200 80ae 	bhi.w	402fec <_malloc_r+0x4c8>
  402e90:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402e94:	00c9      	lsls	r1, r1, #3
  402e96:	325b      	adds	r2, #91	; 0x5b
  402e98:	eb07 0c01 	add.w	ip, r7, r1
  402e9c:	5879      	ldr	r1, [r7, r1]
  402e9e:	f1ac 0c08 	sub.w	ip, ip, #8
  402ea2:	458c      	cmp	ip, r1
  402ea4:	f000 8088 	beq.w	402fb8 <_malloc_r+0x494>
  402ea8:	684a      	ldr	r2, [r1, #4]
  402eaa:	f022 0203 	bic.w	r2, r2, #3
  402eae:	4293      	cmp	r3, r2
  402eb0:	d273      	bcs.n	402f9a <_malloc_r+0x476>
  402eb2:	6889      	ldr	r1, [r1, #8]
  402eb4:	458c      	cmp	ip, r1
  402eb6:	d1f7      	bne.n	402ea8 <_malloc_r+0x384>
  402eb8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  402ebc:	687b      	ldr	r3, [r7, #4]
  402ebe:	60e2      	str	r2, [r4, #12]
  402ec0:	f8c4 c008 	str.w	ip, [r4, #8]
  402ec4:	6094      	str	r4, [r2, #8]
  402ec6:	f8cc 400c 	str.w	r4, [ip, #12]
  402eca:	e68f      	b.n	402bec <_malloc_r+0xc8>
  402ecc:	19a1      	adds	r1, r4, r6
  402ece:	f046 0c01 	orr.w	ip, r6, #1
  402ed2:	f042 0601 	orr.w	r6, r2, #1
  402ed6:	f8c4 c004 	str.w	ip, [r4, #4]
  402eda:	4628      	mov	r0, r5
  402edc:	6179      	str	r1, [r7, #20]
  402ede:	6139      	str	r1, [r7, #16]
  402ee0:	f8c1 e00c 	str.w	lr, [r1, #12]
  402ee4:	f8c1 e008 	str.w	lr, [r1, #8]
  402ee8:	604e      	str	r6, [r1, #4]
  402eea:	50e2      	str	r2, [r4, r3]
  402eec:	f000 fa30 	bl	403350 <__malloc_unlock>
  402ef0:	3408      	adds	r4, #8
  402ef2:	e6dd      	b.n	402cb0 <_malloc_r+0x18c>
  402ef4:	687b      	ldr	r3, [r7, #4]
  402ef6:	e679      	b.n	402bec <_malloc_r+0xc8>
  402ef8:	f108 0801 	add.w	r8, r8, #1
  402efc:	f018 0f03 	tst.w	r8, #3
  402f00:	f10c 0c08 	add.w	ip, ip, #8
  402f04:	f47f ae85 	bne.w	402c12 <_malloc_r+0xee>
  402f08:	e02d      	b.n	402f66 <_malloc_r+0x442>
  402f0a:	68dc      	ldr	r4, [r3, #12]
  402f0c:	42a3      	cmp	r3, r4
  402f0e:	bf08      	it	eq
  402f10:	3002      	addeq	r0, #2
  402f12:	f43f ae3e 	beq.w	402b92 <_malloc_r+0x6e>
  402f16:	e6bb      	b.n	402c90 <_malloc_r+0x16c>
  402f18:	4419      	add	r1, r3
  402f1a:	461c      	mov	r4, r3
  402f1c:	684a      	ldr	r2, [r1, #4]
  402f1e:	68db      	ldr	r3, [r3, #12]
  402f20:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402f24:	f042 0201 	orr.w	r2, r2, #1
  402f28:	604a      	str	r2, [r1, #4]
  402f2a:	4628      	mov	r0, r5
  402f2c:	60f3      	str	r3, [r6, #12]
  402f2e:	609e      	str	r6, [r3, #8]
  402f30:	f000 fa0e 	bl	403350 <__malloc_unlock>
  402f34:	e6bc      	b.n	402cb0 <_malloc_r+0x18c>
  402f36:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402f3a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  402f3e:	00c3      	lsls	r3, r0, #3
  402f40:	e612      	b.n	402b68 <_malloc_r+0x44>
  402f42:	099a      	lsrs	r2, r3, #6
  402f44:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402f48:	00c9      	lsls	r1, r1, #3
  402f4a:	3238      	adds	r2, #56	; 0x38
  402f4c:	e7a4      	b.n	402e98 <_malloc_r+0x374>
  402f4e:	42bc      	cmp	r4, r7
  402f50:	d054      	beq.n	402ffc <_malloc_r+0x4d8>
  402f52:	68bc      	ldr	r4, [r7, #8]
  402f54:	6862      	ldr	r2, [r4, #4]
  402f56:	f022 0203 	bic.w	r2, r2, #3
  402f5a:	e75d      	b.n	402e18 <_malloc_r+0x2f4>
  402f5c:	f859 3908 	ldr.w	r3, [r9], #-8
  402f60:	4599      	cmp	r9, r3
  402f62:	f040 8086 	bne.w	403072 <_malloc_r+0x54e>
  402f66:	f010 0f03 	tst.w	r0, #3
  402f6a:	f100 30ff 	add.w	r0, r0, #4294967295
  402f6e:	d1f5      	bne.n	402f5c <_malloc_r+0x438>
  402f70:	687b      	ldr	r3, [r7, #4]
  402f72:	ea23 0304 	bic.w	r3, r3, r4
  402f76:	607b      	str	r3, [r7, #4]
  402f78:	0064      	lsls	r4, r4, #1
  402f7a:	429c      	cmp	r4, r3
  402f7c:	f63f aec7 	bhi.w	402d0e <_malloc_r+0x1ea>
  402f80:	2c00      	cmp	r4, #0
  402f82:	f43f aec4 	beq.w	402d0e <_malloc_r+0x1ea>
  402f86:	421c      	tst	r4, r3
  402f88:	4640      	mov	r0, r8
  402f8a:	f47f ae3e 	bne.w	402c0a <_malloc_r+0xe6>
  402f8e:	0064      	lsls	r4, r4, #1
  402f90:	421c      	tst	r4, r3
  402f92:	f100 0004 	add.w	r0, r0, #4
  402f96:	d0fa      	beq.n	402f8e <_malloc_r+0x46a>
  402f98:	e637      	b.n	402c0a <_malloc_r+0xe6>
  402f9a:	468c      	mov	ip, r1
  402f9c:	e78c      	b.n	402eb8 <_malloc_r+0x394>
  402f9e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  402fa2:	d815      	bhi.n	402fd0 <_malloc_r+0x4ac>
  402fa4:	0bf3      	lsrs	r3, r6, #15
  402fa6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  402faa:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  402fae:	00c3      	lsls	r3, r0, #3
  402fb0:	e5da      	b.n	402b68 <_malloc_r+0x44>
  402fb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402fb6:	e6ed      	b.n	402d94 <_malloc_r+0x270>
  402fb8:	687b      	ldr	r3, [r7, #4]
  402fba:	1092      	asrs	r2, r2, #2
  402fbc:	2101      	movs	r1, #1
  402fbe:	fa01 f202 	lsl.w	r2, r1, r2
  402fc2:	4313      	orrs	r3, r2
  402fc4:	607b      	str	r3, [r7, #4]
  402fc6:	4662      	mov	r2, ip
  402fc8:	e779      	b.n	402ebe <_malloc_r+0x39a>
  402fca:	2301      	movs	r3, #1
  402fcc:	6053      	str	r3, [r2, #4]
  402fce:	e729      	b.n	402e24 <_malloc_r+0x300>
  402fd0:	f240 5254 	movw	r2, #1364	; 0x554
  402fd4:	4293      	cmp	r3, r2
  402fd6:	d822      	bhi.n	40301e <_malloc_r+0x4fa>
  402fd8:	0cb3      	lsrs	r3, r6, #18
  402fda:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  402fde:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  402fe2:	00c3      	lsls	r3, r0, #3
  402fe4:	e5c0      	b.n	402b68 <_malloc_r+0x44>
  402fe6:	f103 0b10 	add.w	fp, r3, #16
  402fea:	e6ae      	b.n	402d4a <_malloc_r+0x226>
  402fec:	2a54      	cmp	r2, #84	; 0x54
  402fee:	d829      	bhi.n	403044 <_malloc_r+0x520>
  402ff0:	0b1a      	lsrs	r2, r3, #12
  402ff2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  402ff6:	00c9      	lsls	r1, r1, #3
  402ff8:	326e      	adds	r2, #110	; 0x6e
  402ffa:	e74d      	b.n	402e98 <_malloc_r+0x374>
  402ffc:	4b20      	ldr	r3, [pc, #128]	; (403080 <_malloc_r+0x55c>)
  402ffe:	6819      	ldr	r1, [r3, #0]
  403000:	4459      	add	r1, fp
  403002:	6019      	str	r1, [r3, #0]
  403004:	e6b2      	b.n	402d6c <_malloc_r+0x248>
  403006:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40300a:	2800      	cmp	r0, #0
  40300c:	f47f aeae 	bne.w	402d6c <_malloc_r+0x248>
  403010:	eb08 030b 	add.w	r3, r8, fp
  403014:	68ba      	ldr	r2, [r7, #8]
  403016:	f043 0301 	orr.w	r3, r3, #1
  40301a:	6053      	str	r3, [r2, #4]
  40301c:	e6ee      	b.n	402dfc <_malloc_r+0x2d8>
  40301e:	207f      	movs	r0, #127	; 0x7f
  403020:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403024:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403028:	e59e      	b.n	402b68 <_malloc_r+0x44>
  40302a:	f104 0108 	add.w	r1, r4, #8
  40302e:	4628      	mov	r0, r5
  403030:	9300      	str	r3, [sp, #0]
  403032:	f7ff fa67 	bl	402504 <_free_r>
  403036:	9b00      	ldr	r3, [sp, #0]
  403038:	6819      	ldr	r1, [r3, #0]
  40303a:	e6df      	b.n	402dfc <_malloc_r+0x2d8>
  40303c:	2001      	movs	r0, #1
  40303e:	f04f 0900 	mov.w	r9, #0
  403042:	e6bc      	b.n	402dbe <_malloc_r+0x29a>
  403044:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403048:	d805      	bhi.n	403056 <_malloc_r+0x532>
  40304a:	0bda      	lsrs	r2, r3, #15
  40304c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403050:	00c9      	lsls	r1, r1, #3
  403052:	3277      	adds	r2, #119	; 0x77
  403054:	e720      	b.n	402e98 <_malloc_r+0x374>
  403056:	f240 5154 	movw	r1, #1364	; 0x554
  40305a:	428a      	cmp	r2, r1
  40305c:	d805      	bhi.n	40306a <_malloc_r+0x546>
  40305e:	0c9a      	lsrs	r2, r3, #18
  403060:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403064:	00c9      	lsls	r1, r1, #3
  403066:	327c      	adds	r2, #124	; 0x7c
  403068:	e716      	b.n	402e98 <_malloc_r+0x374>
  40306a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40306e:	227e      	movs	r2, #126	; 0x7e
  403070:	e712      	b.n	402e98 <_malloc_r+0x374>
  403072:	687b      	ldr	r3, [r7, #4]
  403074:	e780      	b.n	402f78 <_malloc_r+0x454>
  403076:	08f0      	lsrs	r0, r6, #3
  403078:	f106 0308 	add.w	r3, r6, #8
  40307c:	e600      	b.n	402c80 <_malloc_r+0x15c>
  40307e:	bf00      	nop
  403080:	20400a58 	.word	0x20400a58

00403084 <__ascii_mbtowc>:
  403084:	b082      	sub	sp, #8
  403086:	b149      	cbz	r1, 40309c <__ascii_mbtowc+0x18>
  403088:	b15a      	cbz	r2, 4030a2 <__ascii_mbtowc+0x1e>
  40308a:	b16b      	cbz	r3, 4030a8 <__ascii_mbtowc+0x24>
  40308c:	7813      	ldrb	r3, [r2, #0]
  40308e:	600b      	str	r3, [r1, #0]
  403090:	7812      	ldrb	r2, [r2, #0]
  403092:	1c10      	adds	r0, r2, #0
  403094:	bf18      	it	ne
  403096:	2001      	movne	r0, #1
  403098:	b002      	add	sp, #8
  40309a:	4770      	bx	lr
  40309c:	a901      	add	r1, sp, #4
  40309e:	2a00      	cmp	r2, #0
  4030a0:	d1f3      	bne.n	40308a <__ascii_mbtowc+0x6>
  4030a2:	4610      	mov	r0, r2
  4030a4:	b002      	add	sp, #8
  4030a6:	4770      	bx	lr
  4030a8:	f06f 0001 	mvn.w	r0, #1
  4030ac:	e7f4      	b.n	403098 <__ascii_mbtowc+0x14>
  4030ae:	bf00      	nop

004030b0 <memchr>:
  4030b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4030b4:	2a10      	cmp	r2, #16
  4030b6:	db2b      	blt.n	403110 <memchr+0x60>
  4030b8:	f010 0f07 	tst.w	r0, #7
  4030bc:	d008      	beq.n	4030d0 <memchr+0x20>
  4030be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4030c2:	3a01      	subs	r2, #1
  4030c4:	428b      	cmp	r3, r1
  4030c6:	d02d      	beq.n	403124 <memchr+0x74>
  4030c8:	f010 0f07 	tst.w	r0, #7
  4030cc:	b342      	cbz	r2, 403120 <memchr+0x70>
  4030ce:	d1f6      	bne.n	4030be <memchr+0xe>
  4030d0:	b4f0      	push	{r4, r5, r6, r7}
  4030d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4030d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4030da:	f022 0407 	bic.w	r4, r2, #7
  4030de:	f07f 0700 	mvns.w	r7, #0
  4030e2:	2300      	movs	r3, #0
  4030e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4030e8:	3c08      	subs	r4, #8
  4030ea:	ea85 0501 	eor.w	r5, r5, r1
  4030ee:	ea86 0601 	eor.w	r6, r6, r1
  4030f2:	fa85 f547 	uadd8	r5, r5, r7
  4030f6:	faa3 f587 	sel	r5, r3, r7
  4030fa:	fa86 f647 	uadd8	r6, r6, r7
  4030fe:	faa5 f687 	sel	r6, r5, r7
  403102:	b98e      	cbnz	r6, 403128 <memchr+0x78>
  403104:	d1ee      	bne.n	4030e4 <memchr+0x34>
  403106:	bcf0      	pop	{r4, r5, r6, r7}
  403108:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40310c:	f002 0207 	and.w	r2, r2, #7
  403110:	b132      	cbz	r2, 403120 <memchr+0x70>
  403112:	f810 3b01 	ldrb.w	r3, [r0], #1
  403116:	3a01      	subs	r2, #1
  403118:	ea83 0301 	eor.w	r3, r3, r1
  40311c:	b113      	cbz	r3, 403124 <memchr+0x74>
  40311e:	d1f8      	bne.n	403112 <memchr+0x62>
  403120:	2000      	movs	r0, #0
  403122:	4770      	bx	lr
  403124:	3801      	subs	r0, #1
  403126:	4770      	bx	lr
  403128:	2d00      	cmp	r5, #0
  40312a:	bf06      	itte	eq
  40312c:	4635      	moveq	r5, r6
  40312e:	3803      	subeq	r0, #3
  403130:	3807      	subne	r0, #7
  403132:	f015 0f01 	tst.w	r5, #1
  403136:	d107      	bne.n	403148 <memchr+0x98>
  403138:	3001      	adds	r0, #1
  40313a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40313e:	bf02      	ittt	eq
  403140:	3001      	addeq	r0, #1
  403142:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403146:	3001      	addeq	r0, #1
  403148:	bcf0      	pop	{r4, r5, r6, r7}
  40314a:	3801      	subs	r0, #1
  40314c:	4770      	bx	lr
  40314e:	bf00      	nop

00403150 <memcpy>:
  403150:	4684      	mov	ip, r0
  403152:	ea41 0300 	orr.w	r3, r1, r0
  403156:	f013 0303 	ands.w	r3, r3, #3
  40315a:	d16d      	bne.n	403238 <memcpy+0xe8>
  40315c:	3a40      	subs	r2, #64	; 0x40
  40315e:	d341      	bcc.n	4031e4 <memcpy+0x94>
  403160:	f851 3b04 	ldr.w	r3, [r1], #4
  403164:	f840 3b04 	str.w	r3, [r0], #4
  403168:	f851 3b04 	ldr.w	r3, [r1], #4
  40316c:	f840 3b04 	str.w	r3, [r0], #4
  403170:	f851 3b04 	ldr.w	r3, [r1], #4
  403174:	f840 3b04 	str.w	r3, [r0], #4
  403178:	f851 3b04 	ldr.w	r3, [r1], #4
  40317c:	f840 3b04 	str.w	r3, [r0], #4
  403180:	f851 3b04 	ldr.w	r3, [r1], #4
  403184:	f840 3b04 	str.w	r3, [r0], #4
  403188:	f851 3b04 	ldr.w	r3, [r1], #4
  40318c:	f840 3b04 	str.w	r3, [r0], #4
  403190:	f851 3b04 	ldr.w	r3, [r1], #4
  403194:	f840 3b04 	str.w	r3, [r0], #4
  403198:	f851 3b04 	ldr.w	r3, [r1], #4
  40319c:	f840 3b04 	str.w	r3, [r0], #4
  4031a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031a4:	f840 3b04 	str.w	r3, [r0], #4
  4031a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031ac:	f840 3b04 	str.w	r3, [r0], #4
  4031b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031b4:	f840 3b04 	str.w	r3, [r0], #4
  4031b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031bc:	f840 3b04 	str.w	r3, [r0], #4
  4031c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031c4:	f840 3b04 	str.w	r3, [r0], #4
  4031c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031cc:	f840 3b04 	str.w	r3, [r0], #4
  4031d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031d4:	f840 3b04 	str.w	r3, [r0], #4
  4031d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031dc:	f840 3b04 	str.w	r3, [r0], #4
  4031e0:	3a40      	subs	r2, #64	; 0x40
  4031e2:	d2bd      	bcs.n	403160 <memcpy+0x10>
  4031e4:	3230      	adds	r2, #48	; 0x30
  4031e6:	d311      	bcc.n	40320c <memcpy+0xbc>
  4031e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031ec:	f840 3b04 	str.w	r3, [r0], #4
  4031f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031f4:	f840 3b04 	str.w	r3, [r0], #4
  4031f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031fc:	f840 3b04 	str.w	r3, [r0], #4
  403200:	f851 3b04 	ldr.w	r3, [r1], #4
  403204:	f840 3b04 	str.w	r3, [r0], #4
  403208:	3a10      	subs	r2, #16
  40320a:	d2ed      	bcs.n	4031e8 <memcpy+0x98>
  40320c:	320c      	adds	r2, #12
  40320e:	d305      	bcc.n	40321c <memcpy+0xcc>
  403210:	f851 3b04 	ldr.w	r3, [r1], #4
  403214:	f840 3b04 	str.w	r3, [r0], #4
  403218:	3a04      	subs	r2, #4
  40321a:	d2f9      	bcs.n	403210 <memcpy+0xc0>
  40321c:	3204      	adds	r2, #4
  40321e:	d008      	beq.n	403232 <memcpy+0xe2>
  403220:	07d2      	lsls	r2, r2, #31
  403222:	bf1c      	itt	ne
  403224:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403228:	f800 3b01 	strbne.w	r3, [r0], #1
  40322c:	d301      	bcc.n	403232 <memcpy+0xe2>
  40322e:	880b      	ldrh	r3, [r1, #0]
  403230:	8003      	strh	r3, [r0, #0]
  403232:	4660      	mov	r0, ip
  403234:	4770      	bx	lr
  403236:	bf00      	nop
  403238:	2a08      	cmp	r2, #8
  40323a:	d313      	bcc.n	403264 <memcpy+0x114>
  40323c:	078b      	lsls	r3, r1, #30
  40323e:	d08d      	beq.n	40315c <memcpy+0xc>
  403240:	f010 0303 	ands.w	r3, r0, #3
  403244:	d08a      	beq.n	40315c <memcpy+0xc>
  403246:	f1c3 0304 	rsb	r3, r3, #4
  40324a:	1ad2      	subs	r2, r2, r3
  40324c:	07db      	lsls	r3, r3, #31
  40324e:	bf1c      	itt	ne
  403250:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403254:	f800 3b01 	strbne.w	r3, [r0], #1
  403258:	d380      	bcc.n	40315c <memcpy+0xc>
  40325a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40325e:	f820 3b02 	strh.w	r3, [r0], #2
  403262:	e77b      	b.n	40315c <memcpy+0xc>
  403264:	3a04      	subs	r2, #4
  403266:	d3d9      	bcc.n	40321c <memcpy+0xcc>
  403268:	3a01      	subs	r2, #1
  40326a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40326e:	f800 3b01 	strb.w	r3, [r0], #1
  403272:	d2f9      	bcs.n	403268 <memcpy+0x118>
  403274:	780b      	ldrb	r3, [r1, #0]
  403276:	7003      	strb	r3, [r0, #0]
  403278:	784b      	ldrb	r3, [r1, #1]
  40327a:	7043      	strb	r3, [r0, #1]
  40327c:	788b      	ldrb	r3, [r1, #2]
  40327e:	7083      	strb	r3, [r0, #2]
  403280:	4660      	mov	r0, ip
  403282:	4770      	bx	lr

00403284 <memmove>:
  403284:	4288      	cmp	r0, r1
  403286:	b5f0      	push	{r4, r5, r6, r7, lr}
  403288:	d90d      	bls.n	4032a6 <memmove+0x22>
  40328a:	188b      	adds	r3, r1, r2
  40328c:	4298      	cmp	r0, r3
  40328e:	d20a      	bcs.n	4032a6 <memmove+0x22>
  403290:	1884      	adds	r4, r0, r2
  403292:	2a00      	cmp	r2, #0
  403294:	d051      	beq.n	40333a <memmove+0xb6>
  403296:	4622      	mov	r2, r4
  403298:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40329c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4032a0:	4299      	cmp	r1, r3
  4032a2:	d1f9      	bne.n	403298 <memmove+0x14>
  4032a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4032a6:	2a0f      	cmp	r2, #15
  4032a8:	d948      	bls.n	40333c <memmove+0xb8>
  4032aa:	ea41 0300 	orr.w	r3, r1, r0
  4032ae:	079b      	lsls	r3, r3, #30
  4032b0:	d146      	bne.n	403340 <memmove+0xbc>
  4032b2:	f100 0410 	add.w	r4, r0, #16
  4032b6:	f101 0310 	add.w	r3, r1, #16
  4032ba:	4615      	mov	r5, r2
  4032bc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4032c0:	f844 6c10 	str.w	r6, [r4, #-16]
  4032c4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4032c8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4032cc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4032d0:	f844 6c08 	str.w	r6, [r4, #-8]
  4032d4:	3d10      	subs	r5, #16
  4032d6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4032da:	f844 6c04 	str.w	r6, [r4, #-4]
  4032de:	2d0f      	cmp	r5, #15
  4032e0:	f103 0310 	add.w	r3, r3, #16
  4032e4:	f104 0410 	add.w	r4, r4, #16
  4032e8:	d8e8      	bhi.n	4032bc <memmove+0x38>
  4032ea:	f1a2 0310 	sub.w	r3, r2, #16
  4032ee:	f023 030f 	bic.w	r3, r3, #15
  4032f2:	f002 0e0f 	and.w	lr, r2, #15
  4032f6:	3310      	adds	r3, #16
  4032f8:	f1be 0f03 	cmp.w	lr, #3
  4032fc:	4419      	add	r1, r3
  4032fe:	4403      	add	r3, r0
  403300:	d921      	bls.n	403346 <memmove+0xc2>
  403302:	1f1e      	subs	r6, r3, #4
  403304:	460d      	mov	r5, r1
  403306:	4674      	mov	r4, lr
  403308:	3c04      	subs	r4, #4
  40330a:	f855 7b04 	ldr.w	r7, [r5], #4
  40330e:	f846 7f04 	str.w	r7, [r6, #4]!
  403312:	2c03      	cmp	r4, #3
  403314:	d8f8      	bhi.n	403308 <memmove+0x84>
  403316:	f1ae 0404 	sub.w	r4, lr, #4
  40331a:	f024 0403 	bic.w	r4, r4, #3
  40331e:	3404      	adds	r4, #4
  403320:	4421      	add	r1, r4
  403322:	4423      	add	r3, r4
  403324:	f002 0203 	and.w	r2, r2, #3
  403328:	b162      	cbz	r2, 403344 <memmove+0xc0>
  40332a:	3b01      	subs	r3, #1
  40332c:	440a      	add	r2, r1
  40332e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403332:	f803 4f01 	strb.w	r4, [r3, #1]!
  403336:	428a      	cmp	r2, r1
  403338:	d1f9      	bne.n	40332e <memmove+0xaa>
  40333a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40333c:	4603      	mov	r3, r0
  40333e:	e7f3      	b.n	403328 <memmove+0xa4>
  403340:	4603      	mov	r3, r0
  403342:	e7f2      	b.n	40332a <memmove+0xa6>
  403344:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403346:	4672      	mov	r2, lr
  403348:	e7ee      	b.n	403328 <memmove+0xa4>
  40334a:	bf00      	nop

0040334c <__malloc_lock>:
  40334c:	4770      	bx	lr
  40334e:	bf00      	nop

00403350 <__malloc_unlock>:
  403350:	4770      	bx	lr
  403352:	bf00      	nop

00403354 <_realloc_r>:
  403354:	2900      	cmp	r1, #0
  403356:	f000 8095 	beq.w	403484 <_realloc_r+0x130>
  40335a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40335e:	460d      	mov	r5, r1
  403360:	4616      	mov	r6, r2
  403362:	b083      	sub	sp, #12
  403364:	4680      	mov	r8, r0
  403366:	f106 070b 	add.w	r7, r6, #11
  40336a:	f7ff ffef 	bl	40334c <__malloc_lock>
  40336e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403372:	2f16      	cmp	r7, #22
  403374:	f02e 0403 	bic.w	r4, lr, #3
  403378:	f1a5 0908 	sub.w	r9, r5, #8
  40337c:	d83c      	bhi.n	4033f8 <_realloc_r+0xa4>
  40337e:	2210      	movs	r2, #16
  403380:	4617      	mov	r7, r2
  403382:	42be      	cmp	r6, r7
  403384:	d83d      	bhi.n	403402 <_realloc_r+0xae>
  403386:	4294      	cmp	r4, r2
  403388:	da43      	bge.n	403412 <_realloc_r+0xbe>
  40338a:	4bc4      	ldr	r3, [pc, #784]	; (40369c <_realloc_r+0x348>)
  40338c:	6899      	ldr	r1, [r3, #8]
  40338e:	eb09 0004 	add.w	r0, r9, r4
  403392:	4288      	cmp	r0, r1
  403394:	f000 80b4 	beq.w	403500 <_realloc_r+0x1ac>
  403398:	6843      	ldr	r3, [r0, #4]
  40339a:	f023 0101 	bic.w	r1, r3, #1
  40339e:	4401      	add	r1, r0
  4033a0:	6849      	ldr	r1, [r1, #4]
  4033a2:	07c9      	lsls	r1, r1, #31
  4033a4:	d54c      	bpl.n	403440 <_realloc_r+0xec>
  4033a6:	f01e 0f01 	tst.w	lr, #1
  4033aa:	f000 809b 	beq.w	4034e4 <_realloc_r+0x190>
  4033ae:	4631      	mov	r1, r6
  4033b0:	4640      	mov	r0, r8
  4033b2:	f7ff fbb7 	bl	402b24 <_malloc_r>
  4033b6:	4606      	mov	r6, r0
  4033b8:	2800      	cmp	r0, #0
  4033ba:	d03a      	beq.n	403432 <_realloc_r+0xde>
  4033bc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4033c0:	f023 0301 	bic.w	r3, r3, #1
  4033c4:	444b      	add	r3, r9
  4033c6:	f1a0 0208 	sub.w	r2, r0, #8
  4033ca:	429a      	cmp	r2, r3
  4033cc:	f000 8121 	beq.w	403612 <_realloc_r+0x2be>
  4033d0:	1f22      	subs	r2, r4, #4
  4033d2:	2a24      	cmp	r2, #36	; 0x24
  4033d4:	f200 8107 	bhi.w	4035e6 <_realloc_r+0x292>
  4033d8:	2a13      	cmp	r2, #19
  4033da:	f200 80db 	bhi.w	403594 <_realloc_r+0x240>
  4033de:	4603      	mov	r3, r0
  4033e0:	462a      	mov	r2, r5
  4033e2:	6811      	ldr	r1, [r2, #0]
  4033e4:	6019      	str	r1, [r3, #0]
  4033e6:	6851      	ldr	r1, [r2, #4]
  4033e8:	6059      	str	r1, [r3, #4]
  4033ea:	6892      	ldr	r2, [r2, #8]
  4033ec:	609a      	str	r2, [r3, #8]
  4033ee:	4629      	mov	r1, r5
  4033f0:	4640      	mov	r0, r8
  4033f2:	f7ff f887 	bl	402504 <_free_r>
  4033f6:	e01c      	b.n	403432 <_realloc_r+0xde>
  4033f8:	f027 0707 	bic.w	r7, r7, #7
  4033fc:	2f00      	cmp	r7, #0
  4033fe:	463a      	mov	r2, r7
  403400:	dabf      	bge.n	403382 <_realloc_r+0x2e>
  403402:	2600      	movs	r6, #0
  403404:	230c      	movs	r3, #12
  403406:	4630      	mov	r0, r6
  403408:	f8c8 3000 	str.w	r3, [r8]
  40340c:	b003      	add	sp, #12
  40340e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403412:	462e      	mov	r6, r5
  403414:	1be3      	subs	r3, r4, r7
  403416:	2b0f      	cmp	r3, #15
  403418:	d81e      	bhi.n	403458 <_realloc_r+0x104>
  40341a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40341e:	f003 0301 	and.w	r3, r3, #1
  403422:	4323      	orrs	r3, r4
  403424:	444c      	add	r4, r9
  403426:	f8c9 3004 	str.w	r3, [r9, #4]
  40342a:	6863      	ldr	r3, [r4, #4]
  40342c:	f043 0301 	orr.w	r3, r3, #1
  403430:	6063      	str	r3, [r4, #4]
  403432:	4640      	mov	r0, r8
  403434:	f7ff ff8c 	bl	403350 <__malloc_unlock>
  403438:	4630      	mov	r0, r6
  40343a:	b003      	add	sp, #12
  40343c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403440:	f023 0303 	bic.w	r3, r3, #3
  403444:	18e1      	adds	r1, r4, r3
  403446:	4291      	cmp	r1, r2
  403448:	db1f      	blt.n	40348a <_realloc_r+0x136>
  40344a:	68c3      	ldr	r3, [r0, #12]
  40344c:	6882      	ldr	r2, [r0, #8]
  40344e:	462e      	mov	r6, r5
  403450:	60d3      	str	r3, [r2, #12]
  403452:	460c      	mov	r4, r1
  403454:	609a      	str	r2, [r3, #8]
  403456:	e7dd      	b.n	403414 <_realloc_r+0xc0>
  403458:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40345c:	eb09 0107 	add.w	r1, r9, r7
  403460:	f002 0201 	and.w	r2, r2, #1
  403464:	444c      	add	r4, r9
  403466:	f043 0301 	orr.w	r3, r3, #1
  40346a:	4317      	orrs	r7, r2
  40346c:	f8c9 7004 	str.w	r7, [r9, #4]
  403470:	604b      	str	r3, [r1, #4]
  403472:	6863      	ldr	r3, [r4, #4]
  403474:	f043 0301 	orr.w	r3, r3, #1
  403478:	3108      	adds	r1, #8
  40347a:	6063      	str	r3, [r4, #4]
  40347c:	4640      	mov	r0, r8
  40347e:	f7ff f841 	bl	402504 <_free_r>
  403482:	e7d6      	b.n	403432 <_realloc_r+0xde>
  403484:	4611      	mov	r1, r2
  403486:	f7ff bb4d 	b.w	402b24 <_malloc_r>
  40348a:	f01e 0f01 	tst.w	lr, #1
  40348e:	d18e      	bne.n	4033ae <_realloc_r+0x5a>
  403490:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403494:	eba9 0a01 	sub.w	sl, r9, r1
  403498:	f8da 1004 	ldr.w	r1, [sl, #4]
  40349c:	f021 0103 	bic.w	r1, r1, #3
  4034a0:	440b      	add	r3, r1
  4034a2:	4423      	add	r3, r4
  4034a4:	4293      	cmp	r3, r2
  4034a6:	db25      	blt.n	4034f4 <_realloc_r+0x1a0>
  4034a8:	68c2      	ldr	r2, [r0, #12]
  4034aa:	6881      	ldr	r1, [r0, #8]
  4034ac:	4656      	mov	r6, sl
  4034ae:	60ca      	str	r2, [r1, #12]
  4034b0:	6091      	str	r1, [r2, #8]
  4034b2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4034b6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4034ba:	1f22      	subs	r2, r4, #4
  4034bc:	2a24      	cmp	r2, #36	; 0x24
  4034be:	60c1      	str	r1, [r0, #12]
  4034c0:	6088      	str	r0, [r1, #8]
  4034c2:	f200 8094 	bhi.w	4035ee <_realloc_r+0x29a>
  4034c6:	2a13      	cmp	r2, #19
  4034c8:	d96f      	bls.n	4035aa <_realloc_r+0x256>
  4034ca:	6829      	ldr	r1, [r5, #0]
  4034cc:	f8ca 1008 	str.w	r1, [sl, #8]
  4034d0:	6869      	ldr	r1, [r5, #4]
  4034d2:	f8ca 100c 	str.w	r1, [sl, #12]
  4034d6:	2a1b      	cmp	r2, #27
  4034d8:	f200 80a2 	bhi.w	403620 <_realloc_r+0x2cc>
  4034dc:	3508      	adds	r5, #8
  4034de:	f10a 0210 	add.w	r2, sl, #16
  4034e2:	e063      	b.n	4035ac <_realloc_r+0x258>
  4034e4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4034e8:	eba9 0a03 	sub.w	sl, r9, r3
  4034ec:	f8da 1004 	ldr.w	r1, [sl, #4]
  4034f0:	f021 0103 	bic.w	r1, r1, #3
  4034f4:	1863      	adds	r3, r4, r1
  4034f6:	4293      	cmp	r3, r2
  4034f8:	f6ff af59 	blt.w	4033ae <_realloc_r+0x5a>
  4034fc:	4656      	mov	r6, sl
  4034fe:	e7d8      	b.n	4034b2 <_realloc_r+0x15e>
  403500:	6841      	ldr	r1, [r0, #4]
  403502:	f021 0b03 	bic.w	fp, r1, #3
  403506:	44a3      	add	fp, r4
  403508:	f107 0010 	add.w	r0, r7, #16
  40350c:	4583      	cmp	fp, r0
  40350e:	da56      	bge.n	4035be <_realloc_r+0x26a>
  403510:	f01e 0f01 	tst.w	lr, #1
  403514:	f47f af4b 	bne.w	4033ae <_realloc_r+0x5a>
  403518:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40351c:	eba9 0a01 	sub.w	sl, r9, r1
  403520:	f8da 1004 	ldr.w	r1, [sl, #4]
  403524:	f021 0103 	bic.w	r1, r1, #3
  403528:	448b      	add	fp, r1
  40352a:	4558      	cmp	r0, fp
  40352c:	dce2      	bgt.n	4034f4 <_realloc_r+0x1a0>
  40352e:	4656      	mov	r6, sl
  403530:	f8da 100c 	ldr.w	r1, [sl, #12]
  403534:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403538:	1f22      	subs	r2, r4, #4
  40353a:	2a24      	cmp	r2, #36	; 0x24
  40353c:	60c1      	str	r1, [r0, #12]
  40353e:	6088      	str	r0, [r1, #8]
  403540:	f200 808f 	bhi.w	403662 <_realloc_r+0x30e>
  403544:	2a13      	cmp	r2, #19
  403546:	f240 808a 	bls.w	40365e <_realloc_r+0x30a>
  40354a:	6829      	ldr	r1, [r5, #0]
  40354c:	f8ca 1008 	str.w	r1, [sl, #8]
  403550:	6869      	ldr	r1, [r5, #4]
  403552:	f8ca 100c 	str.w	r1, [sl, #12]
  403556:	2a1b      	cmp	r2, #27
  403558:	f200 808a 	bhi.w	403670 <_realloc_r+0x31c>
  40355c:	3508      	adds	r5, #8
  40355e:	f10a 0210 	add.w	r2, sl, #16
  403562:	6829      	ldr	r1, [r5, #0]
  403564:	6011      	str	r1, [r2, #0]
  403566:	6869      	ldr	r1, [r5, #4]
  403568:	6051      	str	r1, [r2, #4]
  40356a:	68a9      	ldr	r1, [r5, #8]
  40356c:	6091      	str	r1, [r2, #8]
  40356e:	eb0a 0107 	add.w	r1, sl, r7
  403572:	ebab 0207 	sub.w	r2, fp, r7
  403576:	f042 0201 	orr.w	r2, r2, #1
  40357a:	6099      	str	r1, [r3, #8]
  40357c:	604a      	str	r2, [r1, #4]
  40357e:	f8da 3004 	ldr.w	r3, [sl, #4]
  403582:	f003 0301 	and.w	r3, r3, #1
  403586:	431f      	orrs	r7, r3
  403588:	4640      	mov	r0, r8
  40358a:	f8ca 7004 	str.w	r7, [sl, #4]
  40358e:	f7ff fedf 	bl	403350 <__malloc_unlock>
  403592:	e751      	b.n	403438 <_realloc_r+0xe4>
  403594:	682b      	ldr	r3, [r5, #0]
  403596:	6003      	str	r3, [r0, #0]
  403598:	686b      	ldr	r3, [r5, #4]
  40359a:	6043      	str	r3, [r0, #4]
  40359c:	2a1b      	cmp	r2, #27
  40359e:	d82d      	bhi.n	4035fc <_realloc_r+0x2a8>
  4035a0:	f100 0308 	add.w	r3, r0, #8
  4035a4:	f105 0208 	add.w	r2, r5, #8
  4035a8:	e71b      	b.n	4033e2 <_realloc_r+0x8e>
  4035aa:	4632      	mov	r2, r6
  4035ac:	6829      	ldr	r1, [r5, #0]
  4035ae:	6011      	str	r1, [r2, #0]
  4035b0:	6869      	ldr	r1, [r5, #4]
  4035b2:	6051      	str	r1, [r2, #4]
  4035b4:	68a9      	ldr	r1, [r5, #8]
  4035b6:	6091      	str	r1, [r2, #8]
  4035b8:	461c      	mov	r4, r3
  4035ba:	46d1      	mov	r9, sl
  4035bc:	e72a      	b.n	403414 <_realloc_r+0xc0>
  4035be:	eb09 0107 	add.w	r1, r9, r7
  4035c2:	ebab 0b07 	sub.w	fp, fp, r7
  4035c6:	f04b 0201 	orr.w	r2, fp, #1
  4035ca:	6099      	str	r1, [r3, #8]
  4035cc:	604a      	str	r2, [r1, #4]
  4035ce:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4035d2:	f003 0301 	and.w	r3, r3, #1
  4035d6:	431f      	orrs	r7, r3
  4035d8:	4640      	mov	r0, r8
  4035da:	f845 7c04 	str.w	r7, [r5, #-4]
  4035de:	f7ff feb7 	bl	403350 <__malloc_unlock>
  4035e2:	462e      	mov	r6, r5
  4035e4:	e728      	b.n	403438 <_realloc_r+0xe4>
  4035e6:	4629      	mov	r1, r5
  4035e8:	f7ff fe4c 	bl	403284 <memmove>
  4035ec:	e6ff      	b.n	4033ee <_realloc_r+0x9a>
  4035ee:	4629      	mov	r1, r5
  4035f0:	4630      	mov	r0, r6
  4035f2:	461c      	mov	r4, r3
  4035f4:	46d1      	mov	r9, sl
  4035f6:	f7ff fe45 	bl	403284 <memmove>
  4035fa:	e70b      	b.n	403414 <_realloc_r+0xc0>
  4035fc:	68ab      	ldr	r3, [r5, #8]
  4035fe:	6083      	str	r3, [r0, #8]
  403600:	68eb      	ldr	r3, [r5, #12]
  403602:	60c3      	str	r3, [r0, #12]
  403604:	2a24      	cmp	r2, #36	; 0x24
  403606:	d017      	beq.n	403638 <_realloc_r+0x2e4>
  403608:	f100 0310 	add.w	r3, r0, #16
  40360c:	f105 0210 	add.w	r2, r5, #16
  403610:	e6e7      	b.n	4033e2 <_realloc_r+0x8e>
  403612:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403616:	f023 0303 	bic.w	r3, r3, #3
  40361a:	441c      	add	r4, r3
  40361c:	462e      	mov	r6, r5
  40361e:	e6f9      	b.n	403414 <_realloc_r+0xc0>
  403620:	68a9      	ldr	r1, [r5, #8]
  403622:	f8ca 1010 	str.w	r1, [sl, #16]
  403626:	68e9      	ldr	r1, [r5, #12]
  403628:	f8ca 1014 	str.w	r1, [sl, #20]
  40362c:	2a24      	cmp	r2, #36	; 0x24
  40362e:	d00c      	beq.n	40364a <_realloc_r+0x2f6>
  403630:	3510      	adds	r5, #16
  403632:	f10a 0218 	add.w	r2, sl, #24
  403636:	e7b9      	b.n	4035ac <_realloc_r+0x258>
  403638:	692b      	ldr	r3, [r5, #16]
  40363a:	6103      	str	r3, [r0, #16]
  40363c:	696b      	ldr	r3, [r5, #20]
  40363e:	6143      	str	r3, [r0, #20]
  403640:	f105 0218 	add.w	r2, r5, #24
  403644:	f100 0318 	add.w	r3, r0, #24
  403648:	e6cb      	b.n	4033e2 <_realloc_r+0x8e>
  40364a:	692a      	ldr	r2, [r5, #16]
  40364c:	f8ca 2018 	str.w	r2, [sl, #24]
  403650:	696a      	ldr	r2, [r5, #20]
  403652:	f8ca 201c 	str.w	r2, [sl, #28]
  403656:	3518      	adds	r5, #24
  403658:	f10a 0220 	add.w	r2, sl, #32
  40365c:	e7a6      	b.n	4035ac <_realloc_r+0x258>
  40365e:	4632      	mov	r2, r6
  403660:	e77f      	b.n	403562 <_realloc_r+0x20e>
  403662:	4629      	mov	r1, r5
  403664:	4630      	mov	r0, r6
  403666:	9301      	str	r3, [sp, #4]
  403668:	f7ff fe0c 	bl	403284 <memmove>
  40366c:	9b01      	ldr	r3, [sp, #4]
  40366e:	e77e      	b.n	40356e <_realloc_r+0x21a>
  403670:	68a9      	ldr	r1, [r5, #8]
  403672:	f8ca 1010 	str.w	r1, [sl, #16]
  403676:	68e9      	ldr	r1, [r5, #12]
  403678:	f8ca 1014 	str.w	r1, [sl, #20]
  40367c:	2a24      	cmp	r2, #36	; 0x24
  40367e:	d003      	beq.n	403688 <_realloc_r+0x334>
  403680:	3510      	adds	r5, #16
  403682:	f10a 0218 	add.w	r2, sl, #24
  403686:	e76c      	b.n	403562 <_realloc_r+0x20e>
  403688:	692a      	ldr	r2, [r5, #16]
  40368a:	f8ca 2018 	str.w	r2, [sl, #24]
  40368e:	696a      	ldr	r2, [r5, #20]
  403690:	f8ca 201c 	str.w	r2, [sl, #28]
  403694:	3518      	adds	r5, #24
  403696:	f10a 0220 	add.w	r2, sl, #32
  40369a:	e762      	b.n	403562 <_realloc_r+0x20e>
  40369c:	204005ac 	.word	0x204005ac

004036a0 <_sbrk_r>:
  4036a0:	b538      	push	{r3, r4, r5, lr}
  4036a2:	4c07      	ldr	r4, [pc, #28]	; (4036c0 <_sbrk_r+0x20>)
  4036a4:	2300      	movs	r3, #0
  4036a6:	4605      	mov	r5, r0
  4036a8:	4608      	mov	r0, r1
  4036aa:	6023      	str	r3, [r4, #0]
  4036ac:	f7fd fa50 	bl	400b50 <_sbrk>
  4036b0:	1c43      	adds	r3, r0, #1
  4036b2:	d000      	beq.n	4036b6 <_sbrk_r+0x16>
  4036b4:	bd38      	pop	{r3, r4, r5, pc}
  4036b6:	6823      	ldr	r3, [r4, #0]
  4036b8:	2b00      	cmp	r3, #0
  4036ba:	d0fb      	beq.n	4036b4 <_sbrk_r+0x14>
  4036bc:	602b      	str	r3, [r5, #0]
  4036be:	bd38      	pop	{r3, r4, r5, pc}
  4036c0:	20400a98 	.word	0x20400a98

004036c4 <__sread>:
  4036c4:	b510      	push	{r4, lr}
  4036c6:	460c      	mov	r4, r1
  4036c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4036cc:	f000 f9c4 	bl	403a58 <_read_r>
  4036d0:	2800      	cmp	r0, #0
  4036d2:	db03      	blt.n	4036dc <__sread+0x18>
  4036d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4036d6:	4403      	add	r3, r0
  4036d8:	6523      	str	r3, [r4, #80]	; 0x50
  4036da:	bd10      	pop	{r4, pc}
  4036dc:	89a3      	ldrh	r3, [r4, #12]
  4036de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4036e2:	81a3      	strh	r3, [r4, #12]
  4036e4:	bd10      	pop	{r4, pc}
  4036e6:	bf00      	nop

004036e8 <__swrite>:
  4036e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4036ec:	4616      	mov	r6, r2
  4036ee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4036f2:	461f      	mov	r7, r3
  4036f4:	05d3      	lsls	r3, r2, #23
  4036f6:	460c      	mov	r4, r1
  4036f8:	4605      	mov	r5, r0
  4036fa:	d507      	bpl.n	40370c <__swrite+0x24>
  4036fc:	2200      	movs	r2, #0
  4036fe:	2302      	movs	r3, #2
  403700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403704:	f000 f992 	bl	403a2c <_lseek_r>
  403708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40370c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403710:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403714:	81a2      	strh	r2, [r4, #12]
  403716:	463b      	mov	r3, r7
  403718:	4632      	mov	r2, r6
  40371a:	4628      	mov	r0, r5
  40371c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403720:	f000 b8a4 	b.w	40386c <_write_r>

00403724 <__sseek>:
  403724:	b510      	push	{r4, lr}
  403726:	460c      	mov	r4, r1
  403728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40372c:	f000 f97e 	bl	403a2c <_lseek_r>
  403730:	89a3      	ldrh	r3, [r4, #12]
  403732:	1c42      	adds	r2, r0, #1
  403734:	bf0e      	itee	eq
  403736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40373a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40373e:	6520      	strne	r0, [r4, #80]	; 0x50
  403740:	81a3      	strh	r3, [r4, #12]
  403742:	bd10      	pop	{r4, pc}

00403744 <__sclose>:
  403744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403748:	f000 b8f8 	b.w	40393c <_close_r>

0040374c <__swbuf_r>:
  40374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40374e:	460d      	mov	r5, r1
  403750:	4614      	mov	r4, r2
  403752:	4606      	mov	r6, r0
  403754:	b110      	cbz	r0, 40375c <__swbuf_r+0x10>
  403756:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403758:	2b00      	cmp	r3, #0
  40375a:	d04b      	beq.n	4037f4 <__swbuf_r+0xa8>
  40375c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403760:	69a3      	ldr	r3, [r4, #24]
  403762:	60a3      	str	r3, [r4, #8]
  403764:	b291      	uxth	r1, r2
  403766:	0708      	lsls	r0, r1, #28
  403768:	d539      	bpl.n	4037de <__swbuf_r+0x92>
  40376a:	6923      	ldr	r3, [r4, #16]
  40376c:	2b00      	cmp	r3, #0
  40376e:	d036      	beq.n	4037de <__swbuf_r+0x92>
  403770:	b2ed      	uxtb	r5, r5
  403772:	0489      	lsls	r1, r1, #18
  403774:	462f      	mov	r7, r5
  403776:	d515      	bpl.n	4037a4 <__swbuf_r+0x58>
  403778:	6822      	ldr	r2, [r4, #0]
  40377a:	6961      	ldr	r1, [r4, #20]
  40377c:	1ad3      	subs	r3, r2, r3
  40377e:	428b      	cmp	r3, r1
  403780:	da1c      	bge.n	4037bc <__swbuf_r+0x70>
  403782:	3301      	adds	r3, #1
  403784:	68a1      	ldr	r1, [r4, #8]
  403786:	1c50      	adds	r0, r2, #1
  403788:	3901      	subs	r1, #1
  40378a:	60a1      	str	r1, [r4, #8]
  40378c:	6020      	str	r0, [r4, #0]
  40378e:	7015      	strb	r5, [r2, #0]
  403790:	6962      	ldr	r2, [r4, #20]
  403792:	429a      	cmp	r2, r3
  403794:	d01a      	beq.n	4037cc <__swbuf_r+0x80>
  403796:	89a3      	ldrh	r3, [r4, #12]
  403798:	07db      	lsls	r3, r3, #31
  40379a:	d501      	bpl.n	4037a0 <__swbuf_r+0x54>
  40379c:	2d0a      	cmp	r5, #10
  40379e:	d015      	beq.n	4037cc <__swbuf_r+0x80>
  4037a0:	4638      	mov	r0, r7
  4037a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4037a4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4037a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4037aa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4037ae:	81a2      	strh	r2, [r4, #12]
  4037b0:	6822      	ldr	r2, [r4, #0]
  4037b2:	6661      	str	r1, [r4, #100]	; 0x64
  4037b4:	6961      	ldr	r1, [r4, #20]
  4037b6:	1ad3      	subs	r3, r2, r3
  4037b8:	428b      	cmp	r3, r1
  4037ba:	dbe2      	blt.n	403782 <__swbuf_r+0x36>
  4037bc:	4621      	mov	r1, r4
  4037be:	4630      	mov	r0, r6
  4037c0:	f7fe fd36 	bl	402230 <_fflush_r>
  4037c4:	b940      	cbnz	r0, 4037d8 <__swbuf_r+0x8c>
  4037c6:	6822      	ldr	r2, [r4, #0]
  4037c8:	2301      	movs	r3, #1
  4037ca:	e7db      	b.n	403784 <__swbuf_r+0x38>
  4037cc:	4621      	mov	r1, r4
  4037ce:	4630      	mov	r0, r6
  4037d0:	f7fe fd2e 	bl	402230 <_fflush_r>
  4037d4:	2800      	cmp	r0, #0
  4037d6:	d0e3      	beq.n	4037a0 <__swbuf_r+0x54>
  4037d8:	f04f 37ff 	mov.w	r7, #4294967295
  4037dc:	e7e0      	b.n	4037a0 <__swbuf_r+0x54>
  4037de:	4621      	mov	r1, r4
  4037e0:	4630      	mov	r0, r6
  4037e2:	f7fe fc11 	bl	402008 <__swsetup_r>
  4037e6:	2800      	cmp	r0, #0
  4037e8:	d1f6      	bne.n	4037d8 <__swbuf_r+0x8c>
  4037ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4037ee:	6923      	ldr	r3, [r4, #16]
  4037f0:	b291      	uxth	r1, r2
  4037f2:	e7bd      	b.n	403770 <__swbuf_r+0x24>
  4037f4:	f7fe fdb0 	bl	402358 <__sinit>
  4037f8:	e7b0      	b.n	40375c <__swbuf_r+0x10>
  4037fa:	bf00      	nop

004037fc <_wcrtomb_r>:
  4037fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4037fe:	4606      	mov	r6, r0
  403800:	b085      	sub	sp, #20
  403802:	461f      	mov	r7, r3
  403804:	b189      	cbz	r1, 40382a <_wcrtomb_r+0x2e>
  403806:	4c10      	ldr	r4, [pc, #64]	; (403848 <_wcrtomb_r+0x4c>)
  403808:	4d10      	ldr	r5, [pc, #64]	; (40384c <_wcrtomb_r+0x50>)
  40380a:	6824      	ldr	r4, [r4, #0]
  40380c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40380e:	2c00      	cmp	r4, #0
  403810:	bf08      	it	eq
  403812:	462c      	moveq	r4, r5
  403814:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  403818:	47a0      	blx	r4
  40381a:	1c43      	adds	r3, r0, #1
  40381c:	d103      	bne.n	403826 <_wcrtomb_r+0x2a>
  40381e:	2200      	movs	r2, #0
  403820:	238a      	movs	r3, #138	; 0x8a
  403822:	603a      	str	r2, [r7, #0]
  403824:	6033      	str	r3, [r6, #0]
  403826:	b005      	add	sp, #20
  403828:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40382a:	460c      	mov	r4, r1
  40382c:	4906      	ldr	r1, [pc, #24]	; (403848 <_wcrtomb_r+0x4c>)
  40382e:	4a07      	ldr	r2, [pc, #28]	; (40384c <_wcrtomb_r+0x50>)
  403830:	6809      	ldr	r1, [r1, #0]
  403832:	6b49      	ldr	r1, [r1, #52]	; 0x34
  403834:	2900      	cmp	r1, #0
  403836:	bf08      	it	eq
  403838:	4611      	moveq	r1, r2
  40383a:	4622      	mov	r2, r4
  40383c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  403840:	a901      	add	r1, sp, #4
  403842:	47a0      	blx	r4
  403844:	e7e9      	b.n	40381a <_wcrtomb_r+0x1e>
  403846:	bf00      	nop
  403848:	20400010 	.word	0x20400010
  40384c:	20400440 	.word	0x20400440

00403850 <__ascii_wctomb>:
  403850:	b121      	cbz	r1, 40385c <__ascii_wctomb+0xc>
  403852:	2aff      	cmp	r2, #255	; 0xff
  403854:	d804      	bhi.n	403860 <__ascii_wctomb+0x10>
  403856:	700a      	strb	r2, [r1, #0]
  403858:	2001      	movs	r0, #1
  40385a:	4770      	bx	lr
  40385c:	4608      	mov	r0, r1
  40385e:	4770      	bx	lr
  403860:	238a      	movs	r3, #138	; 0x8a
  403862:	6003      	str	r3, [r0, #0]
  403864:	f04f 30ff 	mov.w	r0, #4294967295
  403868:	4770      	bx	lr
  40386a:	bf00      	nop

0040386c <_write_r>:
  40386c:	b570      	push	{r4, r5, r6, lr}
  40386e:	460d      	mov	r5, r1
  403870:	4c08      	ldr	r4, [pc, #32]	; (403894 <_write_r+0x28>)
  403872:	4611      	mov	r1, r2
  403874:	4606      	mov	r6, r0
  403876:	461a      	mov	r2, r3
  403878:	4628      	mov	r0, r5
  40387a:	2300      	movs	r3, #0
  40387c:	6023      	str	r3, [r4, #0]
  40387e:	f7fc fceb 	bl	400258 <_write>
  403882:	1c43      	adds	r3, r0, #1
  403884:	d000      	beq.n	403888 <_write_r+0x1c>
  403886:	bd70      	pop	{r4, r5, r6, pc}
  403888:	6823      	ldr	r3, [r4, #0]
  40388a:	2b00      	cmp	r3, #0
  40388c:	d0fb      	beq.n	403886 <_write_r+0x1a>
  40388e:	6033      	str	r3, [r6, #0]
  403890:	bd70      	pop	{r4, r5, r6, pc}
  403892:	bf00      	nop
  403894:	20400a98 	.word	0x20400a98

00403898 <__register_exitproc>:
  403898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40389c:	4c25      	ldr	r4, [pc, #148]	; (403934 <__register_exitproc+0x9c>)
  40389e:	6825      	ldr	r5, [r4, #0]
  4038a0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4038a4:	4606      	mov	r6, r0
  4038a6:	4688      	mov	r8, r1
  4038a8:	4692      	mov	sl, r2
  4038aa:	4699      	mov	r9, r3
  4038ac:	b3c4      	cbz	r4, 403920 <__register_exitproc+0x88>
  4038ae:	6860      	ldr	r0, [r4, #4]
  4038b0:	281f      	cmp	r0, #31
  4038b2:	dc17      	bgt.n	4038e4 <__register_exitproc+0x4c>
  4038b4:	1c43      	adds	r3, r0, #1
  4038b6:	b176      	cbz	r6, 4038d6 <__register_exitproc+0x3e>
  4038b8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4038bc:	2201      	movs	r2, #1
  4038be:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4038c2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4038c6:	4082      	lsls	r2, r0
  4038c8:	4311      	orrs	r1, r2
  4038ca:	2e02      	cmp	r6, #2
  4038cc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4038d0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4038d4:	d01e      	beq.n	403914 <__register_exitproc+0x7c>
  4038d6:	3002      	adds	r0, #2
  4038d8:	6063      	str	r3, [r4, #4]
  4038da:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4038de:	2000      	movs	r0, #0
  4038e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4038e4:	4b14      	ldr	r3, [pc, #80]	; (403938 <__register_exitproc+0xa0>)
  4038e6:	b303      	cbz	r3, 40392a <__register_exitproc+0x92>
  4038e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4038ec:	f7ff f912 	bl	402b14 <malloc>
  4038f0:	4604      	mov	r4, r0
  4038f2:	b1d0      	cbz	r0, 40392a <__register_exitproc+0x92>
  4038f4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4038f8:	2700      	movs	r7, #0
  4038fa:	e880 0088 	stmia.w	r0, {r3, r7}
  4038fe:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403902:	4638      	mov	r0, r7
  403904:	2301      	movs	r3, #1
  403906:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40390a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40390e:	2e00      	cmp	r6, #0
  403910:	d0e1      	beq.n	4038d6 <__register_exitproc+0x3e>
  403912:	e7d1      	b.n	4038b8 <__register_exitproc+0x20>
  403914:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  403918:	430a      	orrs	r2, r1
  40391a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40391e:	e7da      	b.n	4038d6 <__register_exitproc+0x3e>
  403920:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  403924:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403928:	e7c1      	b.n	4038ae <__register_exitproc+0x16>
  40392a:	f04f 30ff 	mov.w	r0, #4294967295
  40392e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403932:	bf00      	nop
  403934:	00403e84 	.word	0x00403e84
  403938:	00402b15 	.word	0x00402b15

0040393c <_close_r>:
  40393c:	b538      	push	{r3, r4, r5, lr}
  40393e:	4c07      	ldr	r4, [pc, #28]	; (40395c <_close_r+0x20>)
  403940:	2300      	movs	r3, #0
  403942:	4605      	mov	r5, r0
  403944:	4608      	mov	r0, r1
  403946:	6023      	str	r3, [r4, #0]
  403948:	f7fd f91e 	bl	400b88 <_close>
  40394c:	1c43      	adds	r3, r0, #1
  40394e:	d000      	beq.n	403952 <_close_r+0x16>
  403950:	bd38      	pop	{r3, r4, r5, pc}
  403952:	6823      	ldr	r3, [r4, #0]
  403954:	2b00      	cmp	r3, #0
  403956:	d0fb      	beq.n	403950 <_close_r+0x14>
  403958:	602b      	str	r3, [r5, #0]
  40395a:	bd38      	pop	{r3, r4, r5, pc}
  40395c:	20400a98 	.word	0x20400a98

00403960 <_fclose_r>:
  403960:	b570      	push	{r4, r5, r6, lr}
  403962:	b139      	cbz	r1, 403974 <_fclose_r+0x14>
  403964:	4605      	mov	r5, r0
  403966:	460c      	mov	r4, r1
  403968:	b108      	cbz	r0, 40396e <_fclose_r+0xe>
  40396a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40396c:	b383      	cbz	r3, 4039d0 <_fclose_r+0x70>
  40396e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403972:	b913      	cbnz	r3, 40397a <_fclose_r+0x1a>
  403974:	2600      	movs	r6, #0
  403976:	4630      	mov	r0, r6
  403978:	bd70      	pop	{r4, r5, r6, pc}
  40397a:	4621      	mov	r1, r4
  40397c:	4628      	mov	r0, r5
  40397e:	f7fe fbb7 	bl	4020f0 <__sflush_r>
  403982:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403984:	4606      	mov	r6, r0
  403986:	b133      	cbz	r3, 403996 <_fclose_r+0x36>
  403988:	69e1      	ldr	r1, [r4, #28]
  40398a:	4628      	mov	r0, r5
  40398c:	4798      	blx	r3
  40398e:	2800      	cmp	r0, #0
  403990:	bfb8      	it	lt
  403992:	f04f 36ff 	movlt.w	r6, #4294967295
  403996:	89a3      	ldrh	r3, [r4, #12]
  403998:	061b      	lsls	r3, r3, #24
  40399a:	d41c      	bmi.n	4039d6 <_fclose_r+0x76>
  40399c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40399e:	b141      	cbz	r1, 4039b2 <_fclose_r+0x52>
  4039a0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4039a4:	4299      	cmp	r1, r3
  4039a6:	d002      	beq.n	4039ae <_fclose_r+0x4e>
  4039a8:	4628      	mov	r0, r5
  4039aa:	f7fe fdab 	bl	402504 <_free_r>
  4039ae:	2300      	movs	r3, #0
  4039b0:	6323      	str	r3, [r4, #48]	; 0x30
  4039b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4039b4:	b121      	cbz	r1, 4039c0 <_fclose_r+0x60>
  4039b6:	4628      	mov	r0, r5
  4039b8:	f7fe fda4 	bl	402504 <_free_r>
  4039bc:	2300      	movs	r3, #0
  4039be:	6463      	str	r3, [r4, #68]	; 0x44
  4039c0:	f7fe fcd0 	bl	402364 <__sfp_lock_acquire>
  4039c4:	2300      	movs	r3, #0
  4039c6:	81a3      	strh	r3, [r4, #12]
  4039c8:	f7fe fcce 	bl	402368 <__sfp_lock_release>
  4039cc:	4630      	mov	r0, r6
  4039ce:	bd70      	pop	{r4, r5, r6, pc}
  4039d0:	f7fe fcc2 	bl	402358 <__sinit>
  4039d4:	e7cb      	b.n	40396e <_fclose_r+0xe>
  4039d6:	6921      	ldr	r1, [r4, #16]
  4039d8:	4628      	mov	r0, r5
  4039da:	f7fe fd93 	bl	402504 <_free_r>
  4039de:	e7dd      	b.n	40399c <_fclose_r+0x3c>

004039e0 <_fstat_r>:
  4039e0:	b538      	push	{r3, r4, r5, lr}
  4039e2:	460b      	mov	r3, r1
  4039e4:	4c07      	ldr	r4, [pc, #28]	; (403a04 <_fstat_r+0x24>)
  4039e6:	4605      	mov	r5, r0
  4039e8:	4611      	mov	r1, r2
  4039ea:	4618      	mov	r0, r3
  4039ec:	2300      	movs	r3, #0
  4039ee:	6023      	str	r3, [r4, #0]
  4039f0:	f7fd f8cd 	bl	400b8e <_fstat>
  4039f4:	1c43      	adds	r3, r0, #1
  4039f6:	d000      	beq.n	4039fa <_fstat_r+0x1a>
  4039f8:	bd38      	pop	{r3, r4, r5, pc}
  4039fa:	6823      	ldr	r3, [r4, #0]
  4039fc:	2b00      	cmp	r3, #0
  4039fe:	d0fb      	beq.n	4039f8 <_fstat_r+0x18>
  403a00:	602b      	str	r3, [r5, #0]
  403a02:	bd38      	pop	{r3, r4, r5, pc}
  403a04:	20400a98 	.word	0x20400a98

00403a08 <_isatty_r>:
  403a08:	b538      	push	{r3, r4, r5, lr}
  403a0a:	4c07      	ldr	r4, [pc, #28]	; (403a28 <_isatty_r+0x20>)
  403a0c:	2300      	movs	r3, #0
  403a0e:	4605      	mov	r5, r0
  403a10:	4608      	mov	r0, r1
  403a12:	6023      	str	r3, [r4, #0]
  403a14:	f7fd f8c0 	bl	400b98 <_isatty>
  403a18:	1c43      	adds	r3, r0, #1
  403a1a:	d000      	beq.n	403a1e <_isatty_r+0x16>
  403a1c:	bd38      	pop	{r3, r4, r5, pc}
  403a1e:	6823      	ldr	r3, [r4, #0]
  403a20:	2b00      	cmp	r3, #0
  403a22:	d0fb      	beq.n	403a1c <_isatty_r+0x14>
  403a24:	602b      	str	r3, [r5, #0]
  403a26:	bd38      	pop	{r3, r4, r5, pc}
  403a28:	20400a98 	.word	0x20400a98

00403a2c <_lseek_r>:
  403a2c:	b570      	push	{r4, r5, r6, lr}
  403a2e:	460d      	mov	r5, r1
  403a30:	4c08      	ldr	r4, [pc, #32]	; (403a54 <_lseek_r+0x28>)
  403a32:	4611      	mov	r1, r2
  403a34:	4606      	mov	r6, r0
  403a36:	461a      	mov	r2, r3
  403a38:	4628      	mov	r0, r5
  403a3a:	2300      	movs	r3, #0
  403a3c:	6023      	str	r3, [r4, #0]
  403a3e:	f7fd f8ad 	bl	400b9c <_lseek>
  403a42:	1c43      	adds	r3, r0, #1
  403a44:	d000      	beq.n	403a48 <_lseek_r+0x1c>
  403a46:	bd70      	pop	{r4, r5, r6, pc}
  403a48:	6823      	ldr	r3, [r4, #0]
  403a4a:	2b00      	cmp	r3, #0
  403a4c:	d0fb      	beq.n	403a46 <_lseek_r+0x1a>
  403a4e:	6033      	str	r3, [r6, #0]
  403a50:	bd70      	pop	{r4, r5, r6, pc}
  403a52:	bf00      	nop
  403a54:	20400a98 	.word	0x20400a98

00403a58 <_read_r>:
  403a58:	b570      	push	{r4, r5, r6, lr}
  403a5a:	460d      	mov	r5, r1
  403a5c:	4c08      	ldr	r4, [pc, #32]	; (403a80 <_read_r+0x28>)
  403a5e:	4611      	mov	r1, r2
  403a60:	4606      	mov	r6, r0
  403a62:	461a      	mov	r2, r3
  403a64:	4628      	mov	r0, r5
  403a66:	2300      	movs	r3, #0
  403a68:	6023      	str	r3, [r4, #0]
  403a6a:	f7fc fbd7 	bl	40021c <_read>
  403a6e:	1c43      	adds	r3, r0, #1
  403a70:	d000      	beq.n	403a74 <_read_r+0x1c>
  403a72:	bd70      	pop	{r4, r5, r6, pc}
  403a74:	6823      	ldr	r3, [r4, #0]
  403a76:	2b00      	cmp	r3, #0
  403a78:	d0fb      	beq.n	403a72 <_read_r+0x1a>
  403a7a:	6033      	str	r3, [r6, #0]
  403a7c:	bd70      	pop	{r4, r5, r6, pc}
  403a7e:	bf00      	nop
  403a80:	20400a98 	.word	0x20400a98

00403a84 <__aeabi_uldivmod>:
  403a84:	b953      	cbnz	r3, 403a9c <__aeabi_uldivmod+0x18>
  403a86:	b94a      	cbnz	r2, 403a9c <__aeabi_uldivmod+0x18>
  403a88:	2900      	cmp	r1, #0
  403a8a:	bf08      	it	eq
  403a8c:	2800      	cmpeq	r0, #0
  403a8e:	bf1c      	itt	ne
  403a90:	f04f 31ff 	movne.w	r1, #4294967295
  403a94:	f04f 30ff 	movne.w	r0, #4294967295
  403a98:	f000 b97a 	b.w	403d90 <__aeabi_idiv0>
  403a9c:	f1ad 0c08 	sub.w	ip, sp, #8
  403aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403aa4:	f000 f806 	bl	403ab4 <__udivmoddi4>
  403aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
  403aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403ab0:	b004      	add	sp, #16
  403ab2:	4770      	bx	lr

00403ab4 <__udivmoddi4>:
  403ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403ab8:	468c      	mov	ip, r1
  403aba:	460d      	mov	r5, r1
  403abc:	4604      	mov	r4, r0
  403abe:	9e08      	ldr	r6, [sp, #32]
  403ac0:	2b00      	cmp	r3, #0
  403ac2:	d151      	bne.n	403b68 <__udivmoddi4+0xb4>
  403ac4:	428a      	cmp	r2, r1
  403ac6:	4617      	mov	r7, r2
  403ac8:	d96d      	bls.n	403ba6 <__udivmoddi4+0xf2>
  403aca:	fab2 fe82 	clz	lr, r2
  403ace:	f1be 0f00 	cmp.w	lr, #0
  403ad2:	d00b      	beq.n	403aec <__udivmoddi4+0x38>
  403ad4:	f1ce 0c20 	rsb	ip, lr, #32
  403ad8:	fa01 f50e 	lsl.w	r5, r1, lr
  403adc:	fa20 fc0c 	lsr.w	ip, r0, ip
  403ae0:	fa02 f70e 	lsl.w	r7, r2, lr
  403ae4:	ea4c 0c05 	orr.w	ip, ip, r5
  403ae8:	fa00 f40e 	lsl.w	r4, r0, lr
  403aec:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403af0:	0c25      	lsrs	r5, r4, #16
  403af2:	fbbc f8fa 	udiv	r8, ip, sl
  403af6:	fa1f f987 	uxth.w	r9, r7
  403afa:	fb0a cc18 	mls	ip, sl, r8, ip
  403afe:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403b02:	fb08 f309 	mul.w	r3, r8, r9
  403b06:	42ab      	cmp	r3, r5
  403b08:	d90a      	bls.n	403b20 <__udivmoddi4+0x6c>
  403b0a:	19ed      	adds	r5, r5, r7
  403b0c:	f108 32ff 	add.w	r2, r8, #4294967295
  403b10:	f080 8123 	bcs.w	403d5a <__udivmoddi4+0x2a6>
  403b14:	42ab      	cmp	r3, r5
  403b16:	f240 8120 	bls.w	403d5a <__udivmoddi4+0x2a6>
  403b1a:	f1a8 0802 	sub.w	r8, r8, #2
  403b1e:	443d      	add	r5, r7
  403b20:	1aed      	subs	r5, r5, r3
  403b22:	b2a4      	uxth	r4, r4
  403b24:	fbb5 f0fa 	udiv	r0, r5, sl
  403b28:	fb0a 5510 	mls	r5, sl, r0, r5
  403b2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403b30:	fb00 f909 	mul.w	r9, r0, r9
  403b34:	45a1      	cmp	r9, r4
  403b36:	d909      	bls.n	403b4c <__udivmoddi4+0x98>
  403b38:	19e4      	adds	r4, r4, r7
  403b3a:	f100 33ff 	add.w	r3, r0, #4294967295
  403b3e:	f080 810a 	bcs.w	403d56 <__udivmoddi4+0x2a2>
  403b42:	45a1      	cmp	r9, r4
  403b44:	f240 8107 	bls.w	403d56 <__udivmoddi4+0x2a2>
  403b48:	3802      	subs	r0, #2
  403b4a:	443c      	add	r4, r7
  403b4c:	eba4 0409 	sub.w	r4, r4, r9
  403b50:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403b54:	2100      	movs	r1, #0
  403b56:	2e00      	cmp	r6, #0
  403b58:	d061      	beq.n	403c1e <__udivmoddi4+0x16a>
  403b5a:	fa24 f40e 	lsr.w	r4, r4, lr
  403b5e:	2300      	movs	r3, #0
  403b60:	6034      	str	r4, [r6, #0]
  403b62:	6073      	str	r3, [r6, #4]
  403b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403b68:	428b      	cmp	r3, r1
  403b6a:	d907      	bls.n	403b7c <__udivmoddi4+0xc8>
  403b6c:	2e00      	cmp	r6, #0
  403b6e:	d054      	beq.n	403c1a <__udivmoddi4+0x166>
  403b70:	2100      	movs	r1, #0
  403b72:	e886 0021 	stmia.w	r6, {r0, r5}
  403b76:	4608      	mov	r0, r1
  403b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403b7c:	fab3 f183 	clz	r1, r3
  403b80:	2900      	cmp	r1, #0
  403b82:	f040 808e 	bne.w	403ca2 <__udivmoddi4+0x1ee>
  403b86:	42ab      	cmp	r3, r5
  403b88:	d302      	bcc.n	403b90 <__udivmoddi4+0xdc>
  403b8a:	4282      	cmp	r2, r0
  403b8c:	f200 80fa 	bhi.w	403d84 <__udivmoddi4+0x2d0>
  403b90:	1a84      	subs	r4, r0, r2
  403b92:	eb65 0503 	sbc.w	r5, r5, r3
  403b96:	2001      	movs	r0, #1
  403b98:	46ac      	mov	ip, r5
  403b9a:	2e00      	cmp	r6, #0
  403b9c:	d03f      	beq.n	403c1e <__udivmoddi4+0x16a>
  403b9e:	e886 1010 	stmia.w	r6, {r4, ip}
  403ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ba6:	b912      	cbnz	r2, 403bae <__udivmoddi4+0xfa>
  403ba8:	2701      	movs	r7, #1
  403baa:	fbb7 f7f2 	udiv	r7, r7, r2
  403bae:	fab7 fe87 	clz	lr, r7
  403bb2:	f1be 0f00 	cmp.w	lr, #0
  403bb6:	d134      	bne.n	403c22 <__udivmoddi4+0x16e>
  403bb8:	1beb      	subs	r3, r5, r7
  403bba:	0c3a      	lsrs	r2, r7, #16
  403bbc:	fa1f fc87 	uxth.w	ip, r7
  403bc0:	2101      	movs	r1, #1
  403bc2:	fbb3 f8f2 	udiv	r8, r3, r2
  403bc6:	0c25      	lsrs	r5, r4, #16
  403bc8:	fb02 3318 	mls	r3, r2, r8, r3
  403bcc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403bd0:	fb0c f308 	mul.w	r3, ip, r8
  403bd4:	42ab      	cmp	r3, r5
  403bd6:	d907      	bls.n	403be8 <__udivmoddi4+0x134>
  403bd8:	19ed      	adds	r5, r5, r7
  403bda:	f108 30ff 	add.w	r0, r8, #4294967295
  403bde:	d202      	bcs.n	403be6 <__udivmoddi4+0x132>
  403be0:	42ab      	cmp	r3, r5
  403be2:	f200 80d1 	bhi.w	403d88 <__udivmoddi4+0x2d4>
  403be6:	4680      	mov	r8, r0
  403be8:	1aed      	subs	r5, r5, r3
  403bea:	b2a3      	uxth	r3, r4
  403bec:	fbb5 f0f2 	udiv	r0, r5, r2
  403bf0:	fb02 5510 	mls	r5, r2, r0, r5
  403bf4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403bf8:	fb0c fc00 	mul.w	ip, ip, r0
  403bfc:	45a4      	cmp	ip, r4
  403bfe:	d907      	bls.n	403c10 <__udivmoddi4+0x15c>
  403c00:	19e4      	adds	r4, r4, r7
  403c02:	f100 33ff 	add.w	r3, r0, #4294967295
  403c06:	d202      	bcs.n	403c0e <__udivmoddi4+0x15a>
  403c08:	45a4      	cmp	ip, r4
  403c0a:	f200 80b8 	bhi.w	403d7e <__udivmoddi4+0x2ca>
  403c0e:	4618      	mov	r0, r3
  403c10:	eba4 040c 	sub.w	r4, r4, ip
  403c14:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403c18:	e79d      	b.n	403b56 <__udivmoddi4+0xa2>
  403c1a:	4631      	mov	r1, r6
  403c1c:	4630      	mov	r0, r6
  403c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c22:	f1ce 0420 	rsb	r4, lr, #32
  403c26:	fa05 f30e 	lsl.w	r3, r5, lr
  403c2a:	fa07 f70e 	lsl.w	r7, r7, lr
  403c2e:	fa20 f804 	lsr.w	r8, r0, r4
  403c32:	0c3a      	lsrs	r2, r7, #16
  403c34:	fa25 f404 	lsr.w	r4, r5, r4
  403c38:	ea48 0803 	orr.w	r8, r8, r3
  403c3c:	fbb4 f1f2 	udiv	r1, r4, r2
  403c40:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403c44:	fb02 4411 	mls	r4, r2, r1, r4
  403c48:	fa1f fc87 	uxth.w	ip, r7
  403c4c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403c50:	fb01 f30c 	mul.w	r3, r1, ip
  403c54:	42ab      	cmp	r3, r5
  403c56:	fa00 f40e 	lsl.w	r4, r0, lr
  403c5a:	d909      	bls.n	403c70 <__udivmoddi4+0x1bc>
  403c5c:	19ed      	adds	r5, r5, r7
  403c5e:	f101 30ff 	add.w	r0, r1, #4294967295
  403c62:	f080 808a 	bcs.w	403d7a <__udivmoddi4+0x2c6>
  403c66:	42ab      	cmp	r3, r5
  403c68:	f240 8087 	bls.w	403d7a <__udivmoddi4+0x2c6>
  403c6c:	3902      	subs	r1, #2
  403c6e:	443d      	add	r5, r7
  403c70:	1aeb      	subs	r3, r5, r3
  403c72:	fa1f f588 	uxth.w	r5, r8
  403c76:	fbb3 f0f2 	udiv	r0, r3, r2
  403c7a:	fb02 3310 	mls	r3, r2, r0, r3
  403c7e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403c82:	fb00 f30c 	mul.w	r3, r0, ip
  403c86:	42ab      	cmp	r3, r5
  403c88:	d907      	bls.n	403c9a <__udivmoddi4+0x1e6>
  403c8a:	19ed      	adds	r5, r5, r7
  403c8c:	f100 38ff 	add.w	r8, r0, #4294967295
  403c90:	d26f      	bcs.n	403d72 <__udivmoddi4+0x2be>
  403c92:	42ab      	cmp	r3, r5
  403c94:	d96d      	bls.n	403d72 <__udivmoddi4+0x2be>
  403c96:	3802      	subs	r0, #2
  403c98:	443d      	add	r5, r7
  403c9a:	1aeb      	subs	r3, r5, r3
  403c9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403ca0:	e78f      	b.n	403bc2 <__udivmoddi4+0x10e>
  403ca2:	f1c1 0720 	rsb	r7, r1, #32
  403ca6:	fa22 f807 	lsr.w	r8, r2, r7
  403caa:	408b      	lsls	r3, r1
  403cac:	fa05 f401 	lsl.w	r4, r5, r1
  403cb0:	ea48 0303 	orr.w	r3, r8, r3
  403cb4:	fa20 fe07 	lsr.w	lr, r0, r7
  403cb8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403cbc:	40fd      	lsrs	r5, r7
  403cbe:	ea4e 0e04 	orr.w	lr, lr, r4
  403cc2:	fbb5 f9fc 	udiv	r9, r5, ip
  403cc6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403cca:	fb0c 5519 	mls	r5, ip, r9, r5
  403cce:	fa1f f883 	uxth.w	r8, r3
  403cd2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403cd6:	fb09 f408 	mul.w	r4, r9, r8
  403cda:	42ac      	cmp	r4, r5
  403cdc:	fa02 f201 	lsl.w	r2, r2, r1
  403ce0:	fa00 fa01 	lsl.w	sl, r0, r1
  403ce4:	d908      	bls.n	403cf8 <__udivmoddi4+0x244>
  403ce6:	18ed      	adds	r5, r5, r3
  403ce8:	f109 30ff 	add.w	r0, r9, #4294967295
  403cec:	d243      	bcs.n	403d76 <__udivmoddi4+0x2c2>
  403cee:	42ac      	cmp	r4, r5
  403cf0:	d941      	bls.n	403d76 <__udivmoddi4+0x2c2>
  403cf2:	f1a9 0902 	sub.w	r9, r9, #2
  403cf6:	441d      	add	r5, r3
  403cf8:	1b2d      	subs	r5, r5, r4
  403cfa:	fa1f fe8e 	uxth.w	lr, lr
  403cfe:	fbb5 f0fc 	udiv	r0, r5, ip
  403d02:	fb0c 5510 	mls	r5, ip, r0, r5
  403d06:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403d0a:	fb00 f808 	mul.w	r8, r0, r8
  403d0e:	45a0      	cmp	r8, r4
  403d10:	d907      	bls.n	403d22 <__udivmoddi4+0x26e>
  403d12:	18e4      	adds	r4, r4, r3
  403d14:	f100 35ff 	add.w	r5, r0, #4294967295
  403d18:	d229      	bcs.n	403d6e <__udivmoddi4+0x2ba>
  403d1a:	45a0      	cmp	r8, r4
  403d1c:	d927      	bls.n	403d6e <__udivmoddi4+0x2ba>
  403d1e:	3802      	subs	r0, #2
  403d20:	441c      	add	r4, r3
  403d22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403d26:	eba4 0408 	sub.w	r4, r4, r8
  403d2a:	fba0 8902 	umull	r8, r9, r0, r2
  403d2e:	454c      	cmp	r4, r9
  403d30:	46c6      	mov	lr, r8
  403d32:	464d      	mov	r5, r9
  403d34:	d315      	bcc.n	403d62 <__udivmoddi4+0x2ae>
  403d36:	d012      	beq.n	403d5e <__udivmoddi4+0x2aa>
  403d38:	b156      	cbz	r6, 403d50 <__udivmoddi4+0x29c>
  403d3a:	ebba 030e 	subs.w	r3, sl, lr
  403d3e:	eb64 0405 	sbc.w	r4, r4, r5
  403d42:	fa04 f707 	lsl.w	r7, r4, r7
  403d46:	40cb      	lsrs	r3, r1
  403d48:	431f      	orrs	r7, r3
  403d4a:	40cc      	lsrs	r4, r1
  403d4c:	6037      	str	r7, [r6, #0]
  403d4e:	6074      	str	r4, [r6, #4]
  403d50:	2100      	movs	r1, #0
  403d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d56:	4618      	mov	r0, r3
  403d58:	e6f8      	b.n	403b4c <__udivmoddi4+0x98>
  403d5a:	4690      	mov	r8, r2
  403d5c:	e6e0      	b.n	403b20 <__udivmoddi4+0x6c>
  403d5e:	45c2      	cmp	sl, r8
  403d60:	d2ea      	bcs.n	403d38 <__udivmoddi4+0x284>
  403d62:	ebb8 0e02 	subs.w	lr, r8, r2
  403d66:	eb69 0503 	sbc.w	r5, r9, r3
  403d6a:	3801      	subs	r0, #1
  403d6c:	e7e4      	b.n	403d38 <__udivmoddi4+0x284>
  403d6e:	4628      	mov	r0, r5
  403d70:	e7d7      	b.n	403d22 <__udivmoddi4+0x26e>
  403d72:	4640      	mov	r0, r8
  403d74:	e791      	b.n	403c9a <__udivmoddi4+0x1e6>
  403d76:	4681      	mov	r9, r0
  403d78:	e7be      	b.n	403cf8 <__udivmoddi4+0x244>
  403d7a:	4601      	mov	r1, r0
  403d7c:	e778      	b.n	403c70 <__udivmoddi4+0x1bc>
  403d7e:	3802      	subs	r0, #2
  403d80:	443c      	add	r4, r7
  403d82:	e745      	b.n	403c10 <__udivmoddi4+0x15c>
  403d84:	4608      	mov	r0, r1
  403d86:	e708      	b.n	403b9a <__udivmoddi4+0xe6>
  403d88:	f1a8 0802 	sub.w	r8, r8, #2
  403d8c:	443d      	add	r5, r7
  403d8e:	e72b      	b.n	403be8 <__udivmoddi4+0x134>

00403d90 <__aeabi_idiv0>:
  403d90:	4770      	bx	lr
  403d92:	bf00      	nop
  403d94:	47202d2d 	.word	0x47202d2d
  403d98:	69747465 	.word	0x69747465
  403d9c:	5320676e 	.word	0x5320676e
  403da0:	74726174 	.word	0x74726174
  403da4:	45206465 	.word	0x45206465
  403da8:	706d6178 	.word	0x706d6178
  403dac:	2d20656c 	.word	0x2d20656c
  403db0:	2d0a0d2d 	.word	0x2d0a0d2d
  403db4:	4153202d 	.word	0x4153202d
  403db8:	3037454d 	.word	0x3037454d
  403dbc:	4c50582d 	.word	0x4c50582d
  403dc0:	2d2d2044 	.word	0x2d2d2044
  403dc4:	2d2d0a0d 	.word	0x2d2d0a0d
  403dc8:	6d6f4320 	.word	0x6d6f4320
  403dcc:	656c6970 	.word	0x656c6970
  403dd0:	4d203a64 	.word	0x4d203a64
  403dd4:	31207261 	.word	0x31207261
  403dd8:	30322033 	.word	0x30322033
  403ddc:	32203731 	.word	0x32203731
  403de0:	35323a31 	.word	0x35323a31
  403de4:	2031313a 	.word	0x2031313a
  403de8:	000d2d2d 	.word	0x000d2d2d
  403dec:	666e6f43 	.word	0x666e6f43
  403df0:	72756769 	.word	0x72756769
  403df4:	79732065 	.word	0x79732065
  403df8:	6d657473 	.word	0x6d657473
  403dfc:	63697420 	.word	0x63697420
  403e00:	6f74206b 	.word	0x6f74206b
  403e04:	74656720 	.word	0x74656720
  403e08:	736d3120 	.word	0x736d3120
  403e0c:	63697420 	.word	0x63697420
  403e10:	6570206b 	.word	0x6570206b
  403e14:	646f6972 	.word	0x646f6972
  403e18:	00000d2e 	.word	0x00000d2e
  403e1c:	666e6f43 	.word	0x666e6f43
  403e20:	72756769 	.word	0x72756769
  403e24:	75622065 	.word	0x75622065
  403e28:	6e6f7474 	.word	0x6e6f7474
  403e2c:	69772073 	.word	0x69772073
  403e30:	64206874 	.word	0x64206874
  403e34:	756f6265 	.word	0x756f6265
  403e38:	6e69636e 	.word	0x6e69636e
  403e3c:	000d2e67 	.word	0x000d2e67
  403e40:	3044454c 	.word	0x3044454c
  403e44:	65792820 	.word	0x65792820
  403e48:	776f6c6c 	.word	0x776f6c6c
  403e4c:	00000029 	.word	0x00000029
  403e50:	00305753 	.word	0x00305753
  403e54:	73657250 	.word	0x73657250
  403e58:	73252073 	.word	0x73252073
  403e5c:	206f7420 	.word	0x206f7420
  403e60:	72617453 	.word	0x72617453
  403e64:	74532f74 	.word	0x74532f74
  403e68:	7420706f 	.word	0x7420706f
  403e6c:	25206568 	.word	0x25206568
  403e70:	6c622073 	.word	0x6c622073
  403e74:	696b6e69 	.word	0x696b6e69
  403e78:	0d2e676e 	.word	0x0d2e676e
  403e7c:	0000000a 	.word	0x0000000a
  403e80:	00002031 	.word	0x00002031

00403e84 <_global_impure_ptr>:
  403e84:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  403e94:	46454443 00000000 33323130 37363534     CDEF....01234567
  403ea4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  403eb4:	0000296c                                l)..

00403eb8 <blanks.7202>:
  403eb8:	20202020 20202020 20202020 20202020                     

00403ec8 <zeroes.7203>:
  403ec8:	30303030 30303030 30303030 30303030     0000000000000000
  403ed8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00403ee8 <_ctype_>:
  403ee8:	20202000 20202020 28282020 20282828     .         ((((( 
  403ef8:	20202020 20202020 20202020 20202020                     
  403f08:	10108820 10101010 10101010 10101010      ...............
  403f18:	04040410 04040404 10040404 10101010     ................
  403f28:	41411010 41414141 01010101 01010101     ..AAAAAA........
  403f38:	01010101 01010101 01010101 10101010     ................
  403f48:	42421010 42424242 02020202 02020202     ..BBBBBB........
  403f58:	02020202 02020202 02020202 10101010     ................
  403f68:	00000020 00000000 00000000 00000000      ...............
	...

00403fec <_init>:
  403fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403fee:	bf00      	nop
  403ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403ff2:	bc08      	pop	{r3}
  403ff4:	469e      	mov	lr, r3
  403ff6:	4770      	bx	lr

00403ff8 <__init_array_start>:
  403ff8:	004020d1 	.word	0x004020d1

00403ffc <__frame_dummy_init_array_entry>:
  403ffc:	00400165                                e.@.

00404000 <_fini>:
  404000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404002:	bf00      	nop
  404004:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404006:	bc08      	pop	{r3}
  404008:	469e      	mov	lr, r3
  40400a:	4770      	bx	lr

0040400c <__fini_array_start>:
  40400c:	00400141 	.word	0x00400141
